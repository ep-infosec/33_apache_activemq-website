<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>CachedConsumer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_cached_consumer_8h</filename>
    <class kind="class">activemq::cmsutil::CachedConsumer</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>CachedProducer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_cached_producer_8h</filename>
    <class kind="class">activemq::cmsutil::CachedProducer</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>CmsAccessor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_cms_accessor_8h</filename>
    <class kind="class">activemq::cmsutil::CmsAccessor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>CmsDestinationAccessor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_cms_destination_accessor_8h</filename>
    <class kind="class">activemq::cmsutil::CmsDestinationAccessor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>CmsTemplate.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_cms_template_8h</filename>
    <class kind="class">activemq::cmsutil::CmsTemplate</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ProducerExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ResolveProducerExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::SendExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ReceiveExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ResolveReceiveExecutor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>DestinationResolver.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_destination_resolver_8h</filename>
    <class kind="class">activemq::cmsutil::DestinationResolver</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicDestinationResolver.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_dynamic_destination_resolver_8h</filename>
    <class kind="class">activemq::cmsutil::DynamicDestinationResolver</class>
    <class kind="class">activemq::cmsutil::DynamicDestinationResolver::SessionResolver</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>MessageCreator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_message_creator_8h</filename>
    <class kind="class">activemq::cmsutil::MessageCreator</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>PooledSession.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_pooled_session_8h</filename>
    <class kind="class">activemq::cmsutil::PooledSession</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerCallback.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_producer_callback_8h</filename>
    <class kind="class">activemq::cmsutil::ProducerCallback</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceLifecycleManager.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>activemq_2cmsutil_2_resource_lifecycle_manager_8h</filename>
    <class kind="class">activemq::cmsutil::ResourceLifecycleManager</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>ResourceLifecycleManager.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/</path>
    <filename>decaf_2internal_2util_2_resource_lifecycle_manager_8h</filename>
    <class kind="class">decaf::internal::util::ResourceLifecycleManager</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
  </compound>
  <compound kind="file">
    <name>SessionCallback.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_session_callback_8h</filename>
    <class kind="class">activemq::cmsutil::SessionCallback</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>SessionPool.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/cmsutil/</path>
    <filename>_session_pool_8h</filename>
    <class kind="class">activemq::cmsutil::SessionPool</class>
    <namespace>activemq</namespace>
    <namespace>activemq::cmsutil</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQBlobMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_blob_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQBlobMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQBytesMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_bytes_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQBytesMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQDestination.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_destination_8h</filename>
    <class kind="class">activemq::commands::ActiveMQDestination</class>
    <class kind="struct">activemq::commands::ActiveMQDestination::DestinationFilter</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQMapMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_map_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQMapMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQMessageTemplate.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_message_template_8h</filename>
    <class kind="class">activemq::commands::ActiveMQMessageTemplate</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQObjectMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_object_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQObjectMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_queue_8h</filename>
    <class kind="class">activemq::commands::ActiveMQQueue</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQStreamMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_stream_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQStreamMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTempDestination.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_temp_destination_8h</filename>
    <class kind="class">activemq::commands::ActiveMQTempDestination</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTempQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_temp_queue_8h</filename>
    <class kind="class">activemq::commands::ActiveMQTempQueue</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTempTopic.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_temp_topic_8h</filename>
    <class kind="class">activemq::commands::ActiveMQTempTopic</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTextMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_text_message_8h</filename>
    <class kind="class">activemq::commands::ActiveMQTextMessage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTopic.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_active_m_q_topic_8h</filename>
    <class kind="class">activemq::commands::ActiveMQTopic</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>BaseCommand.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_base_command_8h</filename>
    <class kind="class">activemq::commands::BaseCommand</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>BaseDataStructure.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_base_data_structure_8h</filename>
    <class kind="class">activemq::commands::BaseDataStructure</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>BooleanExpression.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_boolean_expression_8h</filename>
    <class kind="class">activemq::commands::BooleanExpression</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>BrokerError.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_broker_error_8h</filename>
    <class kind="class">activemq::commands::BrokerError</class>
    <class kind="struct">activemq::commands::BrokerError::StackTraceElement</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>BrokerId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_broker_id_8h</filename>
    <class kind="class">activemq::commands::BrokerId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>BrokerInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_broker_info_8h</filename>
    <class kind="class">activemq::commands::BrokerInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>Command.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_command_8h</filename>
    <class kind="class">activemq::commands::Command</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionControl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_connection_control_8h</filename>
    <class kind="class">activemq::commands::ConnectionControl</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionError.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_connection_error_8h</filename>
    <class kind="class">activemq::commands::ConnectionError</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_connection_id_8h</filename>
    <class kind="class">activemq::commands::ConnectionId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_connection_info_8h</filename>
    <class kind="class">activemq::commands::ConnectionInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerControl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_consumer_control_8h</filename>
    <class kind="class">activemq::commands::ConsumerControl</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_consumer_id_8h</filename>
    <class kind="class">activemq::commands::ConsumerId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_consumer_info_8h</filename>
    <class kind="class">activemq::commands::ConsumerInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ControlCommand.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_control_command_8h</filename>
    <class kind="class">activemq::commands::ControlCommand</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>DataArrayResponse.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_data_array_response_8h</filename>
    <class kind="class">activemq::commands::DataArrayResponse</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>DataResponse.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_data_response_8h</filename>
    <class kind="class">activemq::commands::DataResponse</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>DataStructure.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_data_structure_8h</filename>
    <class kind="class">activemq::commands::DataStructure</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>DestinationInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_destination_info_8h</filename>
    <class kind="class">activemq::commands::DestinationInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>DiscoveryEvent.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_discovery_event_8h</filename>
    <class kind="class">activemq::commands::DiscoveryEvent</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionResponse.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_exception_response_8h</filename>
    <class kind="class">activemq::commands::ExceptionResponse</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>FlushCommand.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_flush_command_8h</filename>
    <class kind="class">activemq::commands::FlushCommand</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>IntegerResponse.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_integer_response_8h</filename>
    <class kind="class">activemq::commands::IntegerResponse</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>JournalQueueAck.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_journal_queue_ack_8h</filename>
    <class kind="class">activemq::commands::JournalQueueAck</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>JournalTopicAck.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_journal_topic_ack_8h</filename>
    <class kind="class">activemq::commands::JournalTopicAck</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>JournalTrace.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_journal_trace_8h</filename>
    <class kind="class">activemq::commands::JournalTrace</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>JournalTransaction.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_journal_transaction_8h</filename>
    <class kind="class">activemq::commands::JournalTransaction</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>KeepAliveInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_keep_alive_info_8h</filename>
    <class kind="class">activemq::commands::KeepAliveInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>LastPartialCommand.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_last_partial_command_8h</filename>
    <class kind="class">activemq::commands::LastPartialCommand</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>LocalTransactionId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_local_transaction_id_8h</filename>
    <class kind="class">activemq::commands::LocalTransactionId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>Message.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>activemq_2commands_2_message_8h</filename>
    <class kind="class">activemq::commands::Message</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>Message.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>cms_2_message_8h</filename>
    <class kind="class">cms::Message</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageAck.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_message_ack_8h</filename>
    <class kind="class">activemq::commands::MessageAck</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>MessageDispatch.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_message_dispatch_8h</filename>
    <class kind="class">activemq::commands::MessageDispatch</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>MessageDispatchNotification.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_message_dispatch_notification_8h</filename>
    <class kind="class">activemq::commands::MessageDispatchNotification</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>MessageId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_message_id_8h</filename>
    <class kind="class">activemq::commands::MessageId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>MessagePull.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_message_pull_8h</filename>
    <class kind="class">activemq::commands::MessagePull</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>NetworkBridgeFilter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_network_bridge_filter_8h</filename>
    <class kind="class">activemq::commands::NetworkBridgeFilter</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>PartialCommand.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_partial_command_8h</filename>
    <class kind="class">activemq::commands::PartialCommand</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerAck.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_producer_ack_8h</filename>
    <class kind="class">activemq::commands::ProducerAck</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_producer_id_8h</filename>
    <class kind="class">activemq::commands::ProducerId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_producer_info_8h</filename>
    <class kind="class">activemq::commands::ProducerInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>RemoveInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_remove_info_8h</filename>
    <class kind="class">activemq::commands::RemoveInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>RemoveSubscriptionInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_remove_subscription_info_8h</filename>
    <class kind="class">activemq::commands::RemoveSubscriptionInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ReplayCommand.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_replay_command_8h</filename>
    <class kind="class">activemq::commands::ReplayCommand</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>Response.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_response_8h</filename>
    <class kind="class">activemq::commands::Response</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>SessionId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_session_id_8h</filename>
    <class kind="class">activemq::commands::SessionId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>SessionInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_session_info_8h</filename>
    <class kind="class">activemq::commands::SessionInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ShutdownInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_shutdown_info_8h</filename>
    <class kind="class">activemq::commands::ShutdownInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>SubscriptionInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_subscription_info_8h</filename>
    <class kind="class">activemq::commands::SubscriptionInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_transaction_id_8h</filename>
    <class kind="class">activemq::commands::TransactionId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_transaction_info_8h</filename>
    <class kind="class">activemq::commands::TransactionInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>WireFormatInfo.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_wire_format_info_8h</filename>
    <class kind="class">activemq::commands::WireFormatInfo</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>XATransactionId.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/commands/</path>
    <filename>_x_a_transaction_id_8h</filename>
    <class kind="class">activemq::commands::XATransactionId</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQAckHandler.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_ack_handler_8h</filename>
    <class kind="class">activemq::core::ActiveMQAckHandler</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQConnection.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_connection_8h</filename>
    <class kind="class">activemq::core::ActiveMQConnection</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQConnectionFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_connection_factory_8h</filename>
    <class kind="class">activemq::core::ActiveMQConnectionFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQConnectionMetaData.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_connection_meta_data_8h</filename>
    <class kind="class">activemq::core::ActiveMQConnectionMetaData</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQConstants.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_constants_8h</filename>
    <class kind="class">activemq::core::ActiveMQConstants</class>
    <class kind="class">activemq::core::ActiveMQConstants::StaticInitializer</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQConsumer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_consumer_8h</filename>
    <class kind="class">activemq::core::ActiveMQConsumer</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQProducer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_producer_8h</filename>
    <class kind="class">activemq::core::ActiveMQProducer</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQQueueBrowser.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_queue_browser_8h</filename>
    <class kind="class">activemq::core::ActiveMQQueueBrowser</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQSession.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_session_8h</filename>
    <class kind="class">activemq::core::ActiveMQSession</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQSessionExecutor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_session_executor_8h</filename>
    <class kind="class">activemq::core::ActiveMQSessionExecutor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTransactionContext.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_transaction_context_8h</filename>
    <class kind="class">activemq::core::ActiveMQTransactionContext</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQXAConnection.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_x_a_connection_8h</filename>
    <class kind="class">activemq::core::ActiveMQXAConnection</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQXAConnectionFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_x_a_connection_factory_8h</filename>
    <class kind="class">activemq::core::ActiveMQXAConnectionFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQXASession.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_active_m_q_x_a_session_8h</filename>
    <class kind="class">activemq::core::ActiveMQXASession</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>DispatchData.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_dispatch_data_8h</filename>
    <class kind="class">activemq::core::DispatchData</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>Dispatcher.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_dispatcher_8h</filename>
    <class kind="class">activemq::core::Dispatcher</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>FifoMessageDispatchChannel.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_fifo_message_dispatch_channel_8h</filename>
    <class kind="class">activemq::core::FifoMessageDispatchChannel</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>MessageDispatchChannel.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_message_dispatch_channel_8h</filename>
    <class kind="class">activemq::core::MessageDispatchChannel</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultPrefetchPolicy.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/policies/</path>
    <filename>_default_prefetch_policy_8h</filename>
    <class kind="class">activemq::core::policies::DefaultPrefetchPolicy</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
    <namespace>activemq::core::policies</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultRedeliveryPolicy.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/policies/</path>
    <filename>_default_redelivery_policy_8h</filename>
    <class kind="class">activemq::core::policies::DefaultRedeliveryPolicy</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
    <namespace>activemq::core::policies</namespace>
  </compound>
  <compound kind="file">
    <name>PrefetchPolicy.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_prefetch_policy_8h</filename>
    <class kind="class">activemq::core::PrefetchPolicy</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>RedeliveryPolicy.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_redelivery_policy_8h</filename>
    <class kind="class">activemq::core::RedeliveryPolicy</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>SimplePriorityMessageDispatchChannel.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_simple_priority_message_dispatch_channel_8h</filename>
    <class kind="class">activemq::core::SimplePriorityMessageDispatchChannel</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>Synchronization.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/core/</path>
    <filename>_synchronization_8h</filename>
    <class kind="class">activemq::core::Synchronization</class>
    <namespace>activemq</namespace>
    <namespace>activemq::core</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/exceptions/</path>
    <filename>_active_m_q_exception_8h</filename>
    <class kind="class">activemq::exceptions::ActiveMQException</class>
    <namespace>activemq</namespace>
    <namespace>activemq::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>BrokerException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/exceptions/</path>
    <filename>_broker_exception_8h</filename>
    <class kind="class">activemq::exceptions::BrokerException</class>
    <namespace>activemq</namespace>
    <namespace>activemq::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionFailedException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/exceptions/</path>
    <filename>_connection_failed_exception_8h</filename>
    <class kind="class">activemq::exceptions::ConnectionFailedException</class>
    <namespace>activemq</namespace>
    <namespace>activemq::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionDefines.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/exceptions/</path>
    <filename>activemq_2exceptions_2_exception_defines_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>AMQ_CATCH_RETHROW</name>
      <anchorfile>activemq_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>a7310992ee48f64694a23e9557b383129</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AMQ_CATCH_EXCEPTION_CONVERT</name>
      <anchorfile>activemq_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>acb91c25aad64b2491670f3ced76a95c7</anchor>
      <arglist>(sourceType, targetType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AMQ_CATCHALL_THROW</name>
      <anchorfile>activemq_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>ab884bb9366639142ce31bbbf3281f4e7</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AMQ_CATCHALL_NOTHROW</name>
      <anchorfile>activemq_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>a152490367452489395a768645f576fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AMQ_CATCH_NOTHROW</name>
      <anchorfile>activemq_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>ae07e18429f97cda6e1e456f59b1a69aa</anchor>
      <arglist>(type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExceptionDefines.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>decaf_2lang_2exceptions_2_exception_defines_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_CATCH_RETHROW</name>
      <anchorfile>decaf_2lang_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>aef411e279ba1dc76b0017d1d21fb17c0</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_CATCH_EXCEPTION_CONVERT</name>
      <anchorfile>decaf_2lang_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>a735ed930833a89e59985534c3d59933b</anchor>
      <arglist>(sourceType, targetType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_CATCHALL_THROW</name>
      <anchorfile>decaf_2lang_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>afc53e79a95ec71cf378af8b429c66ebf</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_CATCHALL_NOTHROW</name>
      <anchorfile>decaf_2lang_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>acf727b122a321b754af393756f553fd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_CATCH_NOTHROW</name>
      <anchorfile>decaf_2lang_2exceptions_2_exception_defines_8h.html</anchorfile>
      <anchor>a00dd74c0b33b9533dcbc493495340140</anchor>
      <arglist>(type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LoggingInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/io/</path>
    <filename>_logging_input_stream_8h</filename>
    <class kind="class">activemq::io::LoggingInputStream</class>
    <namespace>activemq</namespace>
    <namespace>activemq::io</namespace>
  </compound>
  <compound kind="file">
    <name>LoggingOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/io/</path>
    <filename>_logging_output_stream_8h</filename>
    <class kind="class">activemq::io::LoggingOutputStream</class>
    <namespace>activemq</namespace>
    <namespace>activemq::io</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQCPP.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/library/</path>
    <filename>_active_m_q_c_p_p_8h</filename>
    <class kind="class">activemq::library::ActiveMQCPP</class>
    <namespace>activemq</namespace>
    <namespace>activemq::library</namespace>
  </compound>
  <compound kind="file">
    <name>CommandVisitor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_command_visitor_8h</filename>
    <class kind="class">activemq::state::CommandVisitor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::commands</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>CommandVisitorAdapter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_command_visitor_adapter_8h</filename>
    <class kind="class">activemq::state::CommandVisitorAdapter</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionState.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_connection_state_8h</filename>
    <class kind="class">activemq::state::ConnectionState</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionStateTracker.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_connection_state_tracker_8h</filename>
    <class kind="class">activemq::state::ConnectionStateTracker</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerState.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_consumer_state_8h</filename>
    <class kind="class">activemq::state::ConsumerState</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerState.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_producer_state_8h</filename>
    <class kind="class">activemq::state::ProducerState</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>SessionState.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_session_state_8h</filename>
    <class kind="class">activemq::state::SessionState</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>Tracked.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_tracked_8h</filename>
    <class kind="class">activemq::state::Tracked</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionState.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/state/</path>
    <filename>_transaction_state_8h</filename>
    <class kind="class">activemq::state::TransactionState</class>
    <namespace>activemq</namespace>
    <namespace>activemq::state</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeTask.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_composite_task_8h</filename>
    <class kind="class">activemq::threads::CompositeTask</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeTaskRunner.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_composite_task_runner_8h</filename>
    <class kind="class">activemq::threads::CompositeTaskRunner</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>DedicatedTaskRunner.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_dedicated_task_runner_8h</filename>
    <class kind="class">activemq::threads::DedicatedTaskRunner</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>Scheduler.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_scheduler_8h</filename>
    <class kind="class">activemq::threads::Scheduler</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>SchedulerTimerTask.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_scheduler_timer_task_8h</filename>
    <class kind="class">activemq::threads::SchedulerTimerTask</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>Task.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_task_8h</filename>
    <class kind="class">activemq::threads::Task</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>TaskRunner.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/threads/</path>
    <filename>_task_runner_8h</filename>
    <class kind="class">activemq::threads::TaskRunner</class>
    <namespace>activemq</namespace>
    <namespace>activemq::threads</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractTransportFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_abstract_transport_factory_8h</filename>
    <class kind="class">activemq::transport::AbstractTransportFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_composite_transport_8h</filename>
    <class kind="class">activemq::transport::CompositeTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>FutureResponse.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/correlator/</path>
    <filename>_future_response_8h</filename>
    <class kind="class">activemq::transport::correlator::FutureResponse</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::correlator</namespace>
  </compound>
  <compound kind="file">
    <name>ResponseCorrelator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/correlator/</path>
    <filename>_response_correlator_8h</filename>
    <class kind="class">activemq::transport::correlator::ResponseCorrelator</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::correlator</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultTransportListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_default_transport_listener_8h</filename>
    <class kind="class">activemq::transport::DefaultTransportListener</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>BackupTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_backup_transport_8h</filename>
    <class kind="class">activemq::transport::failover::BackupTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>BackupTransportPool.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_backup_transport_pool_8h</filename>
    <class kind="class">activemq::transport::failover::BackupTransportPool</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>CloseTransportsTask.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_close_transports_task_8h</filename>
    <class kind="class">activemq::transport::failover::CloseTransportsTask</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>FailoverTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_failover_transport_8h</filename>
    <class kind="class">activemq::transport::failover::FailoverTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>FailoverTransportFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_failover_transport_factory_8h</filename>
    <class kind="class">activemq::transport::failover::FailoverTransportFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>FailoverTransportListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_failover_transport_listener_8h</filename>
    <class kind="class">activemq::transport::failover::FailoverTransportListener</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>URIPool.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/failover/</path>
    <filename>_u_r_i_pool_8h</filename>
    <class kind="class">activemq::transport::failover::URIPool</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::failover</namespace>
  </compound>
  <compound kind="file">
    <name>InactivityMonitor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/inactivity/</path>
    <filename>_inactivity_monitor_8h</filename>
    <class kind="class">activemq::transport::inactivity::InactivityMonitor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::inactivity</namespace>
  </compound>
  <compound kind="file">
    <name>ReadChecker.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/inactivity/</path>
    <filename>_read_checker_8h</filename>
    <class kind="class">activemq::transport::inactivity::ReadChecker</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::inactivity</namespace>
  </compound>
  <compound kind="file">
    <name>WriteChecker.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/inactivity/</path>
    <filename>_write_checker_8h</filename>
    <class kind="class">activemq::transport::inactivity::WriteChecker</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::inactivity</namespace>
  </compound>
  <compound kind="file">
    <name>IOTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_i_o_transport_8h</filename>
    <class kind="class">activemq::transport::IOTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>LoggingTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/logging/</path>
    <filename>_logging_transport_8h</filename>
    <class kind="class">activemq::transport::logging::LoggingTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::logging</namespace>
  </compound>
  <compound kind="file">
    <name>InternalCommandListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/mock/</path>
    <filename>_internal_command_listener_8h</filename>
    <class kind="class">activemq::transport::mock::InternalCommandListener</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::mock</namespace>
  </compound>
  <compound kind="file">
    <name>MockTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/mock/</path>
    <filename>_mock_transport_8h</filename>
    <class kind="class">activemq::transport::mock::MockTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::mock</namespace>
  </compound>
  <compound kind="file">
    <name>MockTransportFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/mock/</path>
    <filename>_mock_transport_factory_8h</filename>
    <class kind="class">activemq::transport::mock::MockTransportFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::mock</namespace>
  </compound>
  <compound kind="file">
    <name>ResponseBuilder.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/mock/</path>
    <filename>_response_builder_8h</filename>
    <class kind="class">activemq::transport::mock::ResponseBuilder</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::mock</namespace>
  </compound>
  <compound kind="file">
    <name>SslTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/tcp/</path>
    <filename>_ssl_transport_8h</filename>
    <class kind="class">activemq::transport::tcp::SslTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>SslTransportFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/tcp/</path>
    <filename>_ssl_transport_factory_8h</filename>
    <class kind="class">activemq::transport::tcp::SslTransportFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>TcpTransport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/tcp/</path>
    <filename>_tcp_transport_8h</filename>
    <class kind="class">activemq::transport::tcp::TcpTransport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>TcpTransportFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/tcp/</path>
    <filename>_tcp_transport_factory_8h</filename>
    <class kind="class">activemq::transport::tcp::TcpTransportFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::transport::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>Transport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_transport_8h</filename>
    <class kind="class">activemq::transport::Transport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>TransportFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_transport_factory_8h</filename>
    <class kind="class">activemq::transport::TransportFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>TransportFilter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_transport_filter_8h</filename>
    <class kind="class">activemq::transport::TransportFilter</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>TransportListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_transport_listener_8h</filename>
    <class kind="class">activemq::transport::TransportListener</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>TransportRegistry.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/transport/</path>
    <filename>_transport_registry_8h</filename>
    <class kind="class">activemq::transport::TransportRegistry</class>
    <namespace>activemq</namespace>
    <namespace>activemq::transport</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQProperties.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_active_m_q_properties_8h</filename>
    <class kind="class">activemq::util::ActiveMQProperties</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>CMSExceptionSupport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_c_m_s_exception_support_8h</filename>
    <class kind="class">activemq::util::CMSExceptionSupport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
    <member kind="define">
      <type>#define</type>
      <name>AMQ_CATCH_ALL_THROW_CMSEXCEPTION</name>
      <anchorfile>_c_m_s_exception_support_8h.html</anchorfile>
      <anchor>aa3e496e079dd1da7018698a83a7fcdd3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompositeData.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_composite_data_8h</filename>
    <class kind="class">activemq::util::CompositeData</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>Config.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>activemq_2util_2_config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>AMQCPP_API</name>
      <anchorfile>activemq_2util_2_config_8h.html</anchorfile>
      <anchor>acbd131a10f5c91fc363bbb90be74faff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_UUID_UUID_H</name>
      <anchorfile>activemq_2util_2_config_8h.html</anchorfile>
      <anchor>ada221d5e40ac3a5d043a02e9db855517</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_UUID_T</name>
      <anchorfile>activemq_2util_2_config_8h.html</anchorfile>
      <anchor>a188bfa0d8c11b0d81f49be4afa647bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_PTHREAD_H</name>
      <anchorfile>activemq_2util_2_config_8h.html</anchorfile>
      <anchor>acf71b36fdd29bd9ef6709cecac0536d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Config.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>cms_2_config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CMS_API</name>
      <anchorfile>cms_2_config_8h.html</anchorfile>
      <anchor>a25b3a3344046fe8013e1ad36914667f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Config.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>decaf_2util_2_config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_API</name>
      <anchorfile>decaf_2util_2_config_8h.html</anchorfile>
      <anchor>a8823395a34e3cba9af2a3d11968f3b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_UUID_UUID_H</name>
      <anchorfile>decaf_2util_2_config_8h.html</anchorfile>
      <anchor>ada221d5e40ac3a5d043a02e9db855517</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_UUID_T</name>
      <anchorfile>decaf_2util_2_config_8h.html</anchorfile>
      <anchor>a188bfa0d8c11b0d81f49be4afa647bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_PTHREAD_H</name>
      <anchorfile>decaf_2util_2_config_8h.html</anchorfile>
      <anchor>acf71b36fdd29bd9ef6709cecac0536d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECAF_UNUSED</name>
      <anchorfile>decaf_2util_2_config_8h.html</anchorfile>
      <anchor>a020140ce33d6a3287b0e98458aac2f3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IdGenerator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_id_generator_8h</filename>
    <class kind="class">activemq::util::IdGenerator</class>
    <namespace>activemq</namespace>
    <namespace>activemq::library</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>LongSequenceGenerator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_long_sequence_generator_8h</filename>
    <class kind="class">activemq::util::LongSequenceGenerator</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>MarshallingSupport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_marshalling_support_8h</filename>
    <class kind="class">activemq::util::MarshallingSupport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryUsage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_memory_usage_8h</filename>
    <class kind="class">activemq::util::MemoryUsage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_primitive_list_8h</filename>
    <class kind="class">activemq::util::PrimitiveList</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveMap.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_primitive_map_8h</filename>
    <class kind="class">activemq::util::PrimitiveMap</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveValueConverter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_primitive_value_converter_8h</filename>
    <class kind="class">activemq::util::PrimitiveValueConverter</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveValueNode.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_primitive_value_node_8h</filename>
    <class kind="class">activemq::util::PrimitiveValueNode</class>
    <class kind="union">activemq::util::PrimitiveValueNode::PrimitiveValue</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>Service.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_service_8h</filename>
    <class kind="class">activemq::util::Service</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>ServiceListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_service_listener_8h</filename>
    <class kind="class">activemq::util::ServiceListener</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>ServiceStopper.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_service_stopper_8h</filename>
    <class kind="class">activemq::util::ServiceStopper</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>ServiceSupport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_service_support_8h</filename>
    <class kind="class">activemq::util::ServiceSupport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SERVICESUPPORT_H_</name>
      <anchorfile>_service_support_8h.html</anchorfile>
      <anchor>a76061a35fe20433ce8320371ddbfc99f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>URISupport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_u_r_i_support_8h</filename>
    <class kind="class">activemq::util::URISupport</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>Usage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/util/</path>
    <filename>_usage_8h</filename>
    <class kind="class">activemq::util::Usage</class>
    <namespace>activemq</namespace>
    <namespace>activemq::util</namespace>
  </compound>
  <compound kind="file">
    <name>MarshalAware.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/</path>
    <filename>_marshal_aware_8h</filename>
    <class kind="class">activemq::wireformat::MarshalAware</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
  </compound>
  <compound kind="file">
    <name>BaseDataStreamMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/</path>
    <filename>_base_data_stream_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
  </compound>
  <compound kind="file">
    <name>DataStreamMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/</path>
    <filename>_data_stream_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::DataStreamMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQBlobMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_blob_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQBlobMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQBytesMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_bytes_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQBytesMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQDestinationMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_destination_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQDestinationMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQMapMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_map_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQMapMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQObjectMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_object_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQObjectMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQQueueMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_queue_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQQueueMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQStreamMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_stream_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQStreamMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTempDestinationMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_temp_destination_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTempDestinationMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTempQueueMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_temp_queue_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTempQueueMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTempTopicMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_temp_topic_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTempTopicMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTextMessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_text_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTextMessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveMQTopicMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_active_m_q_topic_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTopicMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>BaseCommandMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_base_command_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>BrokerIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_broker_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::BrokerIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>BrokerInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_broker_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::BrokerInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionControlMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_connection_control_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionControlMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionErrorMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_connection_error_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionErrorMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_connection_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_connection_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerControlMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_consumer_control_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConsumerControlMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_consumer_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConsumerIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ConsumerInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_consumer_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConsumerInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ControlCommandMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_control_command_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ControlCommandMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>DataArrayResponseMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_data_array_response_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DataArrayResponseMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>DataResponseMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_data_response_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DataResponseMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>DestinationInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_destination_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DestinationInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>DiscoveryEventMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_discovery_event_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DiscoveryEventMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionResponseMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_exception_response_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ExceptionResponseMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>FlushCommandMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_flush_command_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::FlushCommandMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>IntegerResponseMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_integer_response_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::IntegerResponseMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>JournalQueueAckMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_journal_queue_ack_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalQueueAckMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>JournalTopicAckMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_journal_topic_ack_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalTopicAckMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>JournalTraceMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_journal_trace_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalTraceMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>JournalTransactionMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_journal_transaction_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalTransactionMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>KeepAliveInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_keep_alive_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::KeepAliveInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>LastPartialCommandMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_last_partial_command_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::LastPartialCommandMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>LocalTransactionIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_local_transaction_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::LocalTransactionIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MarshallerFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_marshaller_factory_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MarshallerFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MessageAckMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_message_ack_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageAckMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MessageDispatchMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_message_dispatch_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageDispatchMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MessageDispatchNotificationMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_message_dispatch_notification_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageDispatchNotificationMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MessageIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_message_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MessageMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_message_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>MessagePullMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_message_pull_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessagePullMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>NetworkBridgeFilterMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_network_bridge_filter_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::NetworkBridgeFilterMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>PartialCommandMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_partial_command_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::PartialCommandMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerAckMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_producer_ack_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ProducerAckMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_producer_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ProducerIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ProducerInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_producer_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ProducerInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>RemoveInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_remove_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::RemoveInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>RemoveSubscriptionInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_remove_subscription_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::RemoveSubscriptionInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ReplayCommandMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_replay_command_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ReplayCommandMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ResponseMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_response_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>SessionIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_session_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::SessionIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>SessionInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_session_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::SessionInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>ShutdownInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_shutdown_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ShutdownInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>SubscriptionInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_subscription_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::SubscriptionInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_transaction_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::TransactionIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_transaction_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::TransactionInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>WireFormatInfoMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_wire_format_info_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::WireFormatInfoMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>XATransactionIdMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/generated/</path>
    <filename>_x_a_transaction_id_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::XATransactionIdMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
  </compound>
  <compound kind="file">
    <name>PrimitiveTypesMarshaller.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/marshal/</path>
    <filename>_primitive_types_marshaller_8h</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::PrimitiveTypesMarshaller</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
  </compound>
  <compound kind="file">
    <name>OpenWireFormat.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/</path>
    <filename>_open_wire_format_8h</filename>
    <class kind="class">activemq::wireformat::openwire::OpenWireFormat</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
  </compound>
  <compound kind="file">
    <name>OpenWireFormatFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/</path>
    <filename>_open_wire_format_factory_8h</filename>
    <class kind="class">activemq::wireformat::openwire::OpenWireFormatFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
  </compound>
  <compound kind="file">
    <name>OpenWireFormatNegotiator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/</path>
    <filename>_open_wire_format_negotiator_8h</filename>
    <class kind="class">activemq::wireformat::openwire::OpenWireFormatNegotiator</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
  </compound>
  <compound kind="file">
    <name>OpenWireResponseBuilder.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/</path>
    <filename>_open_wire_response_builder_8h</filename>
    <class kind="class">activemq::wireformat::openwire::OpenWireResponseBuilder</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
  </compound>
  <compound kind="file">
    <name>BooleanStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/utils/</path>
    <filename>_boolean_stream_8h</filename>
    <class kind="class">activemq::wireformat::openwire::utils::BooleanStream</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::utils</namespace>
  </compound>
  <compound kind="file">
    <name>HexTable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/utils/</path>
    <filename>_hex_table_8h</filename>
    <class kind="class">activemq::wireformat::openwire::utils::HexTable</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::utils</namespace>
  </compound>
  <compound kind="file">
    <name>MessagePropertyInterceptor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/openwire/utils/</path>
    <filename>_message_property_interceptor_8h</filename>
    <class kind="class">activemq::wireformat::openwire::utils::MessagePropertyInterceptor</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::openwire::utils</namespace>
  </compound>
  <compound kind="file">
    <name>StompCommandConstants.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/stomp/</path>
    <filename>_stomp_command_constants_8h</filename>
    <class kind="class">activemq::wireformat::stomp::StompCommandConstants</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::stomp</namespace>
  </compound>
  <compound kind="file">
    <name>StompFrame.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/stomp/</path>
    <filename>_stomp_frame_8h</filename>
    <class kind="class">activemq::wireformat::stomp::StompFrame</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::stomp</namespace>
  </compound>
  <compound kind="file">
    <name>StompHelper.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/stomp/</path>
    <filename>_stomp_helper_8h</filename>
    <class kind="class">activemq::wireformat::stomp::StompHelper</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::stomp</namespace>
  </compound>
  <compound kind="file">
    <name>StompWireFormat.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/stomp/</path>
    <filename>_stomp_wire_format_8h</filename>
    <class kind="class">activemq::wireformat::stomp::StompWireFormat</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::stomp</namespace>
  </compound>
  <compound kind="file">
    <name>StompWireFormatFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/stomp/</path>
    <filename>_stomp_wire_format_factory_8h</filename>
    <class kind="class">activemq::wireformat::stomp::StompWireFormatFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
    <namespace>activemq::wireformat::stomp</namespace>
  </compound>
  <compound kind="file">
    <name>WireFormat.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/</path>
    <filename>_wire_format_8h</filename>
    <class kind="class">activemq::wireformat::WireFormat</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
  </compound>
  <compound kind="file">
    <name>WireFormatFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/</path>
    <filename>_wire_format_factory_8h</filename>
    <class kind="class">activemq::wireformat::WireFormatFactory</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
  </compound>
  <compound kind="file">
    <name>WireFormatNegotiator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/</path>
    <filename>_wire_format_negotiator_8h</filename>
    <class kind="class">activemq::wireformat::WireFormatNegotiator</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
  </compound>
  <compound kind="file">
    <name>WireFormatRegistry.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/activemq/wireformat/</path>
    <filename>_wire_format_registry_8h</filename>
    <class kind="class">activemq::wireformat::WireFormatRegistry</class>
    <namespace>activemq</namespace>
    <namespace>activemq::wireformat</namespace>
  </compound>
  <compound kind="file">
    <name>BytesMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_bytes_message_8h</filename>
    <class kind="class">cms::BytesMessage</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Closeable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>cms_2_closeable_8h</filename>
    <class kind="class">cms::Closeable</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Closeable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>decaf_2io_2_closeable_8h</filename>
    <class kind="class">decaf::io::Closeable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>CMSException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_c_m_s_exception_8h</filename>
    <class kind="class">cms::CMSException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>CMSProperties.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_c_m_s_properties_8h</filename>
    <class kind="class">cms::CMSProperties</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>CMSSecurityException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_c_m_s_security_exception_8h</filename>
    <class kind="class">cms::CMSSecurityException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Connection.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_connection_8h</filename>
    <class kind="class">cms::Connection</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_connection_factory_8h</filename>
    <class kind="class">cms::ConnectionFactory</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectionMetaData.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_connection_meta_data_8h</filename>
    <class kind="class">cms::ConnectionMetaData</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>DeliveryMode.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_delivery_mode_8h</filename>
    <class kind="class">cms::DeliveryMode</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Destination.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_destination_8h</filename>
    <class kind="class">cms::Destination</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>ExceptionListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_exception_listener_8h</filename>
    <class kind="class">cms::ExceptionListener</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>IllegalStateException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>cms_2_illegal_state_exception_8h</filename>
    <class kind="class">cms::IllegalStateException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>IllegalStateException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>decaf_2lang_2exceptions_2_illegal_state_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::IllegalStateException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidClientIdException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_invalid_client_id_exception_8h</filename>
    <class kind="class">cms::InvalidClientIdException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidDestinationException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_invalid_destination_exception_8h</filename>
    <class kind="class">cms::InvalidDestinationException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidSelectorException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_invalid_selector_exception_8h</filename>
    <class kind="class">cms::InvalidSelectorException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MapMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_map_message_8h</filename>
    <class kind="class">cms::MapMessage</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageConsumer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_consumer_8h</filename>
    <class kind="class">cms::MessageConsumer</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageEnumeration.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_enumeration_8h</filename>
    <class kind="class">cms::MessageEnumeration</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageEOFException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_e_o_f_exception_8h</filename>
    <class kind="class">cms::MessageEOFException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageFormatException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_format_exception_8h</filename>
    <class kind="class">cms::MessageFormatException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_listener_8h</filename>
    <class kind="class">cms::MessageListener</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageNotReadableException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_not_readable_exception_8h</filename>
    <class kind="class">cms::MessageNotReadableException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageNotWriteableException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_not_writeable_exception_8h</filename>
    <class kind="class">cms::MessageNotWriteableException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>MessageProducer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_message_producer_8h</filename>
    <class kind="class">cms::MessageProducer</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_object_message_8h</filename>
    <class kind="class">cms::ObjectMessage</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Queue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>cms_2_queue_8h</filename>
    <class kind="class">cms::Queue</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Queue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>decaf_2util_2_queue_8h</filename>
    <class kind="class">decaf::util::Queue</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>QueueBrowser.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_queue_browser_8h</filename>
    <class kind="class">cms::QueueBrowser</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Session.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_session_8h</filename>
    <class kind="class">cms::Session</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Startable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_startable_8h</filename>
    <class kind="class">cms::Startable</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Stoppable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_stoppable_8h</filename>
    <class kind="class">cms::Stoppable</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>StreamMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_stream_message_8h</filename>
    <class kind="class">cms::StreamMessage</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>TemporaryQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_temporary_queue_8h</filename>
    <class kind="class">cms::TemporaryQueue</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>TemporaryTopic.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_temporary_topic_8h</filename>
    <class kind="class">cms::TemporaryTopic</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>TextMessage.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_text_message_8h</filename>
    <class kind="class">cms::TextMessage</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Topic.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_topic_8h</filename>
    <class kind="class">cms::Topic</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionInProgressException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_transaction_in_progress_exception_8h</filename>
    <class kind="class">cms::TransactionInProgressException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>TransactionRolledBackException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_transaction_rolled_back_exception_8h</filename>
    <class kind="class">cms::TransactionRolledBackException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>UnsupportedOperationException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>cms_2_unsupported_operation_exception_8h</filename>
    <class kind="class">cms::UnsupportedOperationException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>UnsupportedOperationException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>decaf_2lang_2exceptions_2_unsupported_operation_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::UnsupportedOperationException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>XAConnection.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_x_a_connection_8h</filename>
    <class kind="class">cms::XAConnection</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>XAConnectionFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_x_a_connection_factory_8h</filename>
    <class kind="class">cms::XAConnectionFactory</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>XAException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_x_a_exception_8h</filename>
    <class kind="class">cms::XAException</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>XAResource.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_x_a_resource_8h</filename>
    <class kind="class">cms::XAResource</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>XASession.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_x_a_session_8h</filename>
    <class kind="class">cms::XASession</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>Xid.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/cms/</path>
    <filename>_xid_8h</filename>
    <class kind="class">cms::Xid</class>
    <namespace>cms</namespace>
  </compound>
  <compound kind="file">
    <name>AprPool.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/</path>
    <filename>_apr_pool_8h</filename>
    <class kind="class">decaf::internal::AprPool</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
  </compound>
  <compound kind="file">
    <name>DecafRuntime.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/</path>
    <filename>_decaf_runtime_8h</filename>
    <class kind="class">decaf::internal::DecafRuntime</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
  </compound>
  <compound kind="file">
    <name>StandardErrorOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/io/</path>
    <filename>_standard_error_output_stream_8h</filename>
    <class kind="class">decaf::internal::io::StandardErrorOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::io</namespace>
  </compound>
  <compound kind="file">
    <name>StandardInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/io/</path>
    <filename>_standard_input_stream_8h</filename>
    <class kind="class">decaf::internal::io::StandardInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::io</namespace>
  </compound>
  <compound kind="file">
    <name>StandardOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/io/</path>
    <filename>_standard_output_stream_8h</filename>
    <class kind="class">decaf::internal::io::StandardOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::io</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultServerSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_default_server_socket_factory_8h</filename>
    <class kind="class">decaf::internal::net::DefaultServerSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_default_socket_factory_8h</filename>
    <class kind="class">decaf::internal::net::DefaultSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>Network.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_network_8h</filename>
    <class kind="class">decaf::internal::net::Network</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketFileDescriptor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_socket_file_descriptor_8h</filename>
    <class kind="class">decaf::internal::net::SocketFileDescriptor</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultSSLContext.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/</path>
    <filename>_default_s_s_l_context_8h</filename>
    <class kind="class">decaf::internal::net::ssl::DefaultSSLContext</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultSSLServerSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/</path>
    <filename>_default_s_s_l_server_socket_factory_8h</filename>
    <class kind="class">decaf::internal::net::ssl::DefaultSSLServerSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>DefaultSSLSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/</path>
    <filename>_default_s_s_l_socket_factory_8h</filename>
    <class kind="class">decaf::internal::net::ssl::DefaultSSLSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLContextSpi.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_context_spi_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLContextSpi</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLParameters.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_parameters_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLParameters</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLServerSocket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_server_socket_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLServerSocket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLServerSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_server_socket_factory_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLServerSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLSocket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_socket_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLSocketException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_socket_exception_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_socket_factory_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLSocketInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_socket_input_stream_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>OpenSSLSocketOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/ssl/openssl/</path>
    <filename>_open_s_s_l_socket_output_stream_8h</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
  </compound>
  <compound kind="file">
    <name>TcpSocket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/tcp/</path>
    <filename>_tcp_socket_8h</filename>
    <class kind="class">decaf::internal::net::tcp::TcpSocket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>TcpSocketInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/tcp/</path>
    <filename>_tcp_socket_input_stream_8h</filename>
    <class kind="class">decaf::internal::net::tcp::TcpSocketInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>TcpSocketOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/tcp/</path>
    <filename>_tcp_socket_output_stream_8h</filename>
    <class kind="class">decaf::internal::net::tcp::TcpSocketOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::net::tcp</namespace>
  </compound>
  <compound kind="file">
    <name>URIEncoderDecoder.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_u_r_i_encoder_decoder_8h</filename>
    <class kind="class">decaf::internal::net::URIEncoderDecoder</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>URIHelper.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_u_r_i_helper_8h</filename>
    <class kind="class">decaf::internal::net::URIHelper</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>URIType.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/net/</path>
    <filename>_u_r_i_type_8h</filename>
    <class kind="class">decaf::internal::net::URIType</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::net</namespace>
  </compound>
  <compound kind="file">
    <name>BufferFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_buffer_factory_8h</filename>
    <class kind="class">decaf::internal::nio::BufferFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>ByteArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_byte_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::ByteArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>CharArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_char_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::CharArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_double_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::DoubleArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>FloatArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_float_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::FloatArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>IntArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_int_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::IntArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>LongArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_long_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::LongArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>ShortArrayBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/nio/</path>
    <filename>_short_array_buffer_8h</filename>
    <class kind="class">decaf::internal::nio::ShortArrayBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::nio</namespace>
  </compound>
  <compound kind="file">
    <name>SecureRandomImpl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/security/unix/</path>
    <filename>unix_2_secure_random_impl_8h</filename>
    <class kind="class">decaf::internal::security::SecureRandomImpl</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::security</namespace>
  </compound>
  <compound kind="file">
    <name>SecureRandomImpl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/security/windows/</path>
    <filename>windows_2_secure_random_impl_8h</filename>
    <class kind="class">decaf::internal::security::SecureRandomImpl</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::security</namespace>
  </compound>
  <compound kind="file">
    <name>ByteArrayAdapter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/</path>
    <filename>_byte_array_adapter_8h</filename>
    <class kind="class">decaf::internal::util::ByteArrayAdapter</class>
    <class kind="union">decaf::internal::util::ByteArrayAdapter::Array</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
  </compound>
  <compound kind="file">
    <name>ConditionImpl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/</path>
    <filename>_condition_impl_8h</filename>
    <class kind="class">decaf::internal::util::concurrent::ConditionImpl</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::internal::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>MutexImpl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/</path>
    <filename>_mutex_impl_8h</filename>
    <class kind="class">decaf::internal::util::concurrent::MutexImpl</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::internal::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>SynchronizableImpl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/</path>
    <filename>_synchronizable_impl_8h</filename>
    <class kind="class">decaf::internal::util::concurrent::SynchronizableImpl</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::internal::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Transferer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/</path>
    <filename>_transferer_8h</filename>
    <class kind="class">decaf::internal::util::concurrent::Transferer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::internal::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>TransferQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/</path>
    <filename>_transfer_queue_8h</filename>
    <class kind="class">decaf::internal::util::concurrent::TransferQueue</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::internal::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>TransferStack.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/</path>
    <filename>_transfer_stack_8h</filename>
    <class kind="class">decaf::internal::util::concurrent::TransferStack</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::internal::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ConditionHandle.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/unix/</path>
    <filename>unix_2_condition_handle_8h</filename>
    <class kind="class">decaf::util::concurrent::ConditionHandle</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ConditionHandle.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/windows/</path>
    <filename>windows_2_condition_handle_8h</filename>
    <class kind="class">decaf::util::concurrent::ConditionHandle</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>MutexHandle.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/unix/</path>
    <filename>unix_2_mutex_handle_8h</filename>
    <class kind="class">decaf::util::concurrent::MutexHandle</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>MutexHandle.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/concurrent/windows/</path>
    <filename>windows_2_mutex_handle_8h</filename>
    <class kind="class">decaf::util::concurrent::MutexHandle</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>GenericResource.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/</path>
    <filename>_generic_resource_8h</filename>
    <class kind="class">decaf::internal::util::GenericResource</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
  </compound>
  <compound kind="file">
    <name>HexStringParser.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/</path>
    <filename>_hex_string_parser_8h</filename>
    <class kind="class">decaf::internal::util::HexStringParser</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
  </compound>
  <compound kind="file">
    <name>Resource.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/</path>
    <filename>_resource_8h</filename>
    <class kind="class">decaf::internal::util::Resource</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
  </compound>
  <compound kind="file">
    <name>TimerTaskHeap.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/</path>
    <filename>_timer_task_heap_8h</filename>
    <class kind="class">decaf::internal::util::TimerTaskHeap</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
  </compound>
  <compound kind="file">
    <name>crc32.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>crc32_8h</filename>
    <member kind="variable">
      <type>local const unsigned long FAR</type>
      <name>crc_table</name>
      <anchorfile>crc32_8h.html</anchorfile>
      <anchor>ada68c33259165bfd9c9bf585ee0d02f8</anchor>
      <arglist>[TBLS][256]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deflate.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>deflate_8h</filename>
    <includes id="zutil_8h" name="zutil.h" local="yes" imported="no">zutil.h</includes>
    <class kind="struct">ct_data_s</class>
    <class kind="struct">tree_desc_s</class>
    <class kind="struct">internal_state</class>
    <member kind="define">
      <type>#define</type>
      <name>GZIP</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a9564352992f7a4001386d1c8e2977571</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LENGTH_CODES</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a8dd3b78c666b6592944b2acf1706e611</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LITERALS</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a3f59145500c9de746e7dc49fb98c29ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>L_CODES</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a2b0cc00cc6a7d521fba8d208a1cae477</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D_CODES</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a8798a9a526623abbd88fedb0727e21aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BL_CODES</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a9e19158a493307d4f211cdf223da8319</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEAP_SIZE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a1b45302695680930829cac31d65e41e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_BITS</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a51c241e7ad52441b8d4c1fd5f498b3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INIT_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a96cb576b9a3b5f8cb90bd4bb7ee449d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXTRA_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>affc01bd472ba5f5ad1519c40e20a3778</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NAME_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>acec08b85e51457d214b759d489785e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMENT_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a06c47936258e98a0c4ca38dd31a5f6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HCRC_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a09dffa22705cbe81ca94b8b379d43682</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUSY_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a4821f69a5605c2618cd4dc4d3f60979c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINISH_STATE</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a0474cba74b039aa45fe9412c1de86bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Freq</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a8bab2775fa423836b05f407d2f8bf6e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Code</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a068e76e6034d06450385bc98b69ea53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Dad</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>ad76da95d6074d29bacb152bc46d189d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Len</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a4490e644c06783cc69ad87c121e39e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>max_insert_length</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a0aa718c141a5a98e84262fd9fc042dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>put_byte</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a662a0774c0de95a9f1309019d52e914b</anchor>
      <arglist>(s, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_LOOKAHEAD</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>aab627bcc7d38e658a93d395c50180cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_DIST</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a1bac515806be1e59d7306b4126b0cca4</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WIN_INIT</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>ac2836f69eb1551bb9699e4dd87dfbdc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>d_code</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a578b4336ef92d19278e0a0d95699def5</anchor>
      <arglist>(dist)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tr_tally_lit</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>af3b11322da0fb4ec60a5ccc28e2554df</anchor>
      <arglist>(s, c, flush)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tr_tally_dist</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a68f55cdd396ad603d9f0b01afdbdf592</anchor>
      <arglist>(s, distance, length, flush)</arglist>
    </member>
    <member kind="typedef">
      <type>struct ct_data_s</type>
      <name>ct_data</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a0a4b5df3b2254c627b8a59e038963118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct static_tree_desc_s</type>
      <name>static_tree_desc</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a905910aabf6aabbe79ff0832e4a664cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct tree_desc_s</type>
      <name>tree_desc</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>ae978a66d78f0d68f945f48951f9151ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ush</type>
      <name>Pos</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a80a8610ae675eaeead82013bacde10a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pos FAR</type>
      <name>Posf</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a7fc422ecb86afdd5f330dad6f7c1136b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>IPos</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>ada696b787a46d01634b6365afcec1a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct internal_state</type>
      <name>deflate_state</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>aeaabc84f4830ec10deb9b64bd719617a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void ZLIB_INTERNAL _tr_init</type>
      <name>OF</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>a1a1a2b598f1cdc5cf5367a265d9711b1</anchor>
      <arglist>((deflate_state *s))</arglist>
    </member>
    <member kind="function">
      <type>int ZLIB_INTERNAL _tr_tally</type>
      <name>OF</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>ab1f1a6c3aaa420882ffe590981a5c19a</anchor>
      <arglist>((deflate_state *s, unsigned dist, unsigned lc))</arglist>
    </member>
    <member kind="function">
      <type>void ZLIB_INTERNAL _tr_flush_block</type>
      <name>OF</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>af0d6c2886ebf38be02cc803d5cc90648</anchor>
      <arglist>((deflate_state *s, charf *buf, ulg stored_len, int last))</arglist>
    </member>
    <member kind="variable">
      <type>uch ZLIB_INTERNAL</type>
      <name>_length_code</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>ac88cdfc823257dd30e51939e7f2e18d5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>uch ZLIB_INTERNAL</type>
      <name>_dist_code</name>
      <anchorfile>deflate_8h.html</anchorfile>
      <anchor>af6c8544687b8a2a44e9638c796dce61e</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gzguts.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>gzguts_8h</filename>
    <includes id="zlib_8h" name="zlib.h" local="yes" imported="no">zlib.h</includes>
    <class kind="struct">gz_state</class>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_INTERNAL</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a59d4d7ef4d73655c759211ec33a5d44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>local</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a08023ea6765c99d60a6a3840cd07156e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>zstrerror</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>af252c05931f39dd0b297fe9b8e174b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GZBUFSIZE</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>ac7601d319250861159389e68594fd72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GZ_NONE</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>afe4b4578cd8417c83de400ece282ac3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GZ_READ</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a97ca7a8b458e75a004e828cb28ac264c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GZ_WRITE</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a357c4f5723c26966ed9d68c9bd6490c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GZ_APPEND</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>aae0a1795746b0a2cb7989d2898280a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOOK</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a6d13af6430ff1d6f44ece076ff35b04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COPY</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a9e77d621548de2a80bc9c5909bfa2b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GZIP</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a9564352992f7a4001386d1c8e2977571</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GT_OFF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a87ad28552e786eaa1c31fed1950fdff4</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>gz_state FAR *</type>
      <name>gz_statep</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a15adc208a26903dbfe8c57720cf401c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>voidp malloc</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>add8b03ae5c2c602b728ebb3b21931371</anchor>
      <arglist>((uInt size))</arglist>
    </member>
    <member kind="function">
      <type>void free</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a8f8149fe81b707d93e4b55388d11a430</anchor>
      <arglist>((voidpf ptr))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN gzFile ZEXPORT gzopen64</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>aac76b39fa0bae53b6d22bb30e786e97c</anchor>
      <arglist>((const char *, const char *))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN z_off64_t ZEXPORT gzseek64</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a38d034b71b5426e3253b1dbbcd9e3a3b</anchor>
      <arglist>((gzFile, z_off64_t, int))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN z_off64_t ZEXPORT gztell64</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a2ba4df5fd79fa726abea6b0b9950f736</anchor>
      <arglist>((gzFile))</arglist>
    </member>
    <member kind="function">
      <type>void ZLIB_INTERNAL gz_error</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>a36ce0a727eede48426b5e0a15ff85fd8</anchor>
      <arglist>((gz_statep, int, const char *))</arglist>
    </member>
    <member kind="function">
      <type>unsigned ZLIB_INTERNAL gz_intmax</type>
      <name>OF</name>
      <anchorfile>gzguts_8h.html</anchorfile>
      <anchor>aefb198b657e0692645b197f67da89711</anchor>
      <arglist>((void))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inffast.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>inffast_8h</filename>
    <member kind="function">
      <type>void ZLIB_INTERNAL inflate_fast</type>
      <name>OF</name>
      <anchorfile>inffast_8h.html</anchorfile>
      <anchor>a01e4e64abadfea5b400e6602bc67bbec</anchor>
      <arglist>((z_streamp strm, unsigned start))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inffixed.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>inffixed_8h</filename>
  </compound>
  <compound kind="file">
    <name>inflate.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>inflate_8h</filename>
    <class kind="struct">inflate_state</class>
    <member kind="define">
      <type>#define</type>
      <name>GUNZIP</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>af0307d655eac2167b3854ed5fc711295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>inflate_mode</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99ecea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEAD</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa0b0955668575b21eb0ab2272aef49f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAGS</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa3aee94eb5ff82fe30d1195f935903b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaae9e4c627760f36823cdd153c24229157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OS</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa48654532ac8a1eee6c255d77e3e1c406</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXLEN</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa566a2c5006b8c3f014f20fc659c25e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRA</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaaffb2fb86309c5c698e319b5b6dd8ab3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa67bc2ced260a8e43805d2480a785d312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMMENT</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaaae696377c19e507b64e16be78ce3bbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HCRC</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaae4d85856c8036a23b19e1d32ae0e6b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DICTID</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa8139648a2f9b7edaba980ab309495f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DICT</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa14826de2bf5a66b660a8e338b6357133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaab47ea8bb955afd0adc0ef98517dd6084</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPEDO</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa9e64f20508d4395d6f91237950664f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STORED</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa77647f28a49007bb2c1f10fa36f33b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY_</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaabf17f496021fb9357faed8247beb3926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaaba6788019f0f871f0aefcd5644635785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TABLE</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa2e160f29fc076de5496a2b9968be9cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LENLENS</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaaaeda44348e46a8bc21bd6122b3f3e0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CODELENS</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa77b9f2ec0ee4bb6570ef4f42d8f2a492</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEN_</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaabcafe3c2154b6a611ba2cce131ca0f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEN</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaaff15d001decc8890fb72cc6065a1abba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LENEXT</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaad604a1d898344e0470e0f68968c41d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIST</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaac04fbbdf0d80a4ad25e565541deeebd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTEXT</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaafca1908d584fa781bde4cf8905c3bcab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa1155ee5305ebe5bb9407faa9d395ae93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIT</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa3b759690471ed29ecd243a8f36b93f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECK</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaaed65b7dfe470f4e500b15f7074bb7fa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LENGTH</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa3418c365e56fa4587ae44612afc6fa48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DONE</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa9c954bcf443428c80b0f107b3bc48749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaafe29bdbfb6e2165eec29bf28af429856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEM</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa5c97a00bfd8be44565f64bcad8c179e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYNC</name>
      <anchorfile>inflate_8h.html</anchorfile>
      <anchor>a164ea0159d5f0b5f12a646f25f99eceaa447bfe7992c2fe70bfe561225f74d379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inftrees.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>inftrees_8h</filename>
    <class kind="struct">code</class>
    <member kind="define">
      <type>#define</type>
      <name>ENOUGH_LENS</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>a9785642d346454e272be30a8016dff04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOUGH_DISTS</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>aa4f18dce1f4ecd74cfa8b18c8cd62933</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENOUGH</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>acef2f42f16f168d23ec870bd60a3b5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>codetype</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>a0f33f5acf9079ff1f054fa235df2443b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CODES</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>a0f33f5acf9079ff1f054fa235df2443ba4f2ec4135d8cf82c6c35780e470cac28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LENS</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>a0f33f5acf9079ff1f054fa235df2443ba86b0f8050ddd8ae0b99e2f9323ad00a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTS</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>a0f33f5acf9079ff1f054fa235df2443bafd7fbb659c736b26e79316ef09a2a9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int ZLIB_INTERNAL inflate_table</type>
      <name>OF</name>
      <anchorfile>inftrees_8h.html</anchorfile>
      <anchor>a4d1136e9de1da5f5d20f19564d9e6d25</anchor>
      <arglist>((codetype type, unsigned short FAR *lens, unsigned codes, code FAR *FAR *table, unsigned FAR *bits, unsigned short FAR *work))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trees.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>trees_8h</filename>
    <member kind="variable">
      <type>local const ct_data</type>
      <name>static_ltree</name>
      <anchorfile>trees_8h.html</anchorfile>
      <anchor>a6768b3bbdf10808bdddd44b13349c5a2</anchor>
      <arglist>[L_CODES+2]</arglist>
    </member>
    <member kind="variable">
      <type>local const ct_data</type>
      <name>static_dtree</name>
      <anchorfile>trees_8h.html</anchorfile>
      <anchor>a32b77d04af5dc26c5312766355386cec</anchor>
      <arglist>[D_CODES]</arglist>
    </member>
    <member kind="variable">
      <type>const uch ZLIB_INTERNAL</type>
      <name>_dist_code</name>
      <anchorfile>trees_8h.html</anchorfile>
      <anchor>a31d5beba08f389d7ff3d9fb5143a105a</anchor>
      <arglist>[DIST_CODE_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>const uch ZLIB_INTERNAL</type>
      <name>_length_code</name>
      <anchorfile>trees_8h.html</anchorfile>
      <anchor>aad8a9dfa73cf8ffa9346a441aa6c82ba</anchor>
      <arglist>[MAX_MATCH-MIN_MATCH+1]</arglist>
    </member>
    <member kind="variable">
      <type>local const int</type>
      <name>base_length</name>
      <anchorfile>trees_8h.html</anchorfile>
      <anchor>ac443b72d29eda7b511a746eab5411199</anchor>
      <arglist>[LENGTH_CODES]</arglist>
    </member>
    <member kind="variable">
      <type>local const int</type>
      <name>base_dist</name>
      <anchorfile>trees_8h.html</anchorfile>
      <anchor>a8aa132d4ec076aeec45b2fe616ce9db9</anchor>
      <arglist>[D_CODES]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zconf.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>zconf_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>const</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a2c212835823e3c54a8ab6d95c652660e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MEM_LEVEL</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a8e9fefb3d20386851ca693946127ab2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_WBITS</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>abd2f406ac1f9c49236376115d78ccb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OF</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>aa6c3c093d0900e1d96d07c91b53c1b5d</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZEXTERN</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a49b7f5eccfcc99e53178581632bc9589</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZEXPORT</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a181415878f03b95a7094309d824a14b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZEXPORTVA</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>af38d1853df635eee27f1a02f96457b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAR</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>aef060b3456fdcc093a7210a762d5f2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEEK_SET</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a0d112bae8fd35be772185b6ec6bcbe64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEEK_CUR</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a4c8d0b76b470ba65a43ca46a88320f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEEK_END</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>ad2a2e6c114780c3071efd24f16c7f7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>z_off_t</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a8cf4661a88ec12823d7cbdd3fa629eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>z_off64_t</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>ab9923767082c7a76924b31493e60d42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>Byte</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>ae3a497195d617519e5353ea7b417940f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uInt</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a87d141052bcd5ec8a80812a565c70369</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>uLong</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>acd2a5701a3aecf6700d2c66c606ecb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Byte FAR</type>
      <name>Bytef</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>aeb722a888064be47e12d05f692e0f407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char FAR</type>
      <name>charf</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a0f3f92a9c02f6f688bf081aabf230212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int FAR</type>
      <name>intf</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>aa857123283d7630b35e9b1d427dd6438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uInt FAR</type>
      <name>uIntf</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>adddbe74608d318334285e01f8a56fa5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uLong FAR</type>
      <name>uLongf</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a0426a5a0ed418ec4ae15af8281c64254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Byte const *</type>
      <name>voidpc</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a7db54413d7060e4b57868c2b23c0ec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Byte FAR *</type>
      <name>voidpf</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>a04c731495379021454c8e61439dc88ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Byte *</type>
      <name>voidp</name>
      <anchorfile>zconf_8h.html</anchorfile>
      <anchor>aa3397ff439b5e076528b04bc9b8b086a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zlib.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>zlib_8h</filename>
    <includes id="zconf_8h" name="zconf.h" local="yes" imported="no">zconf.h</includes>
    <class kind="struct">z_stream_s</class>
    <class kind="struct">gz_header_s</class>
    <class kind="struct">internal_state</class>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_VERSION</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a51dc9dc65e483b3222c1f0f6a87eb76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_VERNUM</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a6413cdfb4cdc0b5a09cf9b5f3f8f48ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_VER_MAJOR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a52eec052f38e306d472e75bfafda9608</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_VER_MINOR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a82109105b5511ffa8f8373b6a917e1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_VER_REVISION</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ad3662b8749a50045ec1c120354fb7e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_VER_SUBREVISION</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a788ea49a5b65e12b11d7f274542d5af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_NO_FLUSH</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ac3b62e37b9922d9496014515acd6083a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_PARTIAL_FLUSH</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>adbd49089a5611593f05ac80c9e12cc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_SYNC_FLUSH</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aa32ca175522e0ef314f4dc0b0196bada</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_FULL_FLUSH</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aed4fbb038c3973aacf52fccffbc44b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_FINISH</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a876a626ba14eb12eea4bbf6823b6ca50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_BLOCK</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a73e5f4c24156c63ba863014396685062</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_TREES</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a0c44b4d8d05cacb1227b535cd8ed538f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_OK</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a8cb802b6a11e926478dc6547c514c65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_STREAM_END</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a7d94a4a852228a899864a0053162e7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_NEED_DICT</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a32916ba675b2d06463da2576b6a49d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_ERRNO</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a3c66d64c427c0337c64e578537478737</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_STREAM_ERROR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aad97cde83a9a4bb77f5c3b03bb68e483</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_DATA_ERROR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a9eda83d428a71752d148f38b5dbe04f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_MEM_ERROR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ae2be6be871e377c6e2c25a7296ce320c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_BUF_ERROR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a425e2f0664e1b1f75bf2bffab88d353d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_VERSION_ERROR</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a7634cdd55f955ee1be99c065c6977371</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_NO_COMPRESSION</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a496a4523776bcfa14568cd083b59f24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_BEST_SPEED</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ad5222ae19b77c6e83815d07ca5d03fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_BEST_COMPRESSION</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a8db83edd9dea51f8cf0afd1727838b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_DEFAULT_COMPRESSION</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>af5387baee05124298e431ebe6fe96b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_FILTERED</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>af01ccb5a9db8d415cde987d9553ad200</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_HUFFMAN_ONLY</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a1eec3d3720ba91fd54fa08d2757c1785</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_RLE</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>af52c1220e7193d2da78332d75f9251ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_FIXED</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aaa5c996fbc985d5ec43f99112c0ac4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_DEFAULT_STRATEGY</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a580d7c2527e653ddd783109271750849</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_BINARY</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a2bfe22ed89d3553335d18a4c3cab67af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_TEXT</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ac5c9021ac9271248094c6b93c61e1f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_ASCII</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a9a852d9163cdb10687403d4e79dda06e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_UNKNOWN</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a4be54d9d68d40adb73f87492284cc290</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_DEFLATED</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a27a96226f3dc88e4743131c632adf32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Z_NULL</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ad15afa2776b41b2f4d8582dd152bd736</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>zlib_version</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a1f228220c3e6935eb171761c61487059</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>deflateInit</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ae7440c1c5a8becba6dbf410275dc0a5c</anchor>
      <arglist>(strm, level)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>inflateInit</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ad7c6797b618699f70f61323c5184f26e</anchor>
      <arglist>(strm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>deflateInit2</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a59b575a521efe7ea0d3b9dd3c8d315c1</anchor>
      <arglist>(strm, level, method, windowBits, memLevel, strategy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>inflateInit2</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a611fc206e69f34e812ca8b590982fdd5</anchor>
      <arglist>(strm, windowBits)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>inflateBackInit</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a9253571ea0fc77cc53c330c0411b8c19</anchor>
      <arglist>(strm, windowBits, window)</arglist>
    </member>
    <member kind="typedef">
      <type>voidpf alloc_func</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a67a40268fa6e70f6368c37c03eacf78d</anchor>
      <arglist>((voidpf opaque, uInt items, uInt size))</arglist>
    </member>
    <member kind="typedef">
      <type>struct z_stream_s</type>
      <name>z_stream</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>afa60092f4e0b9bc4f23b41c6930463f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>z_stream FAR *</type>
      <name>z_streamp</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a6ede25c84d3c9f8632305866acffb1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct gz_header_s</type>
      <name>gz_header</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a2c394ffb61e707fba3c6b1a36704b305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gz_header FAR *</type>
      <name>gz_headerp</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a40e9dcc294796d99b25e98fb06477fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voidp</type>
      <name>gzFile</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>acd0143ddd532551631ecc7093fd7adfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN const char *ZEXPORT zlibVersion</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ab1bbaa8881cd84bb4d6c306e3a315241</anchor>
      <arglist>((void))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflate</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a2e6d9561156aac56578c2f1434dc2595</anchor>
      <arglist>((z_streamp strm, int flush))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateEnd</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aaf595349427894f1dbaff9b509791256</anchor>
      <arglist>((z_streamp strm))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateSetDictionary</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>af4ceec9e4a1b0328f7bb73a6f423d2c0</anchor>
      <arglist>((z_streamp strm, const Bytef *dictionary, uIntdictLength))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateCopy</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ae1a33ab7164b2fbab7683c4bea4c50c4</anchor>
      <arglist>((z_streamp dest, z_streamp source))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateParams</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a35cdc947fd49a1bc22481945422bb97e</anchor>
      <arglist>((z_streamp strm, int level, int strategy))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateTune</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a769be8bd85feda1b2dcb502abc010b23</anchor>
      <arglist>((z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN uLong ZEXPORT deflateBound</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ab8bfcdd5ca05f2544694149a771644fa</anchor>
      <arglist>((z_streamp strm, uLong sourceLen))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflatePrime</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a4891be63c26cb4dc463c8b2fba7e5ae2</anchor>
      <arglist>((z_streamp strm, int bits, int value))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateSetHeader</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a77ea653416e54d2d8415fecdcfd2472c</anchor>
      <arglist>((z_streamp strm, gz_headerp head))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateReset2</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a2b1869016067f610d37462ef1862e2bb</anchor>
      <arglist>((z_streamp strm, int windowBits))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateBack</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a8df5cf36f8df181376ad722b2c13c8c2</anchor>
      <arglist>((z_streamp strm, in_func in, void FAR *in_desc, out_func out, void FAR *out_desc))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT compress</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a85df695aadb45de9c814f7a11f74705c</anchor>
      <arglist>((Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT compress2</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aa38fec9fd654c448681296d8bfee871a</anchor>
      <arglist>((Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN uLong ZEXPORT compressBound</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a4d4f28ef1b8cbd7884aa62fc9f7ab22b</anchor>
      <arglist>((uLong sourceLen))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN gzFile ZEXPORT gzdopen</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a60335f5e60905450d17d415a99db1d0e</anchor>
      <arglist>((int fd, const char *mode))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzbuffer</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>af62128c92c5321dd139070108189a639</anchor>
      <arglist>((gzFile file, unsigned size))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzsetparams</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a4bf8da17c7ec075cfbe8ba5340897cfd</anchor>
      <arglist>((gzFile file, int level, int strategy))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzread</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>afe848f00a307b58004de5a0ed5c7a98d</anchor>
      <arglist>((gzFile file, voidp buf, unsigned len))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzwrite</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ab8124cca4e0111abc3a089ac1fc53ecf</anchor>
      <arglist>((gzFile file, voidpc buf, unsigned len))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORTVA gzprintf</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aa16722ec242cc8e52e5a9bcb07f6681a</anchor>
      <arglist>((gzFile file, const char *format,...))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzputs</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>afce6ce4068efaf8d5035a06a2a8ef8d4</anchor>
      <arglist>((gzFile file, const char *s))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN char *ZEXPORT gzgets</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aeb249b54a8b291ffedd96a0f3309d17b</anchor>
      <arglist>((gzFile file, char *buf, int len))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzputc</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a71bf5da80bd11fd776592fc319d6305c</anchor>
      <arglist>((gzFile file, int c))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzgetc</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a200aee6968107e38df3efcf80e9b696f</anchor>
      <arglist>((gzFile file))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzungetc</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a731d6b0156abd7f9b38ccb8d1841f371</anchor>
      <arglist>((int c, gzFile file))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT gzflush</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a1f60ebb9d0a34dc0246d08f8c17892e4</anchor>
      <arglist>((gzFile file, int flush))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN const char *ZEXPORT gzerror</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a8719df7ce51af4f5f1b2ed8e8454a56c</anchor>
      <arglist>((gzFile file, int *errnum))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN uLong ZEXPORT adler32</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a58d297b6efb8e8abf76451b5be91eac9</anchor>
      <arglist>((uLong adler, const Bytef *buf, uInt len))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN uLong ZEXPORT crc32</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a6fd2dcbf92d74eb1debc04f1ad4a7064</anchor>
      <arglist>((uLong crc, const Bytef *buf, uInt len))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateInit_</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aee7a3a2881b7bfd06796c01120975964</anchor>
      <arglist>((z_streamp strm, int level, const char *version, int stream_size))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateInit_</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a6fd21cd770ef0aeb9689108a28c17848</anchor>
      <arglist>((z_streamp strm, const char *version, int stream_size))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT deflateInit2_</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ad6065a31da6d85fc705e644f578e7493</anchor>
      <arglist>((z_streamp strm, intlevel, intmethod, int windowBits, int memLevel, int strategy, const char *version, int stream_size))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateInit2_</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a2f12a7cc3ddf8face3b53e6a7df08f24</anchor>
      <arglist>((z_streamp strm, intwindowBits, const char *version, int stream_size))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateBackInit_</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a740e2f0087d5e04edd8d19fd124e0114</anchor>
      <arglist>((z_streamp strm, int windowBits, unsigned char FAR *window, const char *version, int stream_size))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN gzFile ZEXPORT gzopen</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>acc5e4836cd9b15b586b2c1e69787b536</anchor>
      <arglist>((const char *, const char *))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN z_off_t ZEXPORT gzseek</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a079c739f233e67c4d7da395ad397d8ba</anchor>
      <arglist>((gzFile, z_off_t, int))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN z_off_t ZEXPORT gztell</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a641d9e9557d2e7aaed9976c1dba2b2bb</anchor>
      <arglist>((gzFile))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN uLong ZEXPORT adler32_combine</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>afef7201299fbeb2183f6efe1f5df3b22</anchor>
      <arglist>((uLong, uLong, z_off_t))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN const char *ZEXPORT zError</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>aeb600ab48f5eefd73b51e2e9d94d40cf</anchor>
      <arglist>((int))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateSyncPoint</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>ac9f4214f59c605d1fa213aaca45ac537</anchor>
      <arglist>((z_streamp))</arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN int ZEXPORT inflateUndermine</type>
      <name>OF</name>
      <anchorfile>zlib_8h.html</anchorfile>
      <anchor>a1e8430bf8a5f5fca764d705eb17cae0b</anchor>
      <arglist>((z_streamp, int))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zutil.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/internal/util/zip/</path>
    <filename>zutil_8h</filename>
    <includes id="zlib_8h" name="zlib.h" local="yes" imported="no">zlib.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ZLIB_INTERNAL</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a59d4d7ef4d73655c759211ec33a5d44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>local</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a08023ea6765c99d60a6a3840cd07156e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERR_MSG</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a66466516a4a71f3c78ccc40d203c92e5</anchor>
      <arglist>(err)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERR_RETURN</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a0fcc2fe26110263e812ce50919b6a5c1</anchor>
      <arglist>(strm, err)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEF_WBITS</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>aef084f32d9ca8b9273a1c826b89b979a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEF_MEM_LEVEL</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a19c8e60fa32d4ddf303ce988ba97af61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STORED_BLOCK</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a9f650bc9c1fbd9499098e3a70d295b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STATIC_TREES</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a0f63a9090acfe4f653f117b638b289d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DYN_TREES</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a40a71de753262f20a0bcacc2304e7b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_MATCH</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a7984ceb1ff48ac91172976b91ed43f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MATCH</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>ab7a9188dce25dac8d3a970c01b89b0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRESET_DICT</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a1156d73d88538d122acfa852b95492bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OS_CODE</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a919da7d9b61966c3af796ab42e618bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F_OPEN</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a7d40e22cfc0ad4087bf371d61290a0f5</anchor>
      <arglist>(name, mode)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Assert</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a5c8d8d889189d1461d10df831f3cd40e</anchor>
      <arglist>(cond, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Trace</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a93bbe97269cf8304b452a4d472dba191</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Tracev</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a67eab10382e740297e8a59d69f85464e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Tracevv</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>ae65182ff511f0b12345c20b6533f32d9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Tracec</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a15ce9096835263938f62694aee7a0a99</anchor>
      <arglist>(c, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Tracecv</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a54a66ee51c61d67607b64678b055af6b</anchor>
      <arglist>(c, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZALLOC</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a39679d03501d691bdfc62a3324cb9548</anchor>
      <arglist>(strm, items, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZFREE</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a71d7c4f186ae3a055367c92db5a8ab18</anchor>
      <arglist>(strm, addr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRY_FREE</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a8a5cef3599266dcaa129ed959a42bcf6</anchor>
      <arglist>(s, p)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uch</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>af3307af5922c72924a837559c801a8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uch FAR</type>
      <name>uchf</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>aaa6fdf02a2fdaf3731f17a19920ddb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ush</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a3754180d606d4ed15468d15d9665aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ush FAR</type>
      <name>ushf</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>ab854e4722acf30ada8a7a71b58d1b238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>ulg</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>abd6f60bf9450af2ecb94097a32c19a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ZEXTERN uLong ZEXPORT adler32_combine64</type>
      <name>OF</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>af4c7589f992eb4a3749eb5346a388481</anchor>
      <arglist>((uLong, uLong, z_off_t))</arglist>
    </member>
    <member kind="function">
      <type>void ZLIB_INTERNAL zmemcpy</type>
      <name>OF</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a7dfda152913a0f49d451d4ccf9505010</anchor>
      <arglist>((Bytef *dest, const Bytef *source, uInt len))</arglist>
    </member>
    <member kind="function">
      <type>int ZLIB_INTERNAL zmemcmp</type>
      <name>OF</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a1955fd2c6541c1efd6655ae1f13f2d6b</anchor>
      <arglist>((const Bytef *s1, const Bytef *s2, uInt len))</arglist>
    </member>
    <member kind="function">
      <type>void ZLIB_INTERNAL zmemzero</type>
      <name>OF</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a06f4a75197c392dddbdae31128c49958</anchor>
      <arglist>((Bytef *dest, uInt len))</arglist>
    </member>
    <member kind="function">
      <type>voidpf ZLIB_INTERNAL zcalloc</type>
      <name>OF</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>a085a6a51699c29d2fbbb5e04ed624563</anchor>
      <arglist>((voidpf opaque, unsigned items, unsigned size))</arglist>
    </member>
    <member kind="function">
      <type>void ZLIB_INTERNAL zcfree</type>
      <name>OF</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>afd7c8a4ea1366968a93bf375c2b9b942</anchor>
      <arglist>((voidpf opaque, voidpf ptr))</arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>z_errmsg</name>
      <anchorfile>zutil_8h.html</anchorfile>
      <anchor>ace9cfadbe3490be7fea6728608c4428d</anchor>
      <arglist>[10]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockingByteArrayInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_blocking_byte_array_input_stream_8h</filename>
    <class kind="class">decaf::io::BlockingByteArrayInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>BufferedInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_buffered_input_stream_8h</filename>
    <class kind="class">decaf::io::BufferedInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>BufferedOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_buffered_output_stream_8h</filename>
    <class kind="class">decaf::io::BufferedOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>ByteArrayInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_byte_array_input_stream_8h</filename>
    <class kind="class">decaf::io::ByteArrayInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>ByteArrayOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_byte_array_output_stream_8h</filename>
    <class kind="class">decaf::io::ByteArrayOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>DataInput.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_data_input_8h</filename>
    <class kind="class">decaf::io::DataInput</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>DataInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_data_input_stream_8h</filename>
    <class kind="class">decaf::io::DataInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>DataOutput.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_data_output_8h</filename>
    <class kind="class">decaf::io::DataOutput</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>DataOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_data_output_stream_8h</filename>
    <class kind="class">decaf::io::DataOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>EOFException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_e_o_f_exception_8h</filename>
    <class kind="class">decaf::io::EOFException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>FileDescriptor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_file_descriptor_8h</filename>
    <class kind="class">decaf::io::FileDescriptor</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>FilterInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_filter_input_stream_8h</filename>
    <class kind="class">decaf::io::FilterInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>FilterOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_filter_output_stream_8h</filename>
    <class kind="class">decaf::io::FilterOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>Flushable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_flushable_8h</filename>
    <class kind="class">decaf::io::Flushable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>InputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_input_stream_8h</filename>
    <class kind="class">decaf::io::InputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>InputStreamReader.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_input_stream_reader_8h</filename>
    <class kind="class">decaf::io::InputStreamReader</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>InterruptedIOException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_interrupted_i_o_exception_8h</filename>
    <class kind="class">decaf::io::InterruptedIOException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>IOException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_i_o_exception_8h</filename>
    <class kind="class">decaf::io::IOException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>OutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_output_stream_8h</filename>
    <class kind="class">decaf::io::OutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>OutputStreamWriter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_output_stream_writer_8h</filename>
    <class kind="class">decaf::io::OutputStreamWriter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>PushbackInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_pushback_input_stream_8h</filename>
    <class kind="class">decaf::io::PushbackInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>Reader.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_reader_8h</filename>
    <class kind="class">decaf::io::Reader</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>UnsupportedEncodingException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_unsupported_encoding_exception_8h</filename>
    <class kind="class">decaf::io::UnsupportedEncodingException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>UTFDataFormatException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_u_t_f_data_format_exception_8h</filename>
    <class kind="class">decaf::io::UTFDataFormatException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>Writer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/io/</path>
    <filename>_writer_8h</filename>
    <class kind="class">decaf::io::Writer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
  </compound>
  <compound kind="file">
    <name>Appendable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_appendable_8h</filename>
    <class kind="class">decaf::lang::Appendable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayPointer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_array_pointer_8h</filename>
    <class kind="class">decaf::lang::ArrayPointer</class>
    <class kind="struct">decaf::lang::ArrayPointer::ArrayData</class>
    <class kind="class">decaf::lang::ArrayPointerComparator</class>
    <class kind="struct">std::less&lt; decaf::lang::ArrayPointer&lt; T &gt; &gt;</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>std</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>aaeafb88074719fdfd5f6a73ca4dfcaeb</anchor>
      <arglist>(const ArrayPointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>afa2ea2197beb3907e9e5af6b78364566</anchor>
      <arglist>(const U *left, const ArrayPointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>aed87f073c88933900a27cfdafe391fa8</anchor>
      <arglist>(const ArrayPointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>a4beb2928cc4630c7cedac0ecba626129</anchor>
      <arglist>(const U *left, const ArrayPointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Boolean.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_boolean_8h</filename>
    <class kind="class">decaf::lang::Boolean</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Byte.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_byte_8h</filename>
    <class kind="class">decaf::lang::Byte</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Character.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_character_8h</filename>
    <class kind="class">decaf::lang::Character</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>CharSequence.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_char_sequence_8h</filename>
    <class kind="class">decaf::lang::CharSequence</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Comparable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_comparable_8h</filename>
    <class kind="class">decaf::lang::Comparable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Double.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_double_8h</filename>
    <class kind="class">decaf::lang::Double</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_exception_8h</filename>
    <class kind="class">decaf::lang::Exception</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>ClassCastException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_class_cast_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::ClassCastException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>IllegalArgumentException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_illegal_argument_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::IllegalArgumentException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>IllegalMonitorStateException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_illegal_monitor_state_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::IllegalMonitorStateException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>IllegalThreadStateException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_illegal_thread_state_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::IllegalThreadStateException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>IndexOutOfBoundsException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_index_out_of_bounds_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::IndexOutOfBoundsException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>InterruptedException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_interrupted_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::InterruptedException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidStateException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_invalid_state_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::InvalidStateException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>NullPointerException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_null_pointer_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::NullPointerException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>NumberFormatException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_number_format_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::NumberFormatException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>RuntimeException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/exceptions/</path>
    <filename>_runtime_exception_8h</filename>
    <class kind="class">decaf::lang::exceptions::RuntimeException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::lang::exceptions</namespace>
  </compound>
  <compound kind="file">
    <name>Float.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_float_8h</filename>
    <class kind="class">decaf::lang::Float</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Integer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_integer_8h</filename>
    <class kind="class">decaf::lang::Integer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Iterable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_iterable_8h</filename>
    <class kind="class">decaf::lang::Iterable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Long.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_long_8h</filename>
    <class kind="class">decaf::lang::Long</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Math.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_math_8h</filename>
    <class kind="class">decaf::lang::Math</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Number.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_number_8h</filename>
    <class kind="class">decaf::lang::Number</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Pointer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_pointer_8h</filename>
    <class kind="struct">decaf::lang::STATIC_CAST_TOKEN</class>
    <class kind="struct">decaf::lang::DYNAMIC_CAST_TOKEN</class>
    <class kind="class">decaf::lang::Pointer</class>
    <class kind="class">decaf::lang::PointerComparator</class>
    <class kind="struct">std::less&lt; decaf::lang::Pointer&lt; T &gt; &gt;</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>std</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>ad566cbbfbf88ab97528128f2290b8c6e</anchor>
      <arglist>(const Pointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>ae7305732b06513b5508ec14569b3729f</anchor>
      <arglist>(const U *left, const Pointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>a06a44db2c048f0eaca700e5a41073e89</anchor>
      <arglist>(const Pointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>a41e1e68798eeb0c41a9efa846121cc24</anchor>
      <arglist>(const U *left, const Pointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Readable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_readable_8h</filename>
    <class kind="class">decaf::lang::Readable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Runnable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_runnable_8h</filename>
    <class kind="class">decaf::lang::Runnable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Runtime.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_runtime_8h</filename>
    <class kind="class">decaf::lang::Runtime</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Short.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_short_8h</filename>
    <class kind="class">decaf::lang::Short</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>String.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_string_8h</filename>
    <class kind="class">decaf::lang::String</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>System.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_system_8h</filename>
    <class kind="class">decaf::lang::System</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Thread.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_thread_8h</filename>
    <class kind="class">decaf::lang::Thread</class>
    <class kind="class">decaf::lang::Thread::UncaughtExceptionHandler</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>ThreadGroup.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_thread_group_8h</filename>
    <class kind="class">decaf::lang::ThreadGroup</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>Throwable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/lang/</path>
    <filename>_throwable_8h</filename>
    <class kind="class">decaf::lang::Throwable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
  </compound>
  <compound kind="file">
    <name>BindException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_bind_exception_8h</filename>
    <class kind="class">decaf::net::BindException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_connect_exception_8h</filename>
    <class kind="class">decaf::net::ConnectException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>DatagramPacket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_datagram_packet_8h</filename>
    <class kind="class">decaf::net::DatagramPacket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>HttpRetryException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_http_retry_exception_8h</filename>
    <class kind="class">decaf::net::HttpRetryException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>Inet4Address.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_inet4_address_8h</filename>
    <class kind="class">decaf::net::Inet4Address</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>Inet6Address.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_inet6_address_8h</filename>
    <class kind="class">decaf::net::Inet6Address</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>InetAddress.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_inet_address_8h</filename>
    <class kind="class">decaf::net::InetAddress</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>InetSocketAddress.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_inet_socket_address_8h</filename>
    <class kind="class">decaf::net::InetSocketAddress</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>MalformedURLException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_malformed_u_r_l_exception_8h</filename>
    <class kind="class">decaf::net::MalformedURLException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>NoRouteToHostException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_no_route_to_host_exception_8h</filename>
    <class kind="class">decaf::net::NoRouteToHostException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>PortUnreachableException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_port_unreachable_exception_8h</filename>
    <class kind="class">decaf::net::PortUnreachableException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>ProtocolException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_protocol_exception_8h</filename>
    <class kind="class">decaf::net::ProtocolException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>ServerSocket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_server_socket_8h</filename>
    <class kind="class">decaf::net::ServerSocket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>ServerSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_server_socket_factory_8h</filename>
    <class kind="class">decaf::net::ServerSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>Socket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_8h</filename>
    <class kind="class">decaf::net::Socket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketAddress.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_address_8h</filename>
    <class kind="class">decaf::net::SocketAddress</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketError.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_error_8h</filename>
    <class kind="class">decaf::net::SocketError</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_exception_8h</filename>
    <class kind="class">decaf::net::SocketException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_factory_8h</filename>
    <class kind="class">decaf::net::SocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketImpl.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_impl_8h</filename>
    <class kind="class">decaf::net::SocketImpl</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketImplFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_impl_factory_8h</filename>
    <class kind="class">decaf::net::SocketImplFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketOptions.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_options_8h</filename>
    <class kind="class">decaf::net::SocketOptions</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SocketTimeoutException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_socket_timeout_exception_8h</filename>
    <class kind="class">decaf::net::SocketTimeoutException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>SSLContext.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_context_8h</filename>
    <class kind="class">decaf::net::ssl::SSLContext</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>SSLContextSpi.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_context_spi_8h</filename>
    <class kind="class">decaf::net::ssl::SSLContextSpi</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>SSLParameters.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_parameters_8h</filename>
    <class kind="class">decaf::net::ssl::SSLParameters</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>SSLServerSocket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_server_socket_8h</filename>
    <class kind="class">decaf::net::ssl::SSLServerSocket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>SSLServerSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_server_socket_factory_8h</filename>
    <class kind="class">decaf::net::ssl::SSLServerSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>SSLSocket.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_socket_8h</filename>
    <class kind="class">decaf::net::ssl::SSLSocket</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>SSLSocketFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/ssl/</path>
    <filename>_s_s_l_socket_factory_8h</filename>
    <class kind="class">decaf::net::ssl::SSLSocketFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::net::ssl</namespace>
  </compound>
  <compound kind="file">
    <name>UnknownHostException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_unknown_host_exception_8h</filename>
    <class kind="class">decaf::net::UnknownHostException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>UnknownServiceException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_unknown_service_exception_8h</filename>
    <class kind="class">decaf::net::UnknownServiceException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>URI.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_u_r_i_8h</filename>
    <class kind="class">decaf::net::URI</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>URISyntaxException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_u_r_i_syntax_exception_8h</filename>
    <class kind="class">decaf::net::URISyntaxException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>URL.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_u_r_l_8h</filename>
    <class kind="class">decaf::net::URL</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>URLDecoder.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_u_r_l_decoder_8h</filename>
    <class kind="class">decaf::net::URLDecoder</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>URLEncoder.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/net/</path>
    <filename>_u_r_l_encoder_8h</filename>
    <class kind="class">decaf::net::URLEncoder</class>
    <namespace>decaf</namespace>
    <namespace>decaf::net</namespace>
  </compound>
  <compound kind="file">
    <name>Buffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_buffer_8h</filename>
    <class kind="class">decaf::nio::Buffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>BufferOverflowException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_buffer_overflow_exception_8h</filename>
    <class kind="class">decaf::nio::BufferOverflowException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>BufferUnderflowException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_buffer_underflow_exception_8h</filename>
    <class kind="class">decaf::nio::BufferUnderflowException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>ByteBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_byte_buffer_8h</filename>
    <class kind="class">decaf::nio::ByteBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>CharBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_char_buffer_8h</filename>
    <class kind="class">decaf::nio::CharBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_double_buffer_8h</filename>
    <class kind="class">decaf::nio::DoubleBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>FloatBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_float_buffer_8h</filename>
    <class kind="class">decaf::nio::FloatBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>IntBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_int_buffer_8h</filename>
    <class kind="class">decaf::nio::IntBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidMarkException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_invalid_mark_exception_8h</filename>
    <class kind="class">decaf::nio::InvalidMarkException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>LongBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_long_buffer_8h</filename>
    <class kind="class">decaf::nio::LongBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>ReadOnlyBufferException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_read_only_buffer_exception_8h</filename>
    <class kind="class">decaf::nio::ReadOnlyBufferException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>ShortBuffer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/nio/</path>
    <filename>_short_buffer_8h</filename>
    <class kind="class">decaf::nio::ShortBuffer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::nio</namespace>
  </compound>
  <compound kind="file">
    <name>X500Principal.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/auth/x500/</path>
    <filename>_x500_principal_8h</filename>
    <class kind="class">decaf::security::auth::x500::X500Principal</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::auth</namespace>
    <namespace>decaf::security::auth::x500</namespace>
  </compound>
  <compound kind="file">
    <name>Certificate.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_certificate_8h</filename>
    <class kind="class">decaf::security::cert::Certificate</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>CertificateEncodingException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_certificate_encoding_exception_8h</filename>
    <class kind="class">decaf::security::cert::CertificateEncodingException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>CertificateException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_certificate_exception_8h</filename>
    <class kind="class">decaf::security::cert::CertificateException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>CertificateExpiredException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_certificate_expired_exception_8h</filename>
    <class kind="class">decaf::security::cert::CertificateExpiredException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>CertificateNotYetValidException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_certificate_not_yet_valid_exception_8h</filename>
    <class kind="class">decaf::security::cert::CertificateNotYetValidException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>CertificateParsingException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_certificate_parsing_exception_8h</filename>
    <class kind="class">decaf::security::cert::CertificateParsingException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>X509Certificate.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/cert/</path>
    <filename>_x509_certificate_8h</filename>
    <class kind="class">decaf::security::cert::X509Certificate</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::security::cert</namespace>
  </compound>
  <compound kind="file">
    <name>GeneralSecurityException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_general_security_exception_8h</filename>
    <class kind="class">decaf::security::GeneralSecurityException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidKeyException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_invalid_key_exception_8h</filename>
    <class kind="class">decaf::security::InvalidKeyException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>Key.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_key_8h</filename>
    <class kind="class">decaf::security::Key</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>KeyException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_key_exception_8h</filename>
    <class kind="class">decaf::security::KeyException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>KeyManagementException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_key_management_exception_8h</filename>
    <class kind="class">decaf::security::KeyManagementException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>NoSuchAlgorithmException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_no_such_algorithm_exception_8h</filename>
    <class kind="class">decaf::security::NoSuchAlgorithmException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>NoSuchProviderException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_no_such_provider_exception_8h</filename>
    <class kind="class">decaf::security::NoSuchProviderException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>Principal.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_principal_8h</filename>
    <class kind="class">decaf::security::Principal</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>PublicKey.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_public_key_8h</filename>
    <class kind="class">decaf::security::PublicKey</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>SecureRandom.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_secure_random_8h</filename>
    <class kind="class">decaf::security::SecureRandom</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>SecureRandomSpi.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_secure_random_spi_8h</filename>
    <class kind="class">decaf::security::SecureRandomSpi</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>SignatureException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/security/</path>
    <filename>_signature_exception_8h</filename>
    <class kind="class">decaf::security::SignatureException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::security</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractCollection.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_abstract_collection_8h</filename>
    <class kind="class">decaf::util::AbstractCollection</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_abstract_list_8h</filename>
    <class kind="class">decaf::util::AbstractList</class>
    <class kind="class">decaf::util::AbstractList::SimpleListIterator</class>
    <class kind="class">decaf::util::AbstractList::ConstSimpleListIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractMap.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_abstract_map_8h</filename>
    <class kind="class">decaf::util::AbstractMap</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_abstract_queue_8h</filename>
    <class kind="class">decaf::util::AbstractQueue</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractSequentialList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_abstract_sequential_list_8h</filename>
    <class kind="class">decaf::util::AbstractSequentialList</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractSet.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_abstract_set_8h</filename>
    <class kind="class">decaf::util::AbstractSet</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_array_list_8h</filename>
    <class kind="class">decaf::util::ArrayList</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Arrays.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_arrays_8h</filename>
    <class kind="class">decaf::util::Arrays</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Collection.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_collection_8h</filename>
    <class kind="class">decaf::util::Collection</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Comparator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_comparator_8h</filename>
    <class kind="class">decaf::util::Comparator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Less.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/comparators/</path>
    <filename>_less_8h</filename>
    <class kind="class">decaf::util::comparators::Less</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::comparators</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractExecutorService.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_abstract_executor_service_8h</filename>
    <class kind="class">decaf::util::concurrent::AbstractExecutorService</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicBoolean.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/atomic/</path>
    <filename>_atomic_boolean_8h</filename>
    <class kind="class">decaf::util::concurrent::atomic::AtomicBoolean</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::atomic</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicInteger.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/atomic/</path>
    <filename>_atomic_integer_8h</filename>
    <class kind="class">decaf::util::concurrent::atomic::AtomicInteger</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::atomic</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicRefCounter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/atomic/</path>
    <filename>_atomic_ref_counter_8h</filename>
    <class kind="class">decaf::util::concurrent::atomic::AtomicRefCounter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::atomic</namespace>
  </compound>
  <compound kind="file">
    <name>AtomicReference.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/atomic/</path>
    <filename>_atomic_reference_8h</filename>
    <class kind="class">decaf::util::concurrent::atomic::AtomicReference</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::atomic</namespace>
  </compound>
  <compound kind="file">
    <name>BlockingQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_blocking_queue_8h</filename>
    <class kind="class">decaf::util::concurrent::BlockingQueue</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>BrokenBarrierException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_broken_barrier_exception_8h</filename>
    <class kind="class">decaf::util::concurrent::BrokenBarrierException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Callable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_callable_8h</filename>
    <class kind="class">decaf::util::concurrent::Callable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>CancellationException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_cancellation_exception_8h</filename>
    <class kind="class">decaf::util::concurrent::CancellationException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Concurrent.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_concurrent_8h</filename>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_INFINITE</name>
      <anchorfile>_concurrent_8h.html</anchorfile>
      <anchor>ad11512f6ec10794c00ef6e970f8c7649</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>synchronized</name>
      <anchorfile>_concurrent_8h.html</anchorfile>
      <anchor>a70e1fb584fb43688f5a8719b7175ae86</anchor>
      <arglist>(W)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentMap.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_concurrent_map_8h</filename>
    <class kind="class">decaf::util::concurrent::ConcurrentMap</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentStlMap.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_concurrent_stl_map_8h</filename>
    <class kind="class">decaf::util::concurrent::ConcurrentStlMap</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>CopyOnWriteArrayList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_copy_on_write_array_list_8h</filename>
    <class kind="class">decaf::util::concurrent::CopyOnWriteArrayList</class>
    <class kind="class">decaf::util::concurrent::CopyOnWriteArrayList::ArrayListIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>CopyOnWriteArraySet.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_copy_on_write_array_set_8h</filename>
    <class kind="class">decaf::util::concurrent::CopyOnWriteArraySet</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>CountDownLatch.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_count_down_latch_8h</filename>
    <class kind="class">decaf::util::concurrent::CountDownLatch</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Delayed.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_delayed_8h</filename>
    <class kind="class">decaf::util::concurrent::Delayed</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutionException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_execution_exception_8h</filename>
    <class kind="class">decaf::util::concurrent::ExecutionException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Executor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_executor_8h</filename>
    <class kind="class">decaf::util::concurrent::Executor</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Executors.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_executors_8h</filename>
    <class kind="class">decaf::util::concurrent::Executors</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutorService.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_executor_service_8h</filename>
    <class kind="class">decaf::util::concurrent::ExecutorService</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Future.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_future_8h</filename>
    <class kind="class">decaf::util::concurrent::Future</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>LinkedBlockingQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_linked_blocking_queue_8h</filename>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::QueueNode</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::TotalLock</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::LinkedIterator</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::ConstLinkedIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Lock.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_lock_8h</filename>
    <class kind="class">decaf::util::concurrent::Lock</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Lock.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/locks/</path>
    <filename>locks_2_lock_8h</filename>
    <class kind="class">decaf::util::concurrent::locks::Lock</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractOwnableSynchronizer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/locks/</path>
    <filename>_abstract_ownable_synchronizer_8h</filename>
    <class kind="class">decaf::util::concurrent::locks::AbstractOwnableSynchronizer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
  </compound>
  <compound kind="file">
    <name>Condition.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/locks/</path>
    <filename>_condition_8h</filename>
    <class kind="class">decaf::util::concurrent::locks::Condition</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
  </compound>
  <compound kind="file">
    <name>LockSupport.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/locks/</path>
    <filename>_lock_support_8h</filename>
    <class kind="class">decaf::util::concurrent::locks::LockSupport</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
  </compound>
  <compound kind="file">
    <name>ReadWriteLock.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/locks/</path>
    <filename>_read_write_lock_8h</filename>
    <class kind="class">decaf::util::concurrent::locks::ReadWriteLock</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
  </compound>
  <compound kind="file">
    <name>ReentrantLock.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/locks/</path>
    <filename>_reentrant_lock_8h</filename>
    <class kind="class">decaf::util::concurrent::locks::ReentrantLock</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
  </compound>
  <compound kind="file">
    <name>Mutex.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_mutex_8h</filename>
    <class kind="class">decaf::util::concurrent::Mutex</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>RejectedExecutionException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_rejected_execution_exception_8h</filename>
    <class kind="class">decaf::util::concurrent::RejectedExecutionException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>RejectedExecutionHandler.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_rejected_execution_handler_8h</filename>
    <class kind="class">decaf::util::concurrent::RejectedExecutionHandler</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Semaphore.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_semaphore_8h</filename>
    <class kind="class">decaf::util::concurrent::Semaphore</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>Synchronizable.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_synchronizable_8h</filename>
    <class kind="class">decaf::util::concurrent::Synchronizable</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>SynchronousQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_synchronous_queue_8h</filename>
    <class kind="class">decaf::util::concurrent::SynchronousQueue</class>
    <class kind="class">decaf::util::concurrent::SynchronousQueue::EmptyIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ThreadFactory.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_thread_factory_8h</filename>
    <class kind="class">decaf::util::concurrent::ThreadFactory</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ThreadPoolExecutor.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_thread_pool_executor_8h</filename>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::AbortPolicy</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy::DiscardPolicy</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy::DiscardOldestPolicy</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>TimeoutException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_timeout_exception_8h</filename>
    <class kind="class">decaf::util::concurrent::TimeoutException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>TimeUnit.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/concurrent/</path>
    <filename>_time_unit_8h</filename>
    <class kind="class">decaf::util::concurrent::TimeUnit</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::concurrent</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentModificationException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_concurrent_modification_exception_8h</filename>
    <class kind="class">decaf::util::ConcurrentModificationException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Date.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_date_8h</filename>
    <class kind="class">decaf::util::Date</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Deque.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_deque_8h</filename>
    <class kind="class">decaf::util::Deque</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Iterator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_iterator_8h</filename>
    <class kind="class">decaf::util::Iterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>LinkedList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_linked_list_8h</filename>
    <class kind="class">decaf::util::LinkedList</class>
    <class kind="class">decaf::util::LinkedList::ListNode</class>
    <class kind="class">decaf::util::LinkedList::LinkedListIterator</class>
    <class kind="class">decaf::util::LinkedList::ConstLinkedListIterator</class>
    <class kind="class">decaf::util::LinkedList::ReverseIterator</class>
    <class kind="class">decaf::util::LinkedList::ConstReverseIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>List.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_list_8h</filename>
    <class kind="class">decaf::util::List</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>ListIterator.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_list_iterator_8h</filename>
    <class kind="class">decaf::util::ListIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>ConsoleHandler.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_console_handler_8h</filename>
    <class kind="class">decaf::util::logging::ConsoleHandler</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>ErrorManager.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_error_manager_8h</filename>
    <class kind="class">decaf::util::logging::ErrorManager</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>Filter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_filter_8h</filename>
    <class kind="class">decaf::util::logging::Filter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>Formatter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_formatter_8h</filename>
    <class kind="class">decaf::util::logging::Formatter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>Handler.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_handler_8h</filename>
    <class kind="class">decaf::util::logging::Handler</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>Level.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_level_8h</filename>
    <class kind="class">decaf::util::logging::Level</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_logger_8h</filename>
    <class kind="class">decaf::util::logging::Logger</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>LoggerCommon.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_logger_common_8h</filename>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
    <member kind="enumeration">
      <name>Levels</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Off</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32bab852b1c0e02e37f60a132890945b98fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Null</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32bae93bdd0c06a8e664828c1d82dd153e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Markblock</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba8cbcfbf90fae95f6854965a53c23c627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Debug</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32bae60daebce02dd323ae902e4c2179fa6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Info</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba9671fa0bd596831ef39ec3a469f7cd9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Warn</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba39012f2f2e370d710198d033477f3be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Error</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32baf8f577e2169195dc67fc8dcb8d843f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fatal</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba714aac649430daa883e2b506c6173327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Throwing</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba24723257764781790fcc10c7359a6241</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LoggerDefines.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_logger_defines_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_DECLARE</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>a5d3bcd5c65ad527073d468e41e7bbc61</anchor>
      <arglist>(loggerName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_INITIALIZE</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>acf5f0f0942143e67f3594e035c012cc1</anchor>
      <arglist>(loggerName, className, loggerFamily)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_DECLARE_LOCAL</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>ae91eb9682b10bf36c6039923eb752089</anchor>
      <arglist>(loggerName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_DEBUG</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>a6aa377f538e5de9514aaad880669d9dc</anchor>
      <arglist>(logger, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_DEBUG_1</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>ac446b40bb0c28f6f0aade83fd5d3d73b</anchor>
      <arglist>(logger, message, value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_INFO</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>ab414de4b7861333619542d5cb584455f</anchor>
      <arglist>(logger, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_ERROR</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>a0b19958eebcaba66eb492d1b11363c68</anchor>
      <arglist>(logger, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_WARN</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>a6567189f21a895bd2bb93009e173ec0b</anchor>
      <arglist>(logger, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOGDECAF_FATAL</name>
      <anchorfile>_logger_defines_8h.html</anchorfile>
      <anchor>ac3d44806ca674dbbc40880a11feeb996</anchor>
      <arglist>(logger, message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LoggerHierarchy.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_logger_hierarchy_8h</filename>
    <class kind="class">decaf::util::logging::LoggerHierarchy</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>LogManager.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_log_manager_8h</filename>
    <class kind="class">decaf::util::logging::LogManager</class>
    <namespace>decaf</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::io</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>LogRecord.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_log_record_8h</filename>
    <class kind="class">decaf::util::logging::LogRecord</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>LogWriter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_log_writer_8h</filename>
    <class kind="class">decaf::util::logging::LogWriter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>MarkBlockLogger.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_mark_block_logger_8h</filename>
    <class kind="class">decaf::util::logging::MarkBlockLogger</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>PropertiesChangeListener.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_properties_change_listener_8h</filename>
    <class kind="class">decaf::util::logging::PropertiesChangeListener</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleFormatter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_simple_formatter_8h</filename>
    <class kind="class">decaf::util::logging::SimpleFormatter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleLogger.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_simple_logger_8h</filename>
    <class kind="class">decaf::util::logging::SimpleLogger</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>StreamHandler.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_stream_handler_8h</filename>
    <class kind="class">decaf::util::logging::StreamHandler</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>XMLFormatter.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/logging/</path>
    <filename>_x_m_l_formatter_8h</filename>
    <class kind="class">decaf::util::logging::XMLFormatter</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::logging</namespace>
  </compound>
  <compound kind="file">
    <name>Map.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_map_8h</filename>
    <class kind="class">decaf::util::Map</class>
    <class kind="class">decaf::util::Map::Entry</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>NoSuchElementException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_no_such_element_exception_8h</filename>
    <class kind="class">decaf::util::NoSuchElementException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>PriorityQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_priority_queue_8h</filename>
    <class kind="class">decaf::util::PriorityQueue</class>
    <class kind="class">decaf::util::PriorityQueue::PriorityQueueIterator</class>
    <class kind="class">decaf::util::PriorityQueue::ConstPriorityQueueIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Properties.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_properties_8h</filename>
    <class kind="class">decaf::util::Properties</class>
    <namespace>decaf</namespace>
    <namespace>decaf::io</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Random.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_random_8h</filename>
    <class kind="class">decaf::util::Random</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Set.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_set_8h</filename>
    <class kind="class">decaf::util::Set</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>StlList.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_stl_list_8h</filename>
    <class kind="class">decaf::util::StlList</class>
    <class kind="class">decaf::util::StlList::StlListIterator</class>
    <class kind="class">decaf::util::StlList::ConstStlListIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>StlMap.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_stl_map_8h</filename>
    <class kind="class">decaf::util::StlMap</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>StlQueue.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_stl_queue_8h</filename>
    <class kind="class">decaf::util::StlQueue</class>
    <class kind="class">decaf::util::StlQueue::QueueIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>StlSet.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_stl_set_8h</filename>
    <class kind="class">decaf::util::StlSet</class>
    <class kind="class">decaf::util::StlSet::SetIterator</class>
    <class kind="class">decaf::util::StlSet::ConstSetIterator</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>StringTokenizer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_string_tokenizer_8h</filename>
    <class kind="class">decaf::util::StringTokenizer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_timer_8h</filename>
    <class kind="class">decaf::util::Timer</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>TimerTask.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_timer_task_8h</filename>
    <class kind="class">decaf::util::TimerTask</class>
    <namespace>decaf</namespace>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::internal::util</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>UUID.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/</path>
    <filename>_u_u_i_d_8h</filename>
    <class kind="class">decaf::util::UUID</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="file">
    <name>Adler32.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_adler32_8h</filename>
    <class kind="class">decaf::util::zip::Adler32</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>CheckedInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_checked_input_stream_8h</filename>
    <class kind="class">decaf::util::zip::CheckedInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>CheckedOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_checked_output_stream_8h</filename>
    <class kind="class">decaf::util::zip::CheckedOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>Checksum.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_checksum_8h</filename>
    <class kind="class">decaf::util::zip::Checksum</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>CRC32.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_c_r_c32_8h</filename>
    <class kind="class">decaf::util::zip::CRC32</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>DataFormatException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_data_format_exception_8h</filename>
    <class kind="class">decaf::util::zip::DataFormatException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>Deflater.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_deflater_8h</filename>
    <class kind="class">decaf::util::zip::Deflater</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>DeflaterOutputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_deflater_output_stream_8h</filename>
    <class kind="class">decaf::util::zip::DeflaterOutputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>Inflater.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_inflater_8h</filename>
    <class kind="class">decaf::util::zip::Inflater</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>InflaterInputStream.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_inflater_input_stream_8h</filename>
    <class kind="class">decaf::util::zip::InflaterInputStream</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="file">
    <name>ZipException.h</name>
    <path>/home/tabish/dev/activemq/activemq-cpp-3.3.x/activemq-cpp/src/main/decaf/util/zip/</path>
    <filename>_zip_exception_8h</filename>
    <class kind="class">decaf::util::zip::ZipException</class>
    <namespace>decaf</namespace>
    <namespace>decaf::util</namespace>
    <namespace>decaf::util::zip</namespace>
  </compound>
  <compound kind="struct">
    <name>code</name>
    <filename>structcode.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>op</name>
      <anchorfile>structcode.html</anchorfile>
      <anchor>a4f075d73a9177d05cc7d332105295b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>bits</name>
      <anchorfile>structcode.html</anchorfile>
      <anchor>a5defcebb356dca1a5a8d39995f28d66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>val</name>
      <anchorfile>structcode.html</anchorfile>
      <anchor>a6f9c73627997e8fc6df02e620cf9a6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ct_data_s</name>
    <filename>structct__data__s.html</filename>
    <member kind="variable">
      <type>union ct_data_s::@0</type>
      <name>fc</name>
      <anchorfile>structct__data__s.html</anchorfile>
      <anchor>a4f9c9f1c63d48a747d49c9f441a5c8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ush</type>
      <name>freq</name>
      <anchorfile>unionct__data__s_1_1@0.html</anchorfile>
      <anchor>aa8cd040ca434852b61a023136f10c484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ush</type>
      <name>code</name>
      <anchorfile>unionct__data__s_1_1@0.html</anchorfile>
      <anchor>ae5d96f8a0ed2958cf1aff71b3bc32f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union ct_data_s::@1</type>
      <name>dl</name>
      <anchorfile>structct__data__s.html</anchorfile>
      <anchor>a1de4b7880172e0218dc66e04573627d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ush</type>
      <name>dad</name>
      <anchorfile>unionct__data__s_1_1@1.html</anchorfile>
      <anchor>ac29e369174d1a84f00fce2ca29e38707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ush</type>
      <name>len</name>
      <anchorfile>unionct__data__s_1_1@1.html</anchorfile>
      <anchor>a7e4dd13a24f79b585ebc5d7cd814b12f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gz_header_s</name>
    <filename>structgz__header__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>text</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>af94c3fadfed835a501bc1babc4b894f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uLong</type>
      <name>time</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a5f00bb6f9689c1abf7a54dad449ce9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xflags</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a40e35dc1a967c6537c6012cf5416210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>os</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a2708d3180d30b0563e3c2c965865cd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>extra</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a397959afc459da7e296c676a3d4c1915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>extra_len</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a271798915d64ae1f0d25a3a814ca0aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>extra_max</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>ada4b174bf7ec0442b1091011c7342ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>name</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a60ae5eee2882d1c25b3bb328972f0149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>name_max</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>af503d267de15a461b81dcbbfb0d628e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>comment</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a1d4fd0807e838ce4bfde54aa021e18e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>comm_max</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>aa0529f45e5c08b3009cfc2a61a86aea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hcrc</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>a29fa8de3acff8d8c7bad61dc924d8564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>done</name>
      <anchorfile>structgz__header__s.html</anchorfile>
      <anchor>ab8fd11f59b76a7d031e24bede8679d9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gz_state</name>
    <filename>structgz__state.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>mode</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>aaded3d8b2702b1bfabe3141e6f772b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fd</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a5963abca9e640ff2aa40b517f9cffc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>path</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ad52b106362f7262800d7224ff90fdd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>z_off64_t</type>
      <name>pos</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a2437a6feaf9c00cb127f5ac360018b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a36b86ed64aca8f022ec0f3411663fe24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>want</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>abee992fb115f9f118377b9f46d14b2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>in</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>af16c5730c48518809ead34557d612942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>out</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ad83d10502587255806fd712109867106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>next</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ab0fe46e40d8980befc2033400137db37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>have</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>aa658215ab2d34e8bcaac3dedcb6d2616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>eof</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ae50ffc823858bc4f909e3d9507356f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>z_off64_t</type>
      <name>start</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a0eb95c1935a32c508a1e6fc1e84c8f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>z_off64_t</type>
      <name>raw</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ae32599fda854ec0d1aee2ce1c72c5afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>how</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ac6e4b7db699aacd089f6d55b01483d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>direct</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a114c6a0de43039853ead48a092792a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>aaf5e13a32b8618cde112e4312d480137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>strategy</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a2777c46311012def486c2aa720fe5203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>z_off64_t</type>
      <name>skip</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a4bc336eac6a48fd0f2645e672e5c6c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>seek</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ab60b82012b8193c3f44b2e48974b9dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>err</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>aa9832eb9300c065f6572e5699ab27938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>msg</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>ad49f321739e10ff0387a0e7fe31c6538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>z_stream</type>
      <name>strm</name>
      <anchorfile>structgz__state.html</anchorfile>
      <anchor>a77df647f4deba86cc8a4fa0a01a08f4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inflate_state</name>
    <filename>structinflate__state.html</filename>
    <member kind="variable">
      <type>inflate_mode</type>
      <name>mode</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a9c7906fee7eeeb450b13576531ca639d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>ab3cbcd2c5ff3b0b8b34ef402a13afdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>wrap</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a990d157b5c0d4ba178c3361de9ce6561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>havedict</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a2eb1cd634ed6baade952ffa5938ebcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flags</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a9dcf6151443750d75b2283d0a3e62c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>dmax</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>ae3d433011714e673b22e82156acc4416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>check</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>ae597e4f5c37b9f7881015384bf826371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>total</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>af9d1071eb75b1ee37a151ccec8dfee95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gz_headerp</type>
      <name>head</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>aac35b33a559009eb4bc0e2bdd8e9b5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>wbits</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a71f844b589ac450f17d69f3692a8c5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>wsize</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>acca16ca86216760eaf307bf71e15e470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>whave</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a6b56aabe80412784eadc1068981c9d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>wnext</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a1c3ec583646b68713e5c92151064a6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char FAR *</type>
      <name>window</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a9cc4c0bde426383731394dcf91c40673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>hold</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a5a91b1c59e52f1aa7eda75b86b05b843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>bits</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>ab37c3563f306f29e6ded8e933af14365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>length</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a5179d4c9b332d976cce7c6cce6bdf3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>offset</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>af1e38258e8585b1a37854066ef9d939c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>extra</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a5b7b0be77d61e8468716c7f265dd0780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>code const FAR *</type>
      <name>lencode</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a4560e1eb3318f7ea41896be84de0679a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>code const FAR *</type>
      <name>distcode</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a19f7ae2fe2682cb1163860f6991a107f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>lenbits</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a3ff97e6b230d7551fc848ff9de0236e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>distbits</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a98952f3f8f420a05b567f080aca0eb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>ncode</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a62b5ea8559856b315b6c89d9114c2109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>nlen</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a489b005f4fe214353cd80b77b4f23194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>ndist</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a4415e5e51efdd0c8672e4c601caa4762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>have</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a4a2b15912256bcf7b39980e15095ba58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>code FAR *</type>
      <name>next</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a872bf267d91efb4143e9cfb812e670bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>lens</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>aa0620e64487c48635f6c3a11a0aeb99d</anchor>
      <arglist>[320]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>work</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a85403907f7f5b9d355821ffa2591456c</anchor>
      <arglist>[288]</arglist>
    </member>
    <member kind="variable">
      <type>code</type>
      <name>codes</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>af9581f523a7d8d47fba6cdd73eaf1edc</anchor>
      <arglist>[ENOUGH]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sane</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a98b40fe23b7177bc8cd1d9d73edad593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>back</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>ab666ce74a806fc77200ced9bc385cb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>was</name>
      <anchorfile>structinflate__state.html</anchorfile>
      <anchor>a0e3af9175f6d3b30f83af69062ba4dec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>internal_state</name>
    <filename>structinternal__state.html</filename>
    <member kind="variable">
      <type>z_streamp</type>
      <name>strm</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aaf558a49ab8c6caea3d131c6b913db42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>status</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a8756cacdbac452a2633f87e06fae6c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>pending_buf</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ae5f393e8d0d569da6038749768f65b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ulg</type>
      <name>pending_buf_size</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a9100ecccf2f8bb474f0bcc7c69f55c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>pending_out</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a6e15ed78675c3c7bdb312623b5eceb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>pending</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ac92f5b70c269be4685539daef10b15a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>wrap</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ae80327ea7ad4ad0ef5baeef5ef3a6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gz_headerp</type>
      <name>gzhead</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ac023d0c9e6112dfe6cbd049a56484997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>gzindex</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a5e09188a83aadfcb0db60b0765596aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Byte</type>
      <name>method</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aeb38f8a255e975e703595577ea43220b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_flush</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aa9517fd4120306e1f07a05563a6fe40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>w_size</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a875579bf4d0e9d9f9c04ff288d22bb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>w_bits</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a016f4538a10e71ab601017a052c0a05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>w_mask</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a19aca516cb19d15cd0c2ea3c72cbe9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>window</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a8d5cccc7e4dd85927c84bb8efc645533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ulg</type>
      <name>window_size</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a4e45f5ef1c4d9d599a5fb11fa283806c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Posf *</type>
      <name>prev</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a93a7407be4c9df81f71a389eb1ff6c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Posf *</type>
      <name>head</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aafd9ba338599f15de29386ff7a0218f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>ins_h</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a8cf437698f428195122d3c530929a80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>hash_size</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aad05d6c37eb87eefafca51e05468f349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>hash_bits</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a5dbd3a26550651a746a8829210252715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>hash_mask</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a824166a384dcbf6d508c0f6b97a1cb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>hash_shift</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aec996517ec9d4c0741647c487d2c513c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>block_start</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a4ba16849758dfa969066693ca2cae880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>match_length</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aa1506e6907be6f3d4273a1386206ae0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPos</type>
      <name>prev_match</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a0f5871de1be252ed0496a8b7a30464ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>match_available</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>accddba15d8b54ca3f10163fa920599f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>strstart</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a946579b9b86ee466424ffb0a67eb7060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>match_start</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aced58a85c56daa1c5de41fa5ce75d2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>lookahead</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a3a826064126ee19a77f78919e2f9bb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>prev_length</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a7619fb70f9f66ff21b419b8ceac4904c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>max_chain_length</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ab1ffa7feb159edec170574813fae3279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>max_lazy_match</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ab74215ec1c106bf588a7642927d47b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a7ad2ab1df80c8cab4ffb97ff84e88c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>strategy</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a67219312df7fd2f86e06e6f14700eb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>good_match</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a68ba00254242017f330dca5e0191bca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nice_match</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a39ab99e52138c0628f645bc1e0c69a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ct_data_s</type>
      <name>dyn_ltree</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ae11867c05d54c575dbc713bbea71266c</anchor>
      <arglist>[HEAP_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>struct ct_data_s</type>
      <name>dyn_dtree</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a42a52476d3cde41e57a6ef2a6a78008f</anchor>
      <arglist>[2 *D_CODES+1]</arglist>
    </member>
    <member kind="variable">
      <type>struct ct_data_s</type>
      <name>bl_tree</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a98131fc5b64d0d7542bc3621aef19854</anchor>
      <arglist>[2 *BL_CODES+1]</arglist>
    </member>
    <member kind="variable">
      <type>struct tree_desc_s</type>
      <name>l_desc</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a0266c4e0250652904e6b4908d8da84a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct tree_desc_s</type>
      <name>d_desc</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ab2fddb383d3055b6ec81c7fef14e99d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct tree_desc_s</type>
      <name>bl_desc</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aa0e5da102c35a7e7d22dd1894039393b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ush</type>
      <name>bl_count</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>abf9e786c8e5b4ab5d620ab123208034c</anchor>
      <arglist>[MAX_BITS+1]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heap</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ad7edb9b1d387e631bc6fde1cad0af758</anchor>
      <arglist>[2 *L_CODES+1]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heap_len</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a0659e23b0188ac16db58f98ae2b67b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>heap_max</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>aa8c78bbfa5d71f3ccc55445a62897f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uch</type>
      <name>depth</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a8e525b4f3dfa38b3bbcb8b427e333570</anchor>
      <arglist>[2 *L_CODES+1]</arglist>
    </member>
    <member kind="variable">
      <type>uchf *</type>
      <name>l_buf</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a5e6c4269e29696b192e02fd01381e400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>lit_bufsize</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a25ad7fc0094e412144b4201df2126bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>last_lit</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a01689001a8f8c7dfa46a439b7ae0708a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ushf *</type>
      <name>d_buf</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ac636c34c1c08dc9d2f9c199ce2caa99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ulg</type>
      <name>opt_len</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a2f6efee5d2057aba8bca2c1a58cf418a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ulg</type>
      <name>static_len</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a8a83e269866761afa3a7b4641ba5ff91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>matches</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ac0f10ec7237615f6b632f2f4d14872ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_eob_len</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>abf71c5672f4fce10f6f6a99eb30f72e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ush</type>
      <name>bi_buf</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a6880946d081053778f5f544b04603d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bi_valid</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a241f3606e41a3aa0ef22868a41bd9a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ulg</type>
      <name>high_water</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>a85439cd585435b2590039339139d25cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dummy</name>
      <anchorfile>structinternal__state.html</anchorfile>
      <anchor>ab000a3e3c901dd063859521988ad7e52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tree_desc_s</name>
    <filename>structtree__desc__s.html</filename>
    <member kind="variable">
      <type>ct_data *</type>
      <name>dyn_tree</name>
      <anchorfile>structtree__desc__s.html</anchorfile>
      <anchor>a5c79989c018b96c729e88e41f98a4920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_code</name>
      <anchorfile>structtree__desc__s.html</anchorfile>
      <anchor>a11f42f2c0464693def462dcfdd871002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>static_tree_desc *</type>
      <name>stat_desc</name>
      <anchorfile>structtree__desc__s.html</anchorfile>
      <anchor>a7f237428776ee85058bb7f7f11900dd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>z_stream_s</name>
    <filename>structz__stream__s.html</filename>
    <member kind="variable">
      <type>Bytef *</type>
      <name>next_in</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a21d2c026f0f2fcd67f33011231f8ed00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>avail_in</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a0cf177f50dbb49692f27480cbcfde794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uLong</type>
      <name>total_in</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>aa8f408b9632737dc21519fa1ed34b08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bytef *</type>
      <name>next_out</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>aed4a02cfe93e975314fed50b04427bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uInt</type>
      <name>avail_out</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a45ad2364307af9d944fd39d4eca3ca3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uLong</type>
      <name>total_out</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>abae26f1f236cf920250b9d37fdf009c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>msg</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a9b2f745fc780e3b33e2935f8c650a326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct internal_state FAR *</type>
      <name>state</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>ac4a114217a1868dc6fbe7d1f5bda126b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>alloc_func</type>
      <name>zalloc</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a23a2299c384f808e76e9908f21216b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>free_func</type>
      <name>zfree</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a89eb750ade7f4f0b56bfdadf13344982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>voidpf</type>
      <name>opaque</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>ab72467f908d2ce65d5b42ee6556ef8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>data_type</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>a9d8f63877d7639a8bca60f9fc3704fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uLong</type>
      <name>adler</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>ade2217fe31e671be1257731883201223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uLong</type>
      <name>reserved</name>
      <anchorfile>structz__stream__s.html</anchorfile>
      <anchor>add73791dd19b49c9c68f3f3d328c37db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq</name>
    <filename>namespaceactivemq.html</filename>
    <namespace>activemq::cmsutil</namespace>
    <namespace>activemq::commands</namespace>
    <namespace>activemq::core</namespace>
    <namespace>activemq::exceptions</namespace>
    <namespace>activemq::io</namespace>
    <namespace>activemq::library</namespace>
    <namespace>activemq::state</namespace>
    <namespace>activemq::threads</namespace>
    <namespace>activemq::transport</namespace>
    <namespace>activemq::util</namespace>
    <namespace>activemq::wireformat</namespace>
  </compound>
  <compound kind="namespace">
    <name>activemq::cmsutil</name>
    <filename>namespaceactivemq_1_1cmsutil.html</filename>
    <class kind="class">activemq::cmsutil::CachedConsumer</class>
    <class kind="class">activemq::cmsutil::CachedProducer</class>
    <class kind="class">activemq::cmsutil::CmsAccessor</class>
    <class kind="class">activemq::cmsutil::CmsDestinationAccessor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate</class>
    <class kind="class">activemq::cmsutil::DestinationResolver</class>
    <class kind="class">activemq::cmsutil::DynamicDestinationResolver</class>
    <class kind="class">activemq::cmsutil::MessageCreator</class>
    <class kind="class">activemq::cmsutil::PooledSession</class>
    <class kind="class">activemq::cmsutil::ProducerCallback</class>
    <class kind="class">activemq::cmsutil::ResourceLifecycleManager</class>
    <class kind="class">activemq::cmsutil::SessionCallback</class>
    <class kind="class">activemq::cmsutil::SessionPool</class>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CachedConsumer</name>
    <filename>classactivemq_1_1cmsutil_1_1_cached_consumer.html</filename>
    <base>cms::MessageConsumer</base>
    <member kind="function">
      <type></type>
      <name>CachedConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a13188fadae44c2168123afd7db80c617</anchor>
      <arglist>(cms::MessageConsumer *consumer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CachedConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a3b1e93b3d321c63a0d83f11b161d676f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>aafa76f95c9cb69afd5940bfcdae06614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a73d1cde16247621675020b5f01d30a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a1e10717f6f2a0fef6e12b792b903f7df</anchor>
      <arglist>(int millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receiveNoWait</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a0d4d8c2df9bbcaf9e776baf4ab7f8f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageListener</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a359cd7b114369aff5a7d50002defbf57</anchor>
      <arglist>(cms::MessageListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageListener *</type>
      <name>getMessageListener</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>ae75ec0edef1c8202c00d328705f9748c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMessageSelector</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_consumer.html</anchorfile>
      <anchor>a23bbcd1a109aedb5aa9e4c38adf75e1d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CachedProducer</name>
    <filename>classactivemq_1_1cmsutil_1_1_cached_producer.html</filename>
    <base>cms::MessageProducer</base>
    <member kind="function">
      <type></type>
      <name>CachedProducer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a00ea1d31680b3a6ed4e20f4a33c605f2</anchor>
      <arglist>(cms::MessageProducer *producer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CachedProducer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a16758ab03160ee3ea342463dd0187bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a68e82f3721896a37afb876805fbfa394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>af5d2824291fd67966ddbc6cf352ad83d</anchor>
      <arglist>(cms::Message *message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a0aeed9cac910540cf7ac462c44efa170</anchor>
      <arglist>(cms::Message *message, int deliveryMode, int priority, long long timeToLive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>aef414ce9502d1d2ac775ae9c7b44edb2</anchor>
      <arglist>(const cms::Destination *destination, cms::Message *message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a17799897fd4327bc275c21edacdeeb9e</anchor>
      <arglist>(const cms::Destination *destination, cms::Message *message, int deliveryMode, int priority, long long timeToLive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeliveryMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a97fa9b96f6596ab538198c2b47d6377d</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDeliveryMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a598544e6f826dd45e5e1072c543c7217</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisableMessageID</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a32fa3ec49608dbc62bb9804272b8a3ca</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDisableMessageID</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a30acac83e713e8619e7cc8617270f2fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisableMessageTimeStamp</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a789e918022a5aa9f16d5bd5763b4aaa9</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDisableMessageTimeStamp</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>ad428a37591a5f2b54a548825ee37f3cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a51905cc6c97a13afed285d2e8aba0a4e</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a4ffaf2e0cd711aca6c0d19a0c8b26537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a4deb044f596a673e2bd84f0111e185c8</anchor>
      <arglist>(long long time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTimeToLive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cached_producer.html</anchorfile>
      <anchor>a3683695d26d8a553436ad8b4e094b896</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsAccessor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_accessor.html</filename>
    <member kind="function">
      <type></type>
      <name>CmsAccessor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a5482c2c7b807cc3de169f2755a59229b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CmsAccessor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a0c7309337d9814fee2f3de881b585048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ResourceLifecycleManager *</type>
      <name>getResourceLifecycleManager</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a2782956a5d2ca3a33916a0483205fd4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ResourceLifecycleManager *</type>
      <name>getResourceLifecycleManager</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>aaa7fbbf5d42eb8cb732c37d86c82e80d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionFactory</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a159825a85bdb1c4824999f40a282413a</anchor>
      <arglist>(cms::ConnectionFactory *connectionFactory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::ConnectionFactory *</type>
      <name>getConnectionFactory</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a90ba394df409b9a5cf84dec1f6f1343e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::ConnectionFactory *</type>
      <name>getConnectionFactory</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a8ac830eb5c8a1d05bf430927f1f23ed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSessionAcknowledgeMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a20fc2e0b332ebfb9f7879b2af0c2342b</anchor>
      <arglist>(cms::Session::AcknowledgeMode sessionAcknowledgeMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session::AcknowledgeMode</type>
      <name>getSessionAcknowledgeMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a88af681aa2f55c19a8754b2570e1329b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CmsAccessor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>adfc6edcddc8af6a6a42bf4573cefd17c</anchor>
      <arglist>(const CmsAccessor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CmsAccessor &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a37b747552f245cac8c3051b22d244b5e</anchor>
      <arglist>(const CmsAccessor &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>a1be826abcd008574ba89f583e3e10a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>ae24029f42e9eddcc4884c540e617f5b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>af0192938193045065792df6d4c9ec236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cms::Session *</type>
      <name>createSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>ac949750bb216ee6be018207f781572e7</anchor>
      <arglist>(cms::Connection *con)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkConnectionFactory</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_accessor.html</anchorfile>
      <anchor>af8111bcc5868aa2cd09979da4ecf15af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsDestinationAccessor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</filename>
    <base>activemq::cmsutil::CmsAccessor</base>
    <member kind="function">
      <type></type>
      <name>CmsDestinationAccessor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>ade739373f13f843d74471412407d2181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CmsDestinationAccessor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a69a0315b406471a578d213f63c8ff22c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPubSubDomain</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a5e61e0caaefd14032813345ef12732fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPubSubDomain</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a9821890ddfd1a49251637846ca6c9f2c</anchor>
      <arglist>(bool pubSubDomain)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DestinationResolver *</type>
      <name>getDestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a20289a180bef1eeaa753d69f9595cdfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DestinationResolver *</type>
      <name>getDestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a0434465af8ee755ba657a58a428d69ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a7ef6daef951b3e5ef310a79c277c3d40</anchor>
      <arglist>(DestinationResolver *destRes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>ad3a8528baeec88912c421f73febee659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a437dba94e175a17bfb2db6b3547ea31f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>resolveDestinationName</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>af3912a1ae98f39cceca2d8d839b99bcb</anchor>
      <arglist>(cms::Session *session, const std::string &amp;destName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkDestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_destination_accessor.html</anchorfile>
      <anchor>a0ffa9bb9b9d2deffb398565738325f36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsTemplate</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_template.html</filename>
    <base>activemq::cmsutil::CmsDestinationAccessor</base>
    <class kind="class">activemq::cmsutil::CmsTemplate::ProducerExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ReceiveExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ResolveProducerExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::ResolveReceiveExecutor</class>
    <class kind="class">activemq::cmsutil::CmsTemplate::SendExecutor</class>
    <member kind="function">
      <type></type>
      <name>CmsTemplate</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a77cb8f5c2ac4a0f54c0420498346d0dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CmsTemplate</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a56d493d8e9b593958d71f13e25bc86c2</anchor>
      <arglist>(cms::ConnectionFactory *connectionFactory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CmsTemplate</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a61faedd1fda58b7122ef518b758de37b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a5c81c0c696ddc0cc5ad195c67819b32c</anchor>
      <arglist>(cms::Destination *defaultDestination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getDefaultDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a459789bab4b955a72c1db11269c37e7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>getDefaultDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a95b2e5ceefc64fefc3a40e63395962bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultDestinationName</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a88e4edc09945126d68f882f69ac0d1c8</anchor>
      <arglist>(const std::string &amp;defaultDestinationName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string</type>
      <name>getDefaultDestinationName</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>adbc7ce57c05bae782711ce9b80d50cf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPubSubDomain</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>aeb48a050ea5ed5e149008c5bf9242d4e</anchor>
      <arglist>(bool pubSubDomain)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageIdEnabled</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>af6c8ee811705569621e750200497b2f1</anchor>
      <arglist>(bool messageIdEnabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageIdEnabled</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a35695be314062c78ccd29385f6e9a696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageTimestampEnabled</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>af4554f605a2012a76006de7f3ea9cf16</anchor>
      <arglist>(bool messageTimestampEnabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageTimestampEnabled</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a366a22b26ce2ee81722dc839b37d9294</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoLocal</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>af308ba1b238ad2081f7ba4537492de05</anchor>
      <arglist>(bool noLocal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNoLocal</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a8b4f15f822dffde7810aa8928a8a88c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiveTimeout</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a3d5cbdb04bec08b7b944d87d845ada14</anchor>
      <arglist>(long long receiveTimeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getReceiveTimeout</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a9303e5ca5b74c0ca9f206a7f85e3b972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExplicitQosEnabled</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a00c82ed3fa4e0760ca7f71b5e2a65c23</anchor>
      <arglist>(bool explicitQosEnabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExplicitQosEnabled</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a4963dbc645bee9f62ca7053c674ed6f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeliveryPersistent</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>afdbb384e66a24b0912c4432966e95a78</anchor>
      <arglist>(bool deliveryPersistent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeliveryMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a1a7c07213aeee65784e1b8521c001ccd</anchor>
      <arglist>(int deliveryMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDeliveryMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a3bf6889c880b940b4a419d9a17ab6674</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>aea6e91608560766224c2cf55976e0d44</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a8d8d8ef216a5fcb399c99f1d1ed78f39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a8e776ad78352b02994e0d4f596849085</anchor>
      <arglist>(long long timeToLive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTimeToLive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ad45b9d807cb582056a167e49c2327ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ab5febfcec6e464800277c28a69cb2348</anchor>
      <arglist>(SessionCallback *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a15fd8b65ac671047873e47f64574dcd5</anchor>
      <arglist>(ProducerCallback *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a2383c16e47fe505d450f24c4304867e1</anchor>
      <arglist>(cms::Destination *dest, ProducerCallback *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a7f1c8ff9669d14d4ee49f27a7ab340f5</anchor>
      <arglist>(const std::string &amp;destinationName, ProducerCallback *action)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a24a6d5ff256f2ca43047f4ec9046896a</anchor>
      <arglist>(MessageCreator *messageCreator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a5dbf71e10af6ef5ed4100959f3bafaed</anchor>
      <arglist>(cms::Destination *dest, MessageCreator *messageCreator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>af66990e82176914d2ce44e3ab397cee6</anchor>
      <arglist>(const std::string &amp;destinationName, MessageCreator *messageCreator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>af0f1407feb89bbd78a806623a5914aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a68abeca4ddfad3c9ed26a44a90b09f8e</anchor>
      <arglist>(cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ae5e33f6d01dc72e3d59bb1fd2b339d30</anchor>
      <arglist>(const std::string &amp;destinationName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receiveSelected</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ac5bb83376f9edc1fb31f0e0681395354</anchor>
      <arglist>(const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receiveSelected</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ad59c3727cab14603dbafff11b4497992</anchor>
      <arglist>(cms::Destination *destination, const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receiveSelected</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a09396162c77e26ecdbdeff9966df582b</anchor>
      <arglist>(const std::string &amp;destinationName, const std::string &amp;selector)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>RECEIVE_TIMEOUT_NO_WAIT</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a156f0bfce611d5bd9691f829cc0a02ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>RECEIVE_TIMEOUT_INDEFINITE_WAIT</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a9130e86fdc6fba3eb65c093c8e3a1e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEFAULT_PRIORITY</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a807e77bbd2593f0ad24c8a96286a7193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>DEFAULT_TIME_TO_LIVE</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a1529a95b1bdd2a6456330deb06cc3109</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ae2f80e91cfc5d7846618360c99615b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>aa143e89963f53128d768315683f1667f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ProducerExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a4a55812457b2b1284a043987b18099fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ResolveProducerExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a841e9ec437b02f86315d8b17a9f5f1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SendExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a5761d4d39d59b5b691b23c920063718c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ReceiveExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>a90b979c03506a4eea22f02547af3e2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ResolveReceiveExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template.html</anchorfile>
      <anchor>ae37324755c936015bff7e8f4ae86df80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsTemplate::ProducerExecutor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</filename>
    <base>activemq::cmsutil::SessionCallback</base>
    <member kind="function">
      <type></type>
      <name>ProducerExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>a0b186f746d3cc225bbae80b85c0cf275</anchor>
      <arglist>(ProducerCallback *action, CmsTemplate *parent, cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>a15700236deb3d6f7ab1ef8357a1b533c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInCms</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>a67f3178d8ca75785c8acca22d57208b5</anchor>
      <arglist>(cms::Session *session)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>af9cbaaf0c170a4aa4ea6c5f3eef625c0</anchor>
      <arglist>(cms::Session *session AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProducerCallback *</type>
      <name>action</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>a515f9a94e0ab341e90e7880def952c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CmsTemplate *</type>
      <name>parent</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>abbed8ee060eaea851931b5b0d1136313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cms::Destination *</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_producer_executor.html</anchorfile>
      <anchor>a4e39450f805516a5ed59b627df6b786c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsTemplate::ReceiveExecutor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</filename>
    <base>activemq::cmsutil::SessionCallback</base>
    <member kind="function">
      <type></type>
      <name>ReceiveExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>a02e9698150a1ef6885a16054e68e6e9b</anchor>
      <arglist>(CmsTemplate *parent, cms::Destination *destination, const std::string &amp;selector, bool noLocal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReceiveExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>a8807b4d68200156de695a2014d4aa2e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInCms</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>a29676b51525ee8f99ad6c87ca0904347</anchor>
      <arglist>(cms::Session *session)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>a67776a6edc3af46101e412a3476a7539</anchor>
      <arglist>(cms::Session *session AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function">
      <type>cms::Message *</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>ab1324d855be0ecc311625d5b593c7071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cms::Destination *</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>a00b02f7299840a387fea506d7a61bd34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>selector</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>aee85fb5770ad49a4efe1a194db4c1301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noLocal</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>ad64e1b0c9b774c8e42d3178ab4e3bafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cms::Message *</type>
      <name>message</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>af53fbbebb59e3bde5496b4e1c0364ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CmsTemplate *</type>
      <name>parent</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_receive_executor.html</anchorfile>
      <anchor>aac6756ff3028bed02b6ccb1ce67a264e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsTemplate::ResolveProducerExecutor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_producer_executor.html</filename>
    <base>activemq::cmsutil::CmsTemplate::ProducerExecutor</base>
    <member kind="function">
      <type></type>
      <name>ResolveProducerExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_producer_executor.html</anchorfile>
      <anchor>a61bfa6d68ae3384188a4f6dbfc377cf1</anchor>
      <arglist>(ProducerCallback *action, CmsTemplate *parent, const std::string &amp;destinationName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResolveProducerExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_producer_executor.html</anchorfile>
      <anchor>a86e3fd20b42af83d590aaffeca381870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_producer_executor.html</anchorfile>
      <anchor>acceda5b0a21902bb3f8ff56d9595c0e7</anchor>
      <arglist>(cms::Session *session)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsTemplate::ResolveReceiveExecutor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_receive_executor.html</filename>
    <base>activemq::cmsutil::CmsTemplate::ReceiveExecutor</base>
    <member kind="function">
      <type></type>
      <name>ResolveReceiveExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_receive_executor.html</anchorfile>
      <anchor>aabe7ebe3ecabb9e6014afad3c244399b</anchor>
      <arglist>(CmsTemplate *parent, const std::string &amp;selector, bool noLocal, const std::string &amp;destinationName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResolveReceiveExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_receive_executor.html</anchorfile>
      <anchor>ae4225368fa9294481371505908021dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_resolve_receive_executor.html</anchorfile>
      <anchor>ac3092b8c8dee529113b9a15933363f41</anchor>
      <arglist>(cms::Session *session)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::CmsTemplate::SendExecutor</name>
    <filename>classactivemq_1_1cmsutil_1_1_cms_template_1_1_send_executor.html</filename>
    <base>activemq::cmsutil::ProducerCallback</base>
    <member kind="function">
      <type></type>
      <name>SendExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_send_executor.html</anchorfile>
      <anchor>a8e08e0960f9399e0b3e442452a4611b5</anchor>
      <arglist>(MessageCreator *messageCreator, CmsTemplate *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SendExecutor</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_send_executor.html</anchorfile>
      <anchor>a6864f91d0ea4e9eff9cd49915887d716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInCms</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_cms_template_1_1_send_executor.html</anchorfile>
      <anchor>adae528c97bb7488ff2b397e842256dcb</anchor>
      <arglist>(cms::Session *session, cms::MessageProducer *producer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::DestinationResolver</name>
    <filename>classactivemq_1_1cmsutil_1_1_destination_resolver.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_destination_resolver.html</anchorfile>
      <anchor>a10d5879880d5f1c71086f240ad95c197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_destination_resolver.html</anchorfile>
      <anchor>a7ac57770340ada8acf2e12dbbeee3c4d</anchor>
      <arglist>(ResourceLifecycleManager *mgr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_destination_resolver.html</anchorfile>
      <anchor>a432fb374a081c66e546a0e6a318df2f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Destination *</type>
      <name>resolveDestinationName</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_destination_resolver.html</anchorfile>
      <anchor>a6f8afbf98913a9b1f142e6388ca59a03</anchor>
      <arglist>(cms::Session *session, const std::string &amp;destName, bool pubSubDomain)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::DynamicDestinationResolver</name>
    <filename>classactivemq_1_1cmsutil_1_1_dynamic_destination_resolver.html</filename>
    <base>activemq::cmsutil::DestinationResolver</base>
    <class kind="class">activemq::cmsutil::DynamicDestinationResolver::SessionResolver</class>
    <member kind="function">
      <type></type>
      <name>DynamicDestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_dynamic_destination_resolver.html</anchorfile>
      <anchor>a5ce3784179b748c2f0ca861e6d2ad01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DynamicDestinationResolver</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_dynamic_destination_resolver.html</anchorfile>
      <anchor>a8644dfd5f314addbc081778735db31d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_dynamic_destination_resolver.html</anchorfile>
      <anchor>a91bec799f74cb7df28e47e61c8125680</anchor>
      <arglist>(ResourceLifecycleManager *mgr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_dynamic_destination_resolver.html</anchorfile>
      <anchor>a0ad66ffc0ed7425fd78821718a67e6fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>resolveDestinationName</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_dynamic_destination_resolver.html</anchorfile>
      <anchor>a9eb90a225f2a4c0b6c964bc4a624e47f</anchor>
      <arglist>(cms::Session *session, const std::string &amp;destName, bool pubSubDomain)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::MessageCreator</name>
    <filename>classactivemq_1_1cmsutil_1_1_message_creator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageCreator</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_message_creator.html</anchorfile>
      <anchor>a34254d5bdc6a4c2f8ef4939180321a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Message *</type>
      <name>createMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_message_creator.html</anchorfile>
      <anchor>a1920e4081b14c7498e8a7672c522a8b8</anchor>
      <arglist>(cms::Session *session)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::PooledSession</name>
    <filename>classactivemq_1_1cmsutil_1_1_pooled_session.html</filename>
    <base>cms::Session</base>
    <member kind="function">
      <type></type>
      <name>PooledSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ad7ee1138829bf391fdaa69ff4e2979aa</anchor>
      <arglist>(SessionPool *pool, cms::Session *session)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PooledSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a746b4fc35647361f56c2c412c9b5495a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session *</type>
      <name>getSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a787670c7863ed144c839ec657214004d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Session *</type>
      <name>getSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aef7665e9725feb0c33f2574f2ab8b55a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ab880e4c543bcd876ca781312d46d3061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aa515e62c9d5d142d112ff1a34f2fac3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a4289e785669ee5d406207f5cf4b9a4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recover</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a94a8bb63c7f37a37d200c5384c70b459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a223262bf4be737b5fb0d3771cce09649</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aaab049292687650a9467195913d957c3</anchor>
      <arglist>(const cms::Destination *destination, const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a066dd84095b9b6f0217a91bc3d32a784</anchor>
      <arglist>(const cms::Destination *destination, const std::string &amp;selector, bool noLocal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createDurableConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a69524129f5faa86f1051281c41bfb9db</anchor>
      <arglist>(const cms::Topic *destination, const std::string &amp;name, const std::string &amp;selector, bool noLocal=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createCachedConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a581e2bd9c1ae807f58630530dfaf3c7a</anchor>
      <arglist>(const cms::Destination *destination, const std::string &amp;selector, bool noLocal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageProducer *</type>
      <name>createProducer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ac04cceaf6c74741e157cdba184d88303</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageProducer *</type>
      <name>createCachedProducer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>acf85e5abb8fefea1d56dcba3a2992139</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::QueueBrowser *</type>
      <name>createBrowser</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aa65d341afe4c88b226b50b109dc2759e</anchor>
      <arglist>(const cms::Queue *queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::QueueBrowser *</type>
      <name>createBrowser</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ad0e8db28a59ef67f95e02c5aaa36231f</anchor>
      <arglist>(const cms::Queue *queue, const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Queue *</type>
      <name>createQueue</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>af7285382b2910d5137d4535899f54fd5</anchor>
      <arglist>(const std::string &amp;queueName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Topic *</type>
      <name>createTopic</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a74d1a2067c0389accd908d37a840cbd9</anchor>
      <arglist>(const std::string &amp;topicName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TemporaryQueue *</type>
      <name>createTemporaryQueue</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aef31f21e3c739eb909a3049f9da02c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TemporaryTopic *</type>
      <name>createTemporaryTopic</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ac6a935679dce102f2e4bf7fe9827057a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>createMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a0ca5bb3e96f11bddb8519f5f056b9101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::BytesMessage *</type>
      <name>createBytesMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>acabfde5f359c6f2de44f360e9c41fc2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::BytesMessage *</type>
      <name>createBytesMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ae862a52925c22ee51a2a7aae86c20627</anchor>
      <arglist>(const unsigned char *bytes, int bytesSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::StreamMessage *</type>
      <name>createStreamMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a8d7e005cbf5b89c9cc5e4e70f3849d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TextMessage *</type>
      <name>createTextMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a2b84b58360420d04c4febad59a9d943e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TextMessage *</type>
      <name>createTextMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aad5fc4f9bcd76b0661b1cb66f23cbdcf</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MapMessage *</type>
      <name>createMapMessage</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>ad47c23e536562deea0a7d62f92f71a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session::AcknowledgeMode</type>
      <name>getAcknowledgeMode</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a1072e510b7c83fc8f920991d7fc88489</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransacted</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>aa97d0c1b9060c48ac76694207c263a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_pooled_session.html</anchorfile>
      <anchor>a9822fed18a05f583e5637b546165aaaa</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::ProducerCallback</name>
    <filename>classactivemq_1_1cmsutil_1_1_producer_callback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerCallback</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_producer_callback.html</anchorfile>
      <anchor>aaca55451cf736507ee44b29a89f3ff81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>doInCms</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_producer_callback.html</anchorfile>
      <anchor>a74b5592f3b96251f35064b3ba08f1b0a</anchor>
      <arglist>(cms::Session *session, cms::MessageProducer *producer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::ResourceLifecycleManager</name>
    <filename>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceLifecycleManager</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a715488bcccd2f1a0ab49dc61565cfbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResourceLifecycleManager</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>ae8bc56ff9b8958d5934a7c801a6de770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConnection</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a451b5d6ac0e22d99a48303b05738b3e2</anchor>
      <arglist>(cms::Connection *connection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a1545b66165631d959aa8692782ad3b7a</anchor>
      <arglist>(cms::Session *session)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDestination</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a1bdcd102f0d7e0a10c09ef548cdce725</anchor>
      <arglist>(cms::Destination *dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMessageProducer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>ae39c8e844bce42c372cc6287684b8117</anchor>
      <arglist>(cms::MessageProducer *producer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMessageConsumer</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a297f888e9aa1b11ec0ad7f18c4dc335d</anchor>
      <arglist>(cms::MessageConsumer *consumer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a833b8ec62f3dbf43b74222bf97920e74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseAll</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a3d69745a247af66d2aabde75de0d0bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResourceLifecycleManager</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a33bbda4ed1ee5b9ca18d46dff3f683de</anchor>
      <arglist>(const ResourceLifecycleManager &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ResourceLifecycleManager &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a6e4e2436e3f076e4204bdb3bf1708fb9</anchor>
      <arglist>(const ResourceLifecycleManager &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::SessionCallback</name>
    <filename>classactivemq_1_1cmsutil_1_1_session_callback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionCallback</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_callback.html</anchorfile>
      <anchor>ad578d470c11cb174370e090c421a0623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>doInCms</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_callback.html</anchorfile>
      <anchor>a021e64009a74dead838b2b7b2cd7a6ce</anchor>
      <arglist>(cms::Session *session)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::cmsutil::SessionPool</name>
    <filename>classactivemq_1_1cmsutil_1_1_session_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>SessionPool</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_pool.html</anchorfile>
      <anchor>adffa7b3d0e149a84cd7dc3e7183a7837</anchor>
      <arglist>(cms::Connection *connection, cms::Session::AcknowledgeMode ackMode, ResourceLifecycleManager *resourceLifecycleManager)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionPool</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_pool.html</anchorfile>
      <anchor>a4f34e0f63e61112a476614c761f36f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PooledSession *</type>
      <name>takeSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_pool.html</anchorfile>
      <anchor>a95f7accd1a89b63d2652b585417a88a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>returnSession</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_pool.html</anchorfile>
      <anchor>aae1ac4618c55ad94b834a459261b3ebb</anchor>
      <arglist>(PooledSession *session)</arglist>
    </member>
    <member kind="function">
      <type>ResourceLifecycleManager *</type>
      <name>getResourceLifecycleManager</name>
      <anchorfile>classactivemq_1_1cmsutil_1_1_session_pool.html</anchorfile>
      <anchor>ad81659dd27570a75690541acd1e5b0b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::commands</name>
    <filename>namespaceactivemq_1_1commands.html</filename>
    <class kind="class">activemq::commands::ActiveMQBlobMessage</class>
    <class kind="class">activemq::commands::ActiveMQBytesMessage</class>
    <class kind="class">activemq::commands::ActiveMQDestination</class>
    <class kind="class">activemq::commands::ActiveMQMapMessage</class>
    <class kind="class">activemq::commands::ActiveMQMessage</class>
    <class kind="class">activemq::commands::ActiveMQMessageTemplate</class>
    <class kind="class">activemq::commands::ActiveMQObjectMessage</class>
    <class kind="class">activemq::commands::ActiveMQQueue</class>
    <class kind="class">activemq::commands::ActiveMQStreamMessage</class>
    <class kind="class">activemq::commands::ActiveMQTempDestination</class>
    <class kind="class">activemq::commands::ActiveMQTempQueue</class>
    <class kind="class">activemq::commands::ActiveMQTempTopic</class>
    <class kind="class">activemq::commands::ActiveMQTextMessage</class>
    <class kind="class">activemq::commands::ActiveMQTopic</class>
    <class kind="class">activemq::commands::BaseCommand</class>
    <class kind="class">activemq::commands::BaseDataStructure</class>
    <class kind="class">activemq::commands::BooleanExpression</class>
    <class kind="class">activemq::commands::BrokerError</class>
    <class kind="class">activemq::commands::BrokerId</class>
    <class kind="class">activemq::commands::BrokerInfo</class>
    <class kind="class">activemq::commands::Command</class>
    <class kind="class">activemq::commands::ConnectionControl</class>
    <class kind="class">activemq::commands::ConnectionError</class>
    <class kind="class">activemq::commands::ConnectionId</class>
    <class kind="class">activemq::commands::ConnectionInfo</class>
    <class kind="class">activemq::commands::ConsumerControl</class>
    <class kind="class">activemq::commands::ConsumerId</class>
    <class kind="class">activemq::commands::ConsumerInfo</class>
    <class kind="class">activemq::commands::ControlCommand</class>
    <class kind="class">activemq::commands::DataArrayResponse</class>
    <class kind="class">activemq::commands::DataResponse</class>
    <class kind="class">activemq::commands::DataStructure</class>
    <class kind="class">activemq::commands::DestinationInfo</class>
    <class kind="class">activemq::commands::DiscoveryEvent</class>
    <class kind="class">activemq::commands::ExceptionResponse</class>
    <class kind="class">activemq::commands::FlushCommand</class>
    <class kind="class">activemq::commands::IntegerResponse</class>
    <class kind="class">activemq::commands::JournalQueueAck</class>
    <class kind="class">activemq::commands::JournalTopicAck</class>
    <class kind="class">activemq::commands::JournalTrace</class>
    <class kind="class">activemq::commands::JournalTransaction</class>
    <class kind="class">activemq::commands::KeepAliveInfo</class>
    <class kind="class">activemq::commands::LastPartialCommand</class>
    <class kind="class">activemq::commands::LocalTransactionId</class>
    <class kind="class">activemq::commands::Message</class>
    <class kind="class">activemq::commands::MessageAck</class>
    <class kind="class">activemq::commands::MessageDispatch</class>
    <class kind="class">activemq::commands::MessageDispatchNotification</class>
    <class kind="class">activemq::commands::MessageId</class>
    <class kind="class">activemq::commands::MessagePull</class>
    <class kind="class">activemq::commands::NetworkBridgeFilter</class>
    <class kind="class">activemq::commands::PartialCommand</class>
    <class kind="class">activemq::commands::ProducerAck</class>
    <class kind="class">activemq::commands::ProducerId</class>
    <class kind="class">activemq::commands::ProducerInfo</class>
    <class kind="class">activemq::commands::RemoveInfo</class>
    <class kind="class">activemq::commands::RemoveSubscriptionInfo</class>
    <class kind="class">activemq::commands::ReplayCommand</class>
    <class kind="class">activemq::commands::Response</class>
    <class kind="class">activemq::commands::SessionId</class>
    <class kind="class">activemq::commands::SessionInfo</class>
    <class kind="class">activemq::commands::ShutdownInfo</class>
    <class kind="class">activemq::commands::SubscriptionInfo</class>
    <class kind="class">activemq::commands::TransactionId</class>
    <class kind="class">activemq::commands::TransactionInfo</class>
    <class kind="class">activemq::commands::WireFormatInfo</class>
    <class kind="class">activemq::commands::XATransactionId</class>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQBlobMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::Message &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQBlobMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>aa584e0cb1077dc2a9afa3033ce3c7c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQBlobMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>ab7f6fae249f54e2d3830e9a7c7d79aed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>aa46cc84067d03bfd4d74ecfaa91f8a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQBlobMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a6209e194e48d7a15c53e73ac75537219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a02f8411293b3c08bb66767300afe76d9</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a1aeeaae60908b7dfcf66353879516616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a808d446471abb7bd60aef3dc984f198e</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>aced0960d105fc9dd6db7df0d03d45829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRemoteBlobUrl</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>ae620deb34c9a99077910047cfd310ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRemoteBlobUrl</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a74cc655e601bcdc3f2b1828a0990e92a</anchor>
      <arglist>(const std::string &amp;remoteURL)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMimeType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a5e02a21ddd33b8981335fb8173dc73b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMimeType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a9ee3fcddcfd681ae6287764a107b95ad</anchor>
      <arglist>(const std::string &amp;mimeType)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a7e4d5a10ef45caba8a713fc9c34d5477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>ab9d1810c290abc4784e92a4a5f503edb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDeletedByBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a0e3002cce2318d55284c2a052709d280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeletedByBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>ab811eb0d923ec6eb3c17457687175b99</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQBLOBMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a963d18c21eb22e95596a41523ab612b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>BINARY_MIME_TYPE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_blob_message.html</anchorfile>
      <anchor>a11a44696cef10db141d4f0606c468460</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQBytesMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::BytesMessage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQBytesMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a813eff663b1b823630bcd54e57f46da5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQBytesMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a6cde8b6189b686733407e8f62ec23da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a680329fdca1ceb4143cd09e49fba9aa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQBytesMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a15d928b26ff07b4a370e3913c10d141a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>ad2fad5b3f69833dae163d3d916567eab</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a78f17ec1487b8d449c89fc28ff61a771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>aabb8040c0ade6de81138affd426d643e</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::BytesMessage *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a363cdbc42a09b7b79b75eec37a742e53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>abc8927a067f20777981fb428d9fb6b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onSend</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a2fd51075ea172efdbc8d12db42cef18a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBodyBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a36c15eddae53b5dc191b6ae64c189945</anchor>
      <arglist>(const unsigned char *buffer, int numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getBodyBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a79097400fe1d1fa444f5bf4684823664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBodyLength</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>aaf62959f87724402deb1568f1afdbe51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a2b3d67cc55b2a4652e976d959a06f36f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readBoolean</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>ad224007fcf5f8c0b3b643babd8a4b6f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBoolean</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a905fa268d3bee2f98be3c087d12a2446</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>readByte</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a408da0f3b7bece72e0822f7c0906a9ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a92dd29c2da6114ab02bf3e33176140ce</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a8959c12a1f767513981a5ddfbdd116c6</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a108d1a8ddf8f7212f5d173405ad9166c</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a298e3ede26ad5afeb93de9c338ff2d21</anchor>
      <arglist>(unsigned char *buffer, int length) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a41c936676371ec698ea47eb2da20c666</anchor>
      <arglist>(const unsigned char *value, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>readChar</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a14c7d15a1e4b8b4b434e568b981ea620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeChar</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a3ac25b75ff50e0644a5ddad2ac6cd8e0</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a5badfe02d2dc4d82403cf3b64e47c8f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a3372e6092e152f3f3f1dacc1acf3f909</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a94cca1bd11acf48bdd0c227cfcd181ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a89134736d0a0731c4c897e08ddacb0eb</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a55923128c176629661fd9c2f799e9c92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a898546e5c28eeb9b62438abbd7a4e856</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>readUnsignedShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a566a19bd170063df85a1d4935b322259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a4325640cf94415e1f429d883a045dae1</anchor>
      <arglist>(unsigned short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a687cf6b90d276c3cdb31818c54740541</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a9c49940a1306d21270e04fc7c849af69</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>readLong</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>aa8a5705a3f8b53b81c653def954129eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLong</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>aaa9678c26862e4cba8d99f8f43f3e406</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a282726ea0177f63dbd9cf0b7db51e58c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>ab0eb6827028366b8a73235130e3b8255</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readUTF</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a8456428a6d17c1582677379d43cbec44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeUTF</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>aa8d808a210c3f871d971d56e802bb204</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQBYTESMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_bytes_message.html</anchorfile>
      <anchor>a0f4c1339d2ab20c68d5a786d0923ecba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQDestination</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_destination.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <class kind="struct">activemq::commands::ActiveMQDestination::DestinationFilter</class>
    <member kind="function">
      <type></type>
      <name>ActiveMQDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a8d793b80c74e7200fa10dfe5fe27a7eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a486ae35c0213ded4b9d4aa98fdbe26a0</anchor>
      <arglist>(const std::string &amp;physicalName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a73e42386c0a292faca9ea87ebcf67c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQDestination *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ab3c51d3dbc3dd8f4e5125b0de19e44ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>af56147d276237bea6e5ce4b71a8e1609</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a681281f9ef64b9de55c17ecfa07da67d</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a8af670f56b02303ccb84b552ef42d42e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a80faa263b79180cdfb7cef3d25cb74b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getPhysicalName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a24ec49aa6d006ce74679225c29f54aa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getPhysicalName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ada0b2fa880f0ca9473e55b6891e2bda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicalName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a0edb38a69dda7fa1319f5c97e3c79042</anchor>
      <arglist>(const std::string &amp;physicalName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAdvisory</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a09cb635eec8c3904fca06dfdb9193014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdvisory</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a7f5fa5ed26326f9d210cb7b42da859d5</anchor>
      <arglist>(bool advisory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsumerAdvisory</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a35d7533d016c1dac96d50d902048621a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isProducerAdvisory</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aaa15551d5db5ff8d880f351e1362b0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnectionAdvisory</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aedc388ef2f89b009dc776125b4bdeaf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExclusive</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a7d917bedf6d28b45bd8e2c3234726cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExclusive</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ac486cd66c774aecc961d125831c3a243</anchor>
      <arglist>(bool exclusive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOrdered</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aa60634980f28fd697864926e7ad8ce14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrdered</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>afb9751740b6117280aadb4c094900ac0</anchor>
      <arglist>(bool ordered)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getOrderedTarget</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a61c4f47b161ee33785626acbd00ef5e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrderedTarget</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>af9455be01f234aa03b23e3d56d6092a7</anchor>
      <arglist>(const std::string &amp;orderedTarget)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Destination::DestinationType</type>
      <name>getDestinationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ae8c530b80a9f5ed03bd11a48009e78fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTemporary</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a7162807c4b5192e31ffae29c176b2270</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a0a8d3646d56e78bcf633ce48ca99f72c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a1ce673beb97630379954bbc5380d207a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComposite</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a1b5904d5870b75d60cda94970da2d094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWildcard</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a6cac5c13623ea908002910d1cdd2e7dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const activemq::util::ActiveMQProperties &amp;</type>
      <name>getOptions</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>af2b13d665bbd9ac8d7bbc31034d20d3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a7ea96c83053d703426893fb8fdd51622</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>createTemporaryName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a3b88b22154741c92744b78edeb783401</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ab12ccd7c73c6a75b98c3df17fbd6516a</anchor>
      <arglist>(const ActiveMQDestination *destination)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer&lt; ActiveMQDestination &gt;</type>
      <name>createDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a5a62d9659691fa4af1c738d4ffd2d019</anchor>
      <arglist>(int type, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQDESTINATION</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aabd066ecb2c903cb61ebb5405c3509c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>exclusive</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a75296292f338b5e332a4275d8cd9ade2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ordered</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a07293a39347e4b924db0eda9e165a2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>advisory</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a31b4a7d9b168af1931877378229c57db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>orderedTarget</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a667e65c08f42c4639cadc49ef9338f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>physicalName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aa7ef55b9538241ffd5623ced49f3f0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>util::ActiveMQProperties</type>
      <name>options</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a3e40cce826dd605df5d38bde4080830b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>ADVISORY_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a6a9ab53c76ca93b998703161ca122b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>CONSUMER_ADVISORY_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aa63e706a3f2920d78045167aad8779c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>PRODUCER_ADVISORY_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>adfba95c2be41bf6c4ced360a158df8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>CONNECTION_ADVISORY_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a67fbc297d443c5cb443155a57e57f65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_ORDERED_TARGET</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a1ce8ca0daf2ad581c478bf8035f7a053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>TEMP_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ae9eb08c185bd847412cf544a4b7d4b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>TEMP_POSTFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>ae7ee44ab0cc80e3b299f1ef5a47ba36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>COMPOSITE_SEPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a49392f6ef4b8ef13988a64a4018acb32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>QUEUE_QUALIFIED_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>aa848f1daa7fc3f1f3d417d1d77093f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>TOPIC_QUALIFIED_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a99ce97ac726ee8d32aa23a914e3ac25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>TEMP_QUEUE_QUALIFED_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>a807b1fe9e41bf445c5cbde49c1f3d3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>TEMP_TOPIC_QUALIFED_PREFIX</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_destination.html</anchorfile>
      <anchor>af6555d00663eca32e5bf770f58557e1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>activemq::commands::ActiveMQDestination::DestinationFilter</name>
    <filename>structactivemq_1_1commands_1_1_active_m_q_destination_1_1_destination_filter.html</filename>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ANY_CHILD</name>
      <anchorfile>structactivemq_1_1commands_1_1_active_m_q_destination_1_1_destination_filter.html</anchorfile>
      <anchor>a077d9aa9f8f7e6726287a459e4c6588d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ANY_DESCENDENT</name>
      <anchorfile>structactivemq_1_1commands_1_1_active_m_q_destination_1_1_destination_filter.html</anchorfile>
      <anchor>ae6e3eb2b6de816ad17142af30fc00cb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQMapMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_map_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::MapMessage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQMapMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a78145cd999b756e46b0d68ddfcbbbe21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQMapMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a518394c251dd1b81322909a0bba482e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a0d8228a65a46d8adab9ecf1843e667fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMarshalAware</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a4d7b0ecb914d669b2ce1788d253f2a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQMapMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a2340a28ed0c54610aeb24fa4c66caf0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>ad4acd6aba8e679e42e83bfbaeea74316</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeMarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a345a7a06c9a132879cd78bd8e84c9875</anchor>
      <arglist>(wireformat::WireFormat *wireFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a18a3e77186f7097d4bea5213869c9c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>af232335b516d27628d23b08cdb41cb60</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>ae0325445e6bba2899a6ddb22aa1830cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MapMessage *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>aca00b9e7bf393b09ad3c5d60fb1100f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a5f647a4efcf1d7833150425a723fd75b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getMapNames</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a1ddee952e29e207391b291d0c7bcdcc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>itemExists</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a25feccc4a9460e55cb99f2f385ca61e6</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolean</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a36494b0e7f4d487d2876eb2bd0ae5f43</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolean</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>aa834ed5febba905ec123269eaf171732</anchor>
      <arglist>(const std::string &amp;name, bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getByte</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>ae1da4701998c4fb25b6b17c8218fd92c</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByte</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a42cd16a8c1a3fefbc9f87ead778cbd20</anchor>
      <arglist>(const std::string &amp;name, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>getBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>ac42f4b60277f8325e6df9d90758ac56b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a6a5a5c8c82af62d6cdf2f752081a550f</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a2712df7894397018d535fe273fc38b3a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChar</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a049fe8b5d04125c202429179494238b4</anchor>
      <arglist>(const std::string &amp;name, char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a05a24d3a582b250853171f2f625bdbf6</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDouble</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a77cddb9df34cf25850061522b1cc9853</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a4774a94fb3f864bc38793e96ceae5d36</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFloat</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a66b4bf8f7b17fca68f56e8d2051d8550</anchor>
      <arglist>(const std::string &amp;name, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a1abebde6fb1c0ae0d4834085d23b6309</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInt</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>ae7ed90cb46fc6ffc9ba321cd324f26ec</anchor>
      <arglist>(const std::string &amp;name, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a9ba10c1d3c8fbc6dfcf5263e40efdf19</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLong</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a668b5440055021c8e837572906934ac4</anchor>
      <arglist>(const std::string &amp;name, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a2611c8036e6d9555af79d7947586e730</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a87d1af87094d066dd2690ad3b22ddb74</anchor>
      <arglist>(const std::string &amp;name, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a8e8fdbbd180b3f6b43ee13baf9d5c61c</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>aac78e254cc4f6e671cd39ab2b2c79a8c</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQMAPMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>add24be4c699aa8fccde75833d14695c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>util::PrimitiveMap &amp;</type>
      <name>getMap</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>aedf9d809be7c183271876dc27dfa56de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const util::PrimitiveMap &amp;</type>
      <name>getMap</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a234ab9f1897e252f0b22d6f34ce15d41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkMapIsUnmarshalled</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_map_message.html</anchorfile>
      <anchor>a05da14d93e81da5a28138d784d0274ca</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::Message &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>adf526a14666d4ccb5898fdf310ea2aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>aaede4755a345d02cc55ca282b9d8a971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>a976752f2fec3d630acbae59eeea079b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>ae74895e81234837bf231057f104dbf11</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>a7b9695e590edfad9cca1513674e5dd5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>aea477f1da0e9469b07e2684a8552bf86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>a2f4e10e9fdfd5a9db7a3249675e59374</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>a2c32942914dc88a040ad743599d7799e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message.html</anchorfile>
      <anchor>a100f93d43fa9b4a5af86e6b9d39a6afc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQMessageTemplate</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_message_template.html</filename>
    <templarg>T</templarg>
    <base>activemq::commands::Message</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQMessageTemplate</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ae9a2759f93b11cf0a5fc436f0e691fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQMessageTemplate</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ad49dd15ea42419a4db2e7aace6ad1637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>acknowledge</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>af4e6ec882854a9a804aa8724209eb353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onSend</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>abbf0822ad02747f84e1900bb44b63dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a9af95f8fe95b78e713fe3fe9417e16f6</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a9d688207aef14f4ae8d0faf5d63f1a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a85b40b4900045f69ab5c87df0b7a5dee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getPropertyNames</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a1ffcc915b7cf4977dfe96dcca9c14943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>propertyExists</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a2ada3f28de8d4170dfb7ff85a09b65a2</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBooleanProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ad227a60dbe541f747add16c7defdae1f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getByteProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a2a43f9317574c3b35c15aba5b7d9645b</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a21caf9af11d8f52616703e4b51508a7c</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a1ee3dd3c3de60c09be53556675e30aff</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a671cbc21506af8469592abca7ce7bd7e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLongProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>af1ef479ef5dc0fcd52d7aef9fea4172e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShortProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a304a010cf63924d96e6de53fd1d3aee6</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStringProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a42aeeb92705a4cd6cf6a7ad31e449d37</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBooleanProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a5dd0346d9459cca6986231e320b96e75</anchor>
      <arglist>(const std::string &amp;name, bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ae959a53dc7fe844b3f79a2ee353f0a81</anchor>
      <arglist>(const std::string &amp;name, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ad74a6549bc7a3c34ac1ef3e42038c1ec</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFloatProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a3a0de3b2c09b7e0d1db729d59a41d044</anchor>
      <arglist>(const std::string &amp;name, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a493b5f6cb71701dbd502c8651093ae44</anchor>
      <arglist>(const std::string &amp;name, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a11aa8ac93048aae3f1dcd70de1bdfacf</anchor>
      <arglist>(const std::string &amp;name, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setShortProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>af3c1f8e6bcab0e0e031f1b499f5c169a</anchor>
      <arglist>(const std::string &amp;name, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringProperty</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a78ba278f1c138683dd8f5beb38e35692</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCMSCorrelationID</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a9b3aad52c3f0489e5aecea591011880e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSCorrelationID</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a33a3b00fd232d36edf42a4f873dea103</anchor>
      <arglist>(const std::string &amp;correlationId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCMSDeliveryMode</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a5f1aad6c7d00c1eefed098dc03687d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSDeliveryMode</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a42d4c6584b851ce55593a202a98785c8</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a8790f702908db582b098e3c2ce908550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a2f1bc58a057e817ff4faf4812e93514f</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getCMSExpiration</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>adb45a4c711eefad6ec875bf7aa74acb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSExpiration</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>afc5c5070f4cc88e5833e84411b1bc25b</anchor>
      <arglist>(long long expireTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCMSMessageID</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ae05d57a367ea399bd3fb0af098581b31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSMessageID</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a752416354638843a548429ab4960d90a</anchor>
      <arglist>(const std::string &amp;id AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCMSPriority</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>aa5eabff729f37b4086335164d21eccfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSPriority</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>aefb48299fb17f39456de3f0605648997</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCMSRedelivered</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a785e4861ddfa2d68ab33542a8cd73cb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSRedelivered</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a13d555fbdca8375485b49f94db11e648</anchor>
      <arglist>(bool redelivered AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSReplyTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ac577c61819a4aabc93cddee28a126428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSReplyTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ab245b84970047deef62da34f09318ba0</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getCMSTimestamp</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a1ab46a6848530223c84a79aa34f5b173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSTimestamp</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a18b91c3dd62783b09e451433f1a0c3ef</anchor>
      <arglist>(long long timeStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCMSType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a25e24e69c85952b88990235ec50fd3c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCMSType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ad8ca40e51ff6bd9dfc7c4974b9270670</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failIfWriteOnlyBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>aaa5d185672b4ee46a0271b46cf6252d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failIfReadOnlyBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>a45abe57ffdd9c48caea36c8160a72d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failIfReadOnlyProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_message_template.html</anchorfile>
      <anchor>ac4b81a02ba75408ee147174da45cc9ff</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQObjectMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_object_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::ObjectMessage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQObjectMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>af801ca37f5a7bdaff9b8f99f799a23da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQObjectMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>a60617fc96c70ff30403632cc3eab59fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>ac7ad7738a1f371dea8ff235bbb67cdb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQObjectMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>a145b188017a5c6b7d0b478a08f9b75ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>a10b9c0f705b508cc11c8b103f28e876e</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>ae88e4dbf2c8d8b7900148544e15e8428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>aba80af1a85140d50f1a902fac9273e59</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>aef52115bc2aadfc7305e344e9ccec876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQOBJECTMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_object_message.html</anchorfile>
      <anchor>a2bbfc1ae2f57079596d354ecc75e86c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQQueue</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_queue.html</filename>
    <base>activemq::commands::ActiveMQDestination</base>
    <base>cms::Queue</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a20dac1277dc2ed906ce395fe7a92685c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a1502a79365de8ea6df8a46cff80695ae</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a670620197113ac445d23f24b4194f7dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>abdf087e2c16d869024587872548a44dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQQueue *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a1612413c7bae9c7aa8cb75f1df945bae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a2ad11e523d6a8be3870ef8a6fd6813f4</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a450c05f97889eb25f77cd05861ed9367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a95ce623632c7f99729d82d266084ae88</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>adce8217aa042926621dc5e32391cba03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination::DestinationType</type>
      <name>getDestinationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>ac494a34512983a7593f3d2f891c38c16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a717ec94b5f4493c6636c3874fb55fdd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a0aacf2bdbde9321ce000137ac2d586da</anchor>
      <arglist>(const cms::Destination &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::CMSProperties &amp;</type>
      <name>getCMSProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a577b382ce9d9764f4939b7b57f6bcf81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>aa58a5536167407cf1384157d20ce6619</anchor>
      <arglist>(const cms::Destination &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getQueueName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>af7c72e237bc6ec50cae8def3550aa1fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQQUEUE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_queue.html</anchorfile>
      <anchor>a7ad72d05db2fd7decb7e4fd864323ec8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQStreamMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::StreamMessage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQStreamMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>ac0bdfbcb4286965ce88c52a3e624af01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQStreamMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a53da5aa57cb81f5cd14f7ba61925d981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>af55db739c3824cabed97642cba64ed90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQStreamMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a9335b11fbca0be712522d2f2616d477e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a923d4d146fd992ddb9024d9a26d66587</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>aba18bc9abc9ad891fdff459da9d3fe46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a80aea82a333b0e97a1d86a17cba49e1e</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onSend</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>abdb114dd46c3982cbb19d44fcc81d12e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::StreamMessage *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a16c76d2eb746e43a32ecf3437f84ad19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a0b7eae76ec2f7745e830c4ded689c04a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>ac864090f851b96242e111ac6ba879506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readBoolean</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a0cc4c8fe78a1583657799e266db8414f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBoolean</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>afffae736460bf8bbc7502456b605e815</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>readByte</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a8b11f51e9fdd626b4997ce3a0ebdf680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>ae54629454fd7629534a6b8dfa88ca1e5</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>aacaa15b92a8732be3e4b06d96ad99dde</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>afe11f88de062f7eb41dd0c0ef35569c9</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>adb5cf58a05a33869d823bbed11e45ff0</anchor>
      <arglist>(unsigned char *buffer, int length) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a1f6e953d72090328565da778cb1ce018</anchor>
      <arglist>(const unsigned char *value, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>readChar</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a65eac63392814ab8a584081d55455652</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeChar</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a8bef46e2dba61efe860b581cc287b224</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>ac1a696a0c94d1ab3ad718f6f470e581d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a3c25bfe6484075662ba84d224df806d6</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a705d75e5df991e205d9ae89594dfaa2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a23e39c08f4442abd5f8064eab02a44be</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>af51f647ae44cc72e0886f84a3626ab8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>ad52bad0c3f516b3d1a5ef8ffba9a5cd7</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>readUnsignedShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>ac9e7a06cb124696f48a63053b0c97d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a4f50d1c4a86aa68b2a48c0f3c2571a16</anchor>
      <arglist>(unsigned short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>afb85cc5d2ff9da51c7c0605e6f2995d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a463156cc1476df09d6fcb454f1cab376</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>readLong</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>aaa2a07a5bf18a07e5a9d77e5a69766ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLong</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a0e9604f3328340ef3a005e06dc7ce0c9</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a12435bdc49eb98b66e7008e030076d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a99b05a5c2e93218bb715cf7b29028b6b</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQSTREAMMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_stream_message.html</anchorfile>
      <anchor>a1e41eceb28191b05aa472149cc78afdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQTempDestination</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</filename>
    <base>activemq::commands::ActiveMQDestination</base>
    <base>cms::Closeable</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a5db1763f18dbec59aed515a60cabe2d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a586530aeb8dc5b29c883fbf0dd647f53</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTempDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>ae4d7c6003378c73522fc9008062202e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a681104ce32eadaf136750d1fc3820c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQTempDestination *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>aece2787e388a86f71ead5dcc9f1eee15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a255a6dd5c941e9b3b394f7959b226140</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a112daa3bed6c332002a01bd32f5caeae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a2585a5dbe6aca1aa1ae40aa8a5597f4a</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a2ac18148779f406c715037047db0bd95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a68be57688bcdd73e950c4c335004ff05</anchor>
      <arglist>(core::ActiveMQConnection *connection)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQTEMPDESTINATION</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a0fd55e2b7231a62dd85cb912036438d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>core::ActiveMQConnection *</type>
      <name>connection</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_destination.html</anchorfile>
      <anchor>a71442bcd1e027fcd5dace9b81b0eeb3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQTempQueue</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</filename>
    <base>activemq::commands::ActiveMQTempDestination</base>
    <base>cms::TemporaryQueue</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a3ebf018763aee625871769cf969b1819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a13acfd813ede93f8b3259a30d18cf649</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTempQueue</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a40a95eb9c438b8b955b4ffede812c407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>acde06a7f4b1714c5aee3da46a8199c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQTempQueue *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a458c96b9f69909f6e4a5ced0cded9597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a17a52ed1a7920eb32ec97b3adcf7296a</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>aeef043e1e25af7ca1d246f14cab3a147</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a54ef098b932f5face4691cd0ed0ffa49</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>adf39cb89fac411625032cde01fabec24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination::DestinationType</type>
      <name>getDestinationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a9707cbbc697d7369f4aec051b3731014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>ae2d3ed41c1c05446c977a6395f590215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a4e1f91b643b996521d8522ca626af900</anchor>
      <arglist>(const cms::Destination &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::CMSProperties &amp;</type>
      <name>getCMSProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a2d6896a8707308acd4196a47c62d6ffc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a7a502058a38ce74a588d885b668e4357</anchor>
      <arglist>(const cms::Destination &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getQueueName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a0fc58f6b2b8819e6bfaff589cd3369f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>ae56f842509ff10181a48bfa874c3dad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQTEMPQUEUE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_queue.html</anchorfile>
      <anchor>a4cd569e26a1584b79d8eaa8ecf52ab42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQTempTopic</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</filename>
    <base>activemq::commands::ActiveMQTempDestination</base>
    <base>cms::TemporaryTopic</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>af20ed1053ce5e65dae9ac64e95c58dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a3172418cf46ad2616cf1bf9f51c0b55d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTempTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a8c918f811303b004351dfa105089020e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>adafd55b0feadf4b9f7ecf25ffc0b7cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQTempTopic *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>af34f382733ddbb7489fb8660949f1793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>aed24ec8e139be85d05ac0c6187b4fc86</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>aa838f2d74d02d7d53bfc06e1c2eef2fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a7192263b5874a5124e116e1a9a594d6d</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>adb17180a332be920773d63945f6fe56b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination::DestinationType</type>
      <name>getDestinationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a1e3a339e6f680bfc115f56bdd206fded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>aeb7ff7e0db9c67fb937adba611280ab2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>ac090c7bd963e91cbbdd466ba77f47e55</anchor>
      <arglist>(const cms::Destination &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::CMSProperties &amp;</type>
      <name>getCMSProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>acb268cad206101b88388b24d26bef808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a12a9166b1544ef0b0934987771ab85b3</anchor>
      <arglist>(const cms::Destination &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTopicName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a5cb185c8921e0c25f530168a247853b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a3a1cbf1e508d8e43583f10fcf71a708b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQTEMPTOPIC</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_temp_topic.html</anchorfile>
      <anchor>a1474681cba0d6a4e706ab1b2b30f6976</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQTextMessage</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_text_message.html</filename>
    <base>ActiveMQMessageTemplate&lt; cms::TextMessage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTextMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a163e31556581dacc5b86c88dbe2ce913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTextMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a08061fae6d4bcd05eb7d7232df8cd144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a8f533cb5af7adcf03a4901c12fb88812</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQTextMessage *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>ae6f8f4ce148d23f6d8b6346a3a844693</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>adfdf0b0877ea171abb2620fb47e1075d</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a011e1b77ae474c1d11dfe96abfb04a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a75ae04e20a3724f15bb8ca9a1adb7780</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a89fc95682153afdb5331afe7fcc7bc22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeMarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a4daeb907720003498828ded3b650317f</anchor>
      <arglist>(wireformat::WireFormat *wireFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>ae6c26776ade8351e6a1dfb3b47c2877e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TextMessage *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a9b80dc77bbabb2c425d0c79885917517</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getText</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a4742c8b666bd33c89051feb3ea3491e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a955ea56d1c6cd3c22d6bf94442104c50</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>adc02d45d5ac8fde88f9e6f5250827516</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="variable">
      <type>std::auto_ptr&lt; std::string &gt;</type>
      <name>text</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>a2551b99ee9e89bf2d2a9f8079cf4009e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQTEXTMESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_text_message.html</anchorfile>
      <anchor>aa75cabd88bc93249e0cbf8f2fcf6db0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ActiveMQTopic</name>
    <filename>classactivemq_1_1commands_1_1_active_m_q_topic.html</filename>
    <base>activemq::commands::ActiveMQDestination</base>
    <base>cms::Topic</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a9b56736d8caf6b6a0f00bf424c9a84e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>aa29b7e76db83367f54d6fbd14d3f0358</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTopic</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>ac48b08169fb9259050c5d0b290d97b7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>af5ebe9e10d93b6a73d66120398cc8f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQTopic *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a8623e2d158a694574c88f8a53c156a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a078e350a8bfdfe6fc36dd582d50dfedd</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a6b4257ce028fc35cc0e570bc88d710e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>ad2795ff220d00a4f272677803808a74d</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a3aefc16684e224060797779f908a42f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination::DestinationType</type>
      <name>getDestinationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a3560800c04e64a14e96eaca8fbe9b6ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Destination *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a737f4aa6673f647c7db4bd662bae24c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>aec661d11ad03b34e06194b40e2afb08c</anchor>
      <arglist>(const cms::Destination &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::CMSProperties &amp;</type>
      <name>getCMSProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a5284fd1ab0e9bb56a6cfc11acf856b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a8a6ddaecbe2689c14b06d714103d936c</anchor>
      <arglist>(const cms::Destination &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTopicName</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a15c4f48660a6ffb6a0d31674300b4992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_ACTIVEMQTOPIC</name>
      <anchorfile>classactivemq_1_1commands_1_1_active_m_q_topic.html</anchorfile>
      <anchor>a00c2fcaa9eab600370b04a5b70071624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::BaseCommand</name>
    <filename>classactivemq_1_1commands_1_1_base_command.html</filename>
    <base>activemq::commands::Command</base>
    <member kind="function">
      <type></type>
      <name>BaseCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a8fe66c76f4cae5580d8f94bdbc4006d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a2bb5716533e56ecb15897de74540480d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a6f4a82f4088f07446dd6e4beae6967da</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a75a455b8cfee0219205f8b4ddd6f3fcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponseRequired</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a9be9965cf86e6a22442d701eae75da86</anchor>
      <arglist>(const bool required)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isResponseRequired</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ae3cbfa53868585ee77386c0bb88a30ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>af90ce7c13f771c71123ca6fc2468c7bd</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ad5dfa2a9f0e7ab2896c3d22b08456484</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ab96dc9deb2b85b6f9d16131a4ca439de</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnectionControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ad28e3aa35770b042389bf61be39b0766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnectionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ab575d49d3556fe5e9156b45469e3b676</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsumerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a9281102c82385b132d70fdfa184a747b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBrokerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a93cb1123da9df6efa07836ba7c0110c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>acf7fcd636802fa3183be6c3d282ee75b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a5e163007ec0016f20fc0daf3a4918664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKeepAliveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a5c710b7cce500c0dbc1d057dbb1a2b77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageDispatch</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>abe0ad528ff07774f9e65065f3fd1fed6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a64c6f053d05634f26beb6da3225ca9a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isProducerAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a2ee57668e221798a6b30abcfd001cbd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isProducerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>aaaa3cfc7895096524055ba827d86deb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a3e97d6a291d351d515e019bd2a4077e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ab7ec4d0085f555969cb4ee50333426dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a14aca1235456abe81fdfdf11c6068ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShutdownInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ae2c1caefd620393a1f558d57c7d28d76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransactionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>ad65856ff47bb9fbeeedca429b3a52ac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWireFormatInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_command.html</anchorfile>
      <anchor>a6e62047f7257a22ce9cf32421bce3684</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::BaseDataStructure</name>
    <filename>classactivemq_1_1commands_1_1_base_data_structure.html</filename>
    <base>activemq::commands::DataStructure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>a5940375bead31ac33cf6aaca1e9f0764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMarshalAware</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>aacefbf57fa8454085bc761a94f0e640a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeMarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>aa18305dd79ab08acb5b6ee80cb98d392</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>afterMarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>ac8f25302cdf0e29f204a1389fd989ccc</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeUnmarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>a14ac698632457039f8ae3ee1e37240e7</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>afterUnmarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>aba555e725b9fb9d8f6d3191585e43789</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMarshaledForm</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>a5b9a81d93694fe8ab16dc840051612b4</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED, const std::vector&lt; char &gt; &amp;data AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>getMarshaledForm</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>a0b2e74f483f7b5dd8d9a37d22d8d2057</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>a46b2ea9917fbc5e5262cb4a7f7305c9a</anchor>
      <arglist>(const DataStructure *src AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>a8c027c8a2f11af962b7ef6d1c5ccbb62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_base_data_structure.html</anchorfile>
      <anchor>af787013ac8b97f872c313696400821e4</anchor>
      <arglist>(const DataStructure *value AMQCPP_UNUSED) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::BooleanExpression</name>
    <filename>classactivemq_1_1commands_1_1_boolean_expression.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>BooleanExpression</name>
      <anchorfile>classactivemq_1_1commands_1_1_boolean_expression.html</anchorfile>
      <anchor>aa43e7d6e8fdcaf74903329353d5e2387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BooleanExpression</name>
      <anchorfile>classactivemq_1_1commands_1_1_boolean_expression.html</anchorfile>
      <anchor>a59ef2da5f946f353ced86d399079f771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataStructure *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_boolean_expression.html</anchorfile>
      <anchor>a6fafbc577ed97de674717a68cb3455c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_boolean_expression.html</anchorfile>
      <anchor>ae8d13e20a8601eb445c87dc7cf2b9157</anchor>
      <arglist>(const DataStructure *src AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_boolean_expression.html</anchorfile>
      <anchor>ad276effd972b3548c8f77c048b2e66e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_boolean_expression.html</anchorfile>
      <anchor>af9640ab5071c7b0f10ccf34eaf8b45a4</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::BrokerError</name>
    <filename>classactivemq_1_1commands_1_1_broker_error.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <class kind="struct">activemq::commands::BrokerError::StackTraceElement</class>
    <member kind="function">
      <type></type>
      <name>BrokerError</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a01fd747541cffe70253c93642502ae9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokerError</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a8a543543d8ab5bb2cd5a6912549049ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a86779cb029b7ae9f1cff15792bbb5861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BrokerError *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>aba628df891742e903283db43491717d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a80edadc5416fecf9ad58f942b8295311</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>aca9d7361d64a762c737c1e5a9b0784a0</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a28c366cde8b2bb035267777fb5f30fa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>aa57dc1dae34b6b3c0e69220a5d56c2ac</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getExceptionClass</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>aa16e18fcceeca9e819ad59135584111b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExceptionClass</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a9e32e5c26812987f44bab1f928e69826</anchor>
      <arglist>(const std::string &amp;exceptionClass)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const decaf::lang::Pointer&lt; BrokerError &gt; &amp;</type>
      <name>getCause</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a704f81a957b5333febf6dcbf75e88d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCause</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>af272f4e50215e2d0dc7f4382bfa1f9e2</anchor>
      <arglist>(const decaf::lang::Pointer&lt; BrokerError &gt; &amp;cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; StackTraceElement &gt; &gt; &amp;</type>
      <name>getStackTraceElements</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a3e3553362b53acf8db0e72fc50f4534e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStackTraceElements</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_error.html</anchorfile>
      <anchor>a2a599e2f0cff890565d45720aa5d1fef</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; StackTraceElement &gt; &gt; &amp;stackTraceElements)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>activemq::commands::BrokerError::StackTraceElement</name>
    <filename>structactivemq_1_1commands_1_1_broker_error_1_1_stack_trace_element.html</filename>
    <member kind="function">
      <type></type>
      <name>StackTraceElement</name>
      <anchorfile>structactivemq_1_1commands_1_1_broker_error_1_1_stack_trace_element.html</anchorfile>
      <anchor>a4214198380e9653196a45f97ece07b91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ClassName</name>
      <anchorfile>structactivemq_1_1commands_1_1_broker_error_1_1_stack_trace_element.html</anchorfile>
      <anchor>a3fad08c826cb90beeff6ef9291d9842b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>FileName</name>
      <anchorfile>structactivemq_1_1commands_1_1_broker_error_1_1_stack_trace_element.html</anchorfile>
      <anchor>af85676537bbe12d42de7c46dccdeed70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>MethodName</name>
      <anchorfile>structactivemq_1_1commands_1_1_broker_error_1_1_stack_trace_element.html</anchorfile>
      <anchor>a16e7668412276bd2da99748587715468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LineNumber</name>
      <anchorfile>structactivemq_1_1commands_1_1_broker_error_1_1_stack_trace_element.html</anchorfile>
      <anchor>abd2d9eb0663f33fa351ea63008e9d059</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::BrokerId</name>
    <filename>classactivemq_1_1commands_1_1_broker_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; BrokerId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; BrokerId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a06bd87ae3f690c50d4b8244f9748e7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a4617cdf34bee30dcdc6d22475813a022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a5dc99e5da2642ae5091164ecef2aa785</anchor>
      <arglist>(const BrokerId &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a51d2d1345a3ea43361fa582a56170876</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a5886639451c1dab5802874fa08b5322f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BrokerId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a96224fb00b19738faf2e1e48d3b9f915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a7e46609b0447a974912f48a153fec07f</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a4cf112aaa28e588ddfc5b9f8e23e64b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a3896e177713ca8e5e8e35f7f18b22754</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>af4a615f82df7539e753b99bcf116f018</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>aa8153b29d8b07e46217f070393638db0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a1ad3e954e09155cb68ba8f922b92f866</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a16163ed30f4cf58cb87fcb482927bd8b</anchor>
      <arglist>(const BrokerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a45ce7b30f7199571c23b4846a21f48a9</anchor>
      <arglist>(const BrokerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>aef530ea87571f39f3b95d16dc188d782</anchor>
      <arglist>(const BrokerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>ae760eab30b80396071b41245f697edd6</anchor>
      <arglist>(const BrokerId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>BrokerId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a16cdf0ac171eed8a6ef24a9ddfaea3d5</anchor>
      <arglist>(const BrokerId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_BROKERID</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>ab89bf626950c42c787cc0167afdc36bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_id.html</anchorfile>
      <anchor>a67f5454e3afd5f545d8ab19b3ee16446</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::BrokerInfo</name>
    <filename>classactivemq_1_1commands_1_1_broker_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>BrokerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ae0f485d9400e9ce86bb9a2256c469d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>adfbee0bc2d09ed34afec55339ea44002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a33d090cc632c9ad7351aab6ce4ea62a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BrokerInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aa4d2e5fa5115430e709990ab1ad14103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>abb4b0f7e42a6a44a93ee3da77429f44c</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aab48c23d8ae4e981afd278afe8cf1672</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a113669990ac72dbf8f12c6efcc7f69b4</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; BrokerId &gt; &amp;</type>
      <name>getBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>abc396d8e2d3a1c081cfe8d313daafb59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; BrokerId &gt; &amp;</type>
      <name>getBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ac86f4067624389109a8a8ef10c90b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aa8378d72ae8b4722272a61704701f687</anchor>
      <arglist>(const Pointer&lt; BrokerId &gt; &amp;brokerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getBrokerURL</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a133f95a247b47bf38962894795e8657f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getBrokerURL</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a42c89d437836c6a296911dd7c9598efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerURL</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a115d51bad98fcf1028f1d823fe41e008</anchor>
      <arglist>(const std::string &amp;brokerURL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerInfo &gt; &gt; &amp;</type>
      <name>getPeerBrokerInfos</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ad8db175d7eb922f9e93b9f9159177577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerInfo &gt; &gt; &amp;</type>
      <name>getPeerBrokerInfos</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a63119f2fd9329a7a1bd5380d388d30da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPeerBrokerInfos</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a9e8d0500482a53e4fe041557e178257b</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerInfo &gt; &gt; &amp;peerBrokerInfos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getBrokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aff4c3fabceb3966d9bede40af5409cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getBrokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aeee87711d2b9b88380b9a4c09c37b7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>adbb19f111d1944081e60cc2abd8f7471</anchor>
      <arglist>(const std::string &amp;brokerName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSlaveBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a74143fbf1e4942e4c56bf556e5446c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSlaveBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ac07fdfc5031eca53067efa0651037f3b</anchor>
      <arglist>(bool slaveBroker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMasterBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a874b05fd13e1d18e4196875ea64f59a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMasterBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a07c31bf2569f810c86123bb94f7aec5d</anchor>
      <arglist>(bool masterBroker)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerantConfiguration</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>adc3aa83000abda56118a853e957f1970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFaultTolerantConfiguration</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a6b5cde3253a469fcd1208954146e1c33</anchor>
      <arglist>(bool faultTolerantConfiguration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDuplexConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a31a785dcd9563400d4fe0b2484132cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDuplexConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>af2fe44939c3562be8da160adc4fa6402</anchor>
      <arglist>(bool duplexConnection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNetworkConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ad5aa9170db6d31558034720b74c8a97d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aed9c34740b42811d5e67b7e0076ba4b0</anchor>
      <arglist>(bool networkConnection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a18604d831b827cfb7c60203e7ef4f56f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a2b36ccbf6f017e4bbc841c51703dc43c</anchor>
      <arglist>(long long connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getBrokerUploadUrl</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a92aa817228ae303eead1cde9fe3d0e3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getBrokerUploadUrl</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a4dfe149c3d81ec0b4bfd7c6d1e0cee86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerUploadUrl</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a3cbc286d9d07597d9f3349ac73f804f8</anchor>
      <arglist>(const std::string &amp;brokerUploadUrl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getNetworkProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a1b69975c8f55558f40cc68ef85353c23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getNetworkProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a5155d78a636c85a90735f91fea4a7549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aebbc42904d10f41b3df6d3a1775fe6c5</anchor>
      <arglist>(const std::string &amp;networkProperties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBrokerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a1cdfa1a9118e1c0f09434777bc93f42f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a8d6e824af1499e8dce3428b4fac04e36</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_BROKERINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ab3b4cb430df6604e36eb06c9eb12bdec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; BrokerId &gt;</type>
      <name>brokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>aa6ff6729daf9eb093771fb2ab829f271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>brokerURL</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a269d32b4443b3ffaa17edd35b86d111b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerInfo &gt; &gt;</type>
      <name>peerBrokerInfos</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ae0ced43cde9f2fa95c331a0397ed5b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>brokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ae6a76e35d0db9b3c3c80928ece6b43b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>slaveBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ad47408d5d4ea952f0ef48af0655f15a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>masterBroker</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a71d896c38c05c2edc6dfdb274d56557f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>faultTolerantConfiguration</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a230ac55202f16cafc89d8b8eba8c70a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>duplexConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a9a85572fdd4215e83fdb52d7ff92878f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>networkConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a7e4e6e9848313e8c4b8af4aa12abfb97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ab6050c9077ba6caefa130c307afd5e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>brokerUploadUrl</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>ad13931d28740a82ddd13fc3f1a8186fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>networkProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_broker_info.html</anchorfile>
      <anchor>a0d13b7cc5d90bd8052d375e8583e3f81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::Command</name>
    <filename>classactivemq_1_1commands_1_1_command.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Command</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>acbe2f000ce5d74b80b3d18c4fb90dacc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCommandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a4f6c4e6f9d2d6b9c3fed419ef166ad71</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCommandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a3a12e5ca398e1b7ae3472384c26dd10a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setResponseRequired</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>ad864fc573664124c78fcf8b15c38fd9a</anchor>
      <arglist>(const bool required)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isResponseRequired</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a2d4cb40a3861b268e08993b6c49223b4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a9c1d06aa74b4812b1aa9e28a5debcb7e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a973a872bcacf958883e041cb7caeff2c</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnectionControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>aa8ab5a4698ac09fe73fd95b230d934ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnectionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a3576d85883d329e8e0e031c9c5ab257e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConsumerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a67a6a15a8a19fe0e415d02c81392c03c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBrokerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a609153733a827b90cdb869bcf055b342</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isKeepAliveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>aa6c0e3133528feedbd54569672cd63ba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a50ac3b9499e0551ecd02725b3e6f75ee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a457d7bd93b1d8a8705086a02f791affe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMessageDispatch</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>ab690220e0cf7955ab8bfe036f65af891</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>ad3162dc7b9dc32f25af641e69a227ea2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isProducerAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>ac5c9ffaa814107ddce461b49be5d7595</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isProducerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a9efa70e9062d866dbf04d2c48a52a9d3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a7fa7cf59bc68ca8487a05ec174d5fb10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isRemoveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a19ec6e040ab79670f1e37a45f297b13e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isRemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>afbebe6f26d9768358ee2fc793242cbc1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isShutdownInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a146a1f23d278e1773c1f6c4e4821805a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransactionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>a8563d1093926bc2c03201adf66bea30a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWireFormatInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_command.html</anchorfile>
      <anchor>ad5a7cf6ed69c0eb0191e08c9ebc6e271</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConnectionControl</name>
    <filename>classactivemq_1_1commands_1_1_connection_control.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ConnectionControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>aa33fd31f756bea2a6699dba2160604e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a2047c4278cbdc2d271528740e0cb577c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a009238eb119e15f511e197f325ddf6c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionControl *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a9a7acc6605b9b4132d89d4cc257bcc4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>af3b2e73836cd2e4aadf096ffc0104064</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a942183ee67cfa030633943a9174e7a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a8a9f4ed80e36779bb4c810d456c0453b</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClose</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>abaa9c958f64477c6a5338db528b395a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClose</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>af497443a41c888546198506aa113008a</anchor>
      <arglist>(bool close)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExit</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>ad03bc0e6979d7dfbf71987df309ce0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExit</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a934ed72609e2953d872a0c3452288be0</anchor>
      <arglist>(bool exit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>ae4d6b5092bc37d3a2c21cb16d4daafdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFaultTolerant</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>ae3c7f8c218da2819bcd85772aaeecad0</anchor>
      <arglist>(bool faultTolerant)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isResume</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>acaa79b1570d0aa1f0016fb9c9c37007d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResume</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a508a64e84368cbd0ebfdcdad91cd4c38</anchor>
      <arglist>(bool resume)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSuspend</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>adc87cf7fec67de68d4de7027dc9954f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSuspend</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>aa43da0e121a00c85deba33402e9f7ae6</anchor>
      <arglist>(bool suspend)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getConnectedBrokers</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a639de0c3b166e3f7d3c4d5f37cb1dbad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getConnectedBrokers</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a41c48c566c7f4e4777fb4261be9c872b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectedBrokers</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a17e01ebd9d3d441f9543169702493779</anchor>
      <arglist>(const std::string &amp;connectedBrokers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getReconnectTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>acaac77e3ddb4c1dc325ba0c1bdda8ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getReconnectTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a4ba3b5393742335850a676f98cc2a8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReconnectTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a3728c5db9916a9b780ec76034c5dbb8b</anchor>
      <arglist>(const std::string &amp;reconnectTo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRebalanceConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>aacb3a2d82a307516c9c9d6f4c32e98cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRebalanceConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>ad6556b6a860e09ef49459133bb1186e5</anchor>
      <arglist>(bool rebalanceConnection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnectionControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a84ff1a3b606ffd12aca809d653288106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>adf151e072f83b1855cd987939d7a0328</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONNECTIONCONTROL</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a8cb2b34b83be1eebf148418573d0ec2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a40deef0a59147bbd0e266221f84b52b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>exit</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>afab383f7d9d33b7acc230ba681bbeb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>faultTolerant</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>abad7d7e59ccd06bfbd5a4db75ea4440d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>resume</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a179786f4ab128d1f533447cf36043f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>suspend</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>aa4ce83e526c17ed047c23d3054ce3735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>connectedBrokers</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a3138847451c5246f7fb0b1cc4f3cd1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>reconnectTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>a4fb473c5cca0875385ab2c6d524548d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rebalanceConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_control.html</anchorfile>
      <anchor>ac920e55db1a7d8f2a0fe15d07040a09a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConnectionError</name>
    <filename>classactivemq_1_1commands_1_1_connection_error.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ConnectionError</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a04e05ce426d5a8ebab40e52149653b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionError</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>ac4c06837be9588a115ab97266699b382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a8e6b36e6779432b2a5f4da97f6ba2182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionError *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a01ad324a2b1db0fc0185371fb0b063ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>aac2179f9457dcb246585a0ccc5fa2b9c</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a974c8ec0c120a6260354bf484e5a6be9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>aeb696598dfbc0b2276527b53a1933bfb</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; BrokerError &gt; &amp;</type>
      <name>getException</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a2a3ec0aeb67463ca0df2b2780cf17c11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; BrokerError &gt; &amp;</type>
      <name>getException</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>acb1c64d8fa6c8795463080351965fced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setException</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>adfc0c99d02bb1fded51b792a8925bdc8</anchor>
      <arglist>(const Pointer&lt; BrokerError &gt; &amp;exception)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a3affc163844e48300e4af07c19b1b42a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>abcf42c17ea3b8b5d9192579ab331115a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a7d03d4faeb018061ab4f2a65d1383e85</anchor>
      <arglist>(const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a0b2c4a5ac06d9d66a5a4370a98f39817</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONNECTIONERROR</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a0b9da64df617aea8d22225c625f6d47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; BrokerError &gt;</type>
      <name>exception</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>a7eec3f0bd87e152721bd7e496ebc0715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConnectionId &gt;</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_error.html</anchorfile>
      <anchor>ae39dc24e93b57d5d23d3617bc9c6d236</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConnectionId</name>
    <filename>classactivemq_1_1commands_1_1_connection_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; ConnectionId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; ConnectionId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a4a4ff11cbe7191da4f78cf0a828492b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a9f7e0a8c4a7f91c607527e1555ad3a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a584d3e9ee98c7ac649426cb066e054f9</anchor>
      <arglist>(const ConnectionId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>ac5a7a25257b191a4c5c973320ab2c376</anchor>
      <arglist>(const SessionId *sessionId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>aff42ec2600e5d72480fa77e88a4a6d3d</anchor>
      <arglist>(const ProducerId *producerId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>afd5e2f25bcfa9e7340c7671fa721d4e1</anchor>
      <arglist>(const ConsumerId *consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a082a35480cac21d07d1f50b02cc66b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a547540863b0aab565f971cfafa955af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a6d415fa5d0416d36c80ec7740fb6e18c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>ad6bcb8c268bfe60a55de8c060e14506c</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a33e2ad9f6347bf44b8d8ad098e700c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a386502ffe89ee387a4a38f332fe79719</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a0e5913ca7f95879586e0aad25f474f3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>ade2fb5d4256531da946333abf8c78dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a576d807f0b659c296896ea346b73fd97</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a7d1ea0d218c843e4366725a1e679ae16</anchor>
      <arglist>(const ConnectionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a7c983a4c583fce7437773693383abf11</anchor>
      <arglist>(const ConnectionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>ae546fd3d91a23841455391c0433cc072</anchor>
      <arglist>(const ConnectionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>a86708149b2c366685123099ab673ec23</anchor>
      <arglist>(const ConnectionId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>ConnectionId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>aa68ff01dc82618375f0e7df1a6700405</anchor>
      <arglist>(const ConnectionId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONNECTIONID</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>aa93c5b2054ab297a458eca872d4402eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_id.html</anchorfile>
      <anchor>adfdba53dbe22267997c9577b13023498</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConnectionInfo</name>
    <filename>classactivemq_1_1commands_1_1_connection_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ConnectionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>ad94181281ba286320d8a5c33694520b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>ad59bddc257e443010fc837992d192c26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a014865f1c61c13dcef9bddab42343ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>acd6d0c1f947019981792bc9c1908c8bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>aed9bb6d1169dfbe365294090d808e192</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a39d46fee8d2d22223075ff1dc026d852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a779eed546df5ae117e26e6d5ce0e8ae5</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; RemoveInfo &gt;</type>
      <name>createRemoveCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>afaab2d1d2ec678fcfc0cf4f815c5e00e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a53952f1001eb90b52b5fb2f1d52c6cad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a1794ca1ab37abef1aeb549337e19e657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>aa13b2735fff2bca78016b3885f7b07ca</anchor>
      <arglist>(const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>ae23d9f510e6275da1fc12a7d7d3f602c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>aaa8af5803e8f1a1d5019e8497b4e6a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a068b36c5a3ed1131c61f97da75b2e518</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getPassword</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a9a6b992b07ebc12dd5587437adef2931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getPassword</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a10da639c25f37e0f26a43ea3d936c5b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPassword</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a112e037202660dfa7f82f52a8f2b1ae1</anchor>
      <arglist>(const std::string &amp;password)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getUserName</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a93dadb69ab27e5799318df9ceee97d55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getUserName</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a7fed3ba6a4c1c6958593721adab746c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserName</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a7eef9cf631111b3177cc9c25021e0b84</anchor>
      <arglist>(const std::string &amp;userName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a9a506338cd1c197cbf7e42fbc73f6012</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a2a69143f096994913b96f9b0cf70ce2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a78864ac12bb58c1c6c820d1d3ae57f9d</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;brokerPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBrokerMasterConnector</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a43cfd2ad335d666b8d448751d43ca26d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerMasterConnector</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a960d9ac241b5af612851804218a2e94a</anchor>
      <arglist>(bool brokerMasterConnector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isManageable</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a63bfcfd0a18506c000f18bd46f4919c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setManageable</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a2560266f74143723272d206e2c10849f</anchor>
      <arglist>(bool manageable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClientMaster</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>af3d735c3606496bae155c3b2e57911e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClientMaster</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>ab77eaa316fa6c2ef7859336d9c1ce0a9</anchor>
      <arglist>(bool clientMaster)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a52a9ddc5adf77f240c47cc9712152cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFaultTolerant</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>aea832835584e96860522857928f3338f</anchor>
      <arglist>(bool faultTolerant)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFailoverReconnect</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a77a5f084982b76e7f1f3d21d43dd2ab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFailoverReconnect</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>aef03ea20f73b701dae5220b7564d4d59</anchor>
      <arglist>(bool failoverReconnect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnectionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>ae6b9f4bd4810591edbd08b50555a5fec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>aab266d7c6376bf06e955a745925cdb37</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONNECTIONINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a350673b2bd4a2745ef14d24cdfc3ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConnectionId &gt;</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>acc8e28796c74f9f9cf3bfc159e85008b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>clientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a75b908b2586bb26b946070cf339adb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>password</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a1bba4e3285e83c279c599bc6e2a1009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>userName</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a3f0cc5eca9ffd5333bbdb2d3752adadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt;</type>
      <name>brokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>acbd3b57a1e86a1b2463a4596fcb88c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>brokerMasterConnector</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>abe1a8bb6c183c6480d329519c77fe1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>manageable</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>acb7a9e505f9e90d9c0af3b3ced3dc2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>clientMaster</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a49469b5280c4e18b9e346ea601d5fc06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>faultTolerant</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a479e43bd1db3240e4cd0d46bf436d6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>failoverReconnect</name>
      <anchorfile>classactivemq_1_1commands_1_1_connection_info.html</anchorfile>
      <anchor>a2dc72ac62f5f8cf03ae91e5bdaaf4688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConsumerControl</name>
    <filename>classactivemq_1_1commands_1_1_consumer_control.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ConsumerControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>aca04e90a52b9dc62f702adb939c4e1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerControl</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>ad57ffd7f00e94cddcaba9baec2c5cc09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a937ab66971e0d26218852b546997cf44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConsumerControl *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a04f34872c539006658de9ae2d182d735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a0ccca4425997083c553b0e9dbf4cd1ed</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a62491e90ef1f4bf0b81ae63a1b69055d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a395d64f3ef71ec732274d29a350aebd6</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>af97edef9ebcde38ee6329e45f4b14647</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a582010b5d17bc3ff6da77b3b09e363d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>ac9580157dbbc712fded3544ccded6657</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClose</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>ac6e74ca22566a701695fae4715627d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClose</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a4619707f7a72bf78dea08773ce09a701</anchor>
      <arglist>(bool close)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a90ca1deb7ca6a94364dcf342ce892061</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a75a2fc71e73297f9c79ab68e5175bca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>aa69a841c1abe9b184911646d8d79f0f6</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPrefetch</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a8946e85974b073bb663b2403eba7e6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefetch</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a10a7954634d91e36aa8227105a4da690</anchor>
      <arglist>(int prefetch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFlush</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>af04ed384ed56c3b02704a2e3f548a57b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFlush</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a19fd6904025120f0ddd9787ad52b6f75</anchor>
      <arglist>(bool flush)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStart</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>afd95641d6207770679f4021c866bb3af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStart</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>aa15811fcaaa63a98385cdbab3efb7b46</anchor>
      <arglist>(bool start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStop</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a45fc053ad3162a142542cdf4a12340b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStop</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a429d5140c045d6a805bec210abc050f6</anchor>
      <arglist>(bool stop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>ab876204e8ec447bf76a5d6373d9785d7</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONSUMERCONTROL</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a17fc78a46ba97231661760e362234472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a768f66f053235b0fe83cdaf0a283c432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a9303c74b300d3d1717948852d8d3905b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>consumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a6df56e530934628f33960671ae597e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>prefetch</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>ad5e287571c6829494ff197887a9eaebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>flush</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>abacc4f8b65e9f9bd989bcd0a27c11ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a4ee357a1f16fb3284d1bcb527474cc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_control.html</anchorfile>
      <anchor>a7b89660204ce9d52e8350a54b152ddfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConsumerId</name>
    <filename>classactivemq_1_1commands_1_1_consumer_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; ConsumerId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; ConsumerId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a0c5bb4543fdcd9773fc561192c9785cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a794638bbb9b79bb0934b596c412de5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a408f22b43379459894b8f4fd6074009f</anchor>
      <arglist>(const ConsumerId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>aabf2872b4ea92aa3cf66a4ec25c76d20</anchor>
      <arglist>(const SessionId &amp;sessionId, long long consumerIdd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>ab082f5bd5bbe291744e01fbaafac9661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a1bd05e1dd7e1d306003d9bb813fd470f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConsumerId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a4a20ecdf5c34057a1855947ad056c9a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a303f3a8ee9a4d4294b5e43853cd8d394</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a5d09c0116cceb1b1dbc8e957d9db10d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a7fe7c3ca89ea18f96a439bd511d6ff2b</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; SessionId &gt; &amp;</type>
      <name>getParentId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a9d759f0e7551107c721ef9bd09274364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>aa0708c5964b1733e52d93248be8db2f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>abb58f96e9f7856633ab9efb8d10f5bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>af7c440d9e3d25927cb76c1fdfb6b04eb</anchor>
      <arglist>(const std::string &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a29b8abd03834a627bd7f626f26677039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>aa88314011909106b3a4a17028fee7d12</anchor>
      <arglist>(long long sessionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>acdae0a6fa85e229b467df7fa365019ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a276d5e0db71040092f6bc955829daf3c</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>ab9738bd1b451a25115d22df2d68e061a</anchor>
      <arglist>(const ConsumerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a5ae7d2e608c59c3d8ec76fd8f151afc7</anchor>
      <arglist>(const ConsumerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>aaaea6f33f6029ab264e9ea0870f9bb13</anchor>
      <arglist>(const ConsumerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>afb8a0881d9ce7efc086f3a30cdf46e57</anchor>
      <arglist>(const ConsumerId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>ConsumerId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>ab25d1d23570a89b7705bff1d0c3c9ef0</anchor>
      <arglist>(const ConsumerId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONSUMERID</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>a437aab9640c86f4ca56764feff0123af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>aa6a673134737f9a976cc0024525e7fa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>sessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>ac2edbd58a320fd272a9284bee167bff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>value</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_id.html</anchorfile>
      <anchor>aacdb3e670345c7ac0b8ca92f270ce41c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ConsumerInfo</name>
    <filename>classactivemq_1_1commands_1_1_consumer_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ConsumerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>af2109a8bd63c38749a9c65537e211ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a0e55f33056cf416c85c87a62bd9382c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a0549b5e05681fb67ff7db5028eb5c0f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConsumerInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ab9a2777862b677462c7a45a35dac34e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a41bc8f43c2787c877c50ea2c9c9c2576</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a07b82893905eaa1e74c10fe914ed8e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a835d7b612147afbda57dcdc9ea426dc0</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; RemoveInfo &gt;</type>
      <name>createRemoveCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ad3eecedb7b9855befbfffd1b29c5079a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a946c772854fb4d1876bf45adf43fd1de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a9981baa5c37b62f382f2613c071ad653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aa3c0d497d1f3731fca64d022f39f0114</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBrowser</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a03b4c7d3a40f93a07f11a83bd1dc7d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrowser</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>af8c13e9ff72404bff8e244c9558d4b31</anchor>
      <arglist>(bool browser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a73884dc7ccbe1a95e6b0f4fbe228d709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>accfc186a523d761d769b8fe4b20a1ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a1ed1aecb4536ab2bd7eb2e1c94871b3d</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPrefetchSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a25014e337fb0334f81d3784dce1c1dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrefetchSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aaf2e6c29e3e2cf9941d43edac3e7bd39</anchor>
      <arglist>(int prefetchSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaximumPendingMessageLimit</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a7dee5d57fbbffffb6b3ce2e870491592</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumPendingMessageLimit</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a01504dfe4d529021ed2dfb569a76f8e5</anchor>
      <arglist>(int maximumPendingMessageLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDispatchAsync</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ac6e9a3df8d3cc5ca6ab35437a3b0d5a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDispatchAsync</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a7815bff4156974ac7da40178dfc2e87a</anchor>
      <arglist>(bool dispatchAsync)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getSelector</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a0e152891835c801bfcd5500a6776e002</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getSelector</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ae95acfc775615808e38082b601952809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSelector</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ae692fb0c3c400cd1cabc6c42bf56809e</anchor>
      <arglist>(const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getSubscriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a5d7a6d988217dfb5ee58e9da17497d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getSubscriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a7c76f44df5e820b5a60b2e66e7f4735c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubscriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>af7d7788f706dddd3748fc90a6a063fac</anchor>
      <arglist>(const std::string &amp;subscriptionName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNoLocal</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a540bcc84ca76284c24000b05fb34c598</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoLocal</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aedc465c4c3ca10df73a8b75fd5338f87</anchor>
      <arglist>(bool noLocal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExclusive</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a7a36a77091df3b62ba28a2ca22f92bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExclusive</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a22bf9af5f62ae7c8017a6774a99653ad</anchor>
      <arglist>(bool exclusive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRetroactive</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a0a16d12705021fa7a093e594ed14342f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRetroactive</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aba0e5f4bfa693a38d04ad4310333a69d</anchor>
      <arglist>(bool retroactive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getPriority</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a68b25f61ab12ea0a5c3a8fce6a272c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aab5279b897151451f847ef15113083f9</anchor>
      <arglist>(unsigned char priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a0052139d37839632de063a64c25be4c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a6fd6a1c64aaa409862a4d568e3883451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a51d0a74e0de55cd789db9fc6846978c6</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;brokerPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; BooleanExpression &gt; &amp;</type>
      <name>getAdditionalPredicate</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a3f54c2c855e2cae026e12d240727533a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; BooleanExpression &gt; &amp;</type>
      <name>getAdditionalPredicate</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ad04921ef18221ff94c6d1e2c8b65ec3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAdditionalPredicate</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a84ef5c54a2f9bcc7bd32c265125ae23c</anchor>
      <arglist>(const Pointer&lt; BooleanExpression &gt; &amp;additionalPredicate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNetworkSubscription</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a6e88c6834cd12029851de09f5f85f12a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkSubscription</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aa06603fcef49276bf342aed393e24b44</anchor>
      <arglist>(bool networkSubscription)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOptimizedAcknowledge</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a99f88ce5a3f1d7a156c2a6cb3d367643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptimizedAcknowledge</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a8bc92905a8b697d39ec9687fdabc67ed</anchor>
      <arglist>(bool optimizedAcknowledge)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNoRangeAcks</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a533a2983c1d437aa57ad2463b439ab90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNoRangeAcks</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a4eddace228817786727f5ca2cd7c0a57</anchor>
      <arglist>(bool noRangeAcks)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; ConsumerId &gt; &gt; &amp;</type>
      <name>getNetworkConsumerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>aa8c2e98789556bc2de1af320dc7d025c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; ConsumerId &gt; &gt; &amp;</type>
      <name>getNetworkConsumerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a5d6449d851dc6cadac70d1f66c326457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkConsumerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a1ef23bd3bfbdfafdf31d5f73b6a96353</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; ConsumerId &gt; &gt; &amp;networkConsumerPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConsumerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a3334bae4ce98d4aedea69e571110ad00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a543ca14c55a0f59520d632ce2715d1c7</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONSUMERINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a8d404681b034915698b0030ac31e87ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>consumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a3364ed94ba6117461ffe25ab8e40d7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>browser</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a370c1af6080769486c4a27d352e088fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ad02bd46b19486d4b11df4bbd848e6952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>prefetchSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a9556b93f14c3d5b9cbad3fd2568f1d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maximumPendingMessageLimit</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a832f6090ab32693e01d9982054e297c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dispatchAsync</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a54d9c34ce466f10c174790f082402d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>selector</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a5a75b9d74aa53b12bde9bc8bdf10490c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>subscriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a6d7033663a15d29e71df837ffe969aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noLocal</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a6dfedae6e8abcbc6c8cba1731ef8b200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>exclusive</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a4bb1b09f53075a27e1d68651630a1133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>retroactive</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ab108cecfcb3b9b6c50eddb8f1ce20544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>priority</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ac9af878cc84e7b4d31f2dcc09c8868e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt;</type>
      <name>brokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>ac71ecbbd00a00037a7659cf8e9b55a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; BooleanExpression &gt;</type>
      <name>additionalPredicate</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a456000a61e46207c68c5b57dc94be271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>networkSubscription</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a975ab5a6e4f9d49ff3beb6f64c295095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>optimizedAcknowledge</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a1d85944b2521d17eac6e8a46362a6507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noRangeAcks</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a49aa8255365f0c5fc1e11fc6683a2272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; ConsumerId &gt; &gt;</type>
      <name>networkConsumerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_consumer_info.html</anchorfile>
      <anchor>a3b4184f6ec36b69f734568c96a68859d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ControlCommand</name>
    <filename>classactivemq_1_1commands_1_1_control_command.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ControlCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a754e9a0aab1b1d118dc6ca028b0604ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a338f150eb1b09d0db6f0fd3fafe616b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>aec0dfebd59d16432bd22b447b9dce85b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlCommand *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a5bf28415ae81c546c337da032a2c6cba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>ae9a1ec0626ab1125bcc2ca8cd1bbdc05</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>af7f796a8533308323b54361e33d2a7ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a2241474229d16ff66f31f65bd719b8cf</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>ac36cae1ffe7ff30490a0df4e001330ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a18fd7469d9861ce5617d667a7596bfca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>af6a41ff80cc1fde285012ba05f65bfc4</anchor>
      <arglist>(const std::string &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a0e72205345b2715d3997c18872a022af</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_CONTROLCOMMAND</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a169ef05005f99d709593f77cd09adb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>command</name>
      <anchorfile>classactivemq_1_1commands_1_1_control_command.html</anchorfile>
      <anchor>a6cc6e3350e9bb3082aa5383389d29e60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::DataArrayResponse</name>
    <filename>classactivemq_1_1commands_1_1_data_array_response.html</filename>
    <base>activemq::commands::Response</base>
    <member kind="function">
      <type></type>
      <name>DataArrayResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>ac7c3b71cf9516ce720f848befe636b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataArrayResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>a2f51016cd2815a813f7855445d2922d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>a794c8f19b963625986af41eb413dea33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataArrayResponse *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>ae5dd8b7fe9da91ddd5c5dde03f3f4f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>aad98b3d8403cc1fa0e98e980a0e315f2</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>aeca8f8859a83c710739b65755390ae7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>acbb1376eaa26eccbc7195c8a3b7fcdff</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; DataStructure &gt; &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>a984bb72e8807e4673ebfb9c62faa5a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; DataStructure &gt; &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>a1da073c3d40a43206203beac4e5f3b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>a258ab545a404c8f090db6e9bb8204869</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; DataStructure &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_DATAARRAYRESPONSE</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>a9364d1c66a9f13cf19355cada125dac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; DataStructure &gt; &gt;</type>
      <name>data</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_array_response.html</anchorfile>
      <anchor>aa455dc18adf30d89b2ea6e8126b703ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::DataResponse</name>
    <filename>classactivemq_1_1commands_1_1_data_response.html</filename>
    <base>activemq::commands::Response</base>
    <member kind="function">
      <type></type>
      <name>DataResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a552c22374cb86790db8e349d982c1c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a015e074cdd7180284274d86227e12e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a286db31fff5ae99ace9a9fd0fa468990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataResponse *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a5673d43574452600c3c459f1260702b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a3dde21aa50c3bf6d64cff16beb32f8ab</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>adb3d0403650ccc946828f22d23fdd2b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a1d19ae067c09532781d1beb8e739b689</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; DataStructure &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>abaa9a0df18508e8053b3196aae70a5ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; DataStructure &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a80f4dc3372d7c8518b0ad38ec47e7a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a4582adf30dde8c8b0972248f02adbb02</anchor>
      <arglist>(const Pointer&lt; DataStructure &gt; &amp;data)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_DATARESPONSE</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>a44fce65a0624fbc679d7893477a18f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; DataStructure &gt;</type>
      <name>data</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_response.html</anchorfile>
      <anchor>aa491b061bfbd0576629ed6379ee62a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::DataStructure</name>
    <filename>classactivemq_1_1commands_1_1_data_structure.html</filename>
    <base>activemq::wireformat::MarshalAware</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_structure.html</anchorfile>
      <anchor>a45d4756fb8fa8af2c2e226f959b1a6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_structure.html</anchorfile>
      <anchor>a8f5ef11cb8ca5bb17266cf3bd70a1c71</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DataStructure *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_structure.html</anchorfile>
      <anchor>affc93e43d4561e483007723a9492027c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_structure.html</anchorfile>
      <anchor>ad83ed4a6921870303382823d2da629c5</anchor>
      <arglist>(const DataStructure *src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_structure.html</anchorfile>
      <anchor>a4d9625ac3d1e50df6910e4346107c86c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_data_structure.html</anchorfile>
      <anchor>a3231dbdb878245bba0b6770180f2deb9</anchor>
      <arglist>(const DataStructure *value) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::DestinationInfo</name>
    <filename>classactivemq_1_1commands_1_1_destination_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>DestinationInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a21492c10112e81db9dc495679e1e08be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DestinationInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a37d3abaec57b71564dab6c2634cfb78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a446b2dcdc5a47a82539786454605f0ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DestinationInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a474a596124679d06f648b61a3ca49463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>aa5b269a4af2b62c45ef6d62782cf69db</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a3d6439aed79dd22bd42b609bf9a704a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a82ecdb2c0b425030e9cc19e0f49e444d</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a7033b1ead66af48b41de57bb5caf85a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>ae9f41f0b9ebaed68b12263c2cac416c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a40123cc99550edef9f1236bcb1225c16</anchor>
      <arglist>(const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a1054232443aaa2f2dff00a04909cf054</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>ac4a4fd1eb57b4fea573020f85fd200b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a671da0e3dd40be5411307544e83ae7a8</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getOperationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a3454bec38429c5a1e24d27e406f2cca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOperationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a743d3279c16f6f13c612816ff56af837</anchor>
      <arglist>(unsigned char operationType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTimeout</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a542725a11162e869d925c73ed05e00ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>ad730d7145f154d2ba69934f43191a880</anchor>
      <arglist>(long long timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a1acd3319edb34ae381ab0b1e5803ed6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a3e00689bbe0d8499b324d9d940222c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a53074517faaf6587414cadfd696395cf</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;brokerPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>adfceed2b9f96114942f6db00488be0c8</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_DESTINATIONINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a9e6429f8bcfb55ad152b2688f0c1b760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConnectionId &gt;</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a1acb56ed1e4195a99efb33916de2609b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a8b5f9e10c405bdb8c091deffae7c8d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>operationType</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a7f9898def2e01edd204599e29d68ede8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>timeout</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>a518fa7227ba9e33b40d80053f036d1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt;</type>
      <name>brokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_destination_info.html</anchorfile>
      <anchor>ad8b90cd208496208c935d947df682e59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::DiscoveryEvent</name>
    <filename>classactivemq_1_1commands_1_1_discovery_event.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>DiscoveryEvent</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a01291d37f8026613eaed874d3c073277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscoveryEvent</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>aa7f86c9657b48fb5aca63804131864b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a7582cf6a14bb06e2124336fb626d2ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiscoveryEvent *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a00fa658e78442cb04f3e79f08d56161c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a5b75558621e194e039fa0a8b22010a8c</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a79c256a2ffa4c6e8cceeafd56afdd6fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>afe58d6a494a41f90c69ea3640594d0dd</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getServiceName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>aef1d530bb1841afd95296f0d3e65db55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getServiceName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a19b16928d7a92b2a527bfc94358e4074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setServiceName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a29824df06157839616f77176e9aa8e11</anchor>
      <arglist>(const std::string &amp;serviceName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getBrokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a5487690f56a04f3e3f881089acade871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getBrokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a975997f6f7ccc37e2b8b1fcaf37888b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a62f4405013687dc56cfe537886035fdb</anchor>
      <arglist>(const std::string &amp;brokerName)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_DISCOVERYEVENT</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>aa72a71df4a6d7c5d0b57bc25ef9547eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>serviceName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>a2fa362fef68e4645de4328ca28ccfaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>brokerName</name>
      <anchorfile>classactivemq_1_1commands_1_1_discovery_event.html</anchorfile>
      <anchor>ada2f296dc42f987971faa673ef531fba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ExceptionResponse</name>
    <filename>classactivemq_1_1commands_1_1_exception_response.html</filename>
    <base>activemq::commands::Response</base>
    <member kind="function">
      <type></type>
      <name>ExceptionResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>adfb0f629a232a0e314e4e38097a48e3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExceptionResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>ab7ee8adeb7b208b647d352bbda35658a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a15cbf894987ac3801ccf387450294714</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExceptionResponse *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>afe069bd79fdd4a8585b59163c8574196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>ac2f0cbb40b0485b88fa33b34d71e7baa</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a906559fa2923b29d51b7d70b9bd6ce94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>aef4f4b5590894e7819c5bae156b9bb83</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; BrokerError &gt; &amp;</type>
      <name>getException</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a4f6d0c68367036946393a70aac2a1704</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; BrokerError &gt; &amp;</type>
      <name>getException</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a46a39d56e2d37ba8db9d8cc6d08bfa1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setException</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a006897a42327b7bcbf18c6867f3af24d</anchor>
      <arglist>(const Pointer&lt; BrokerError &gt; &amp;exception)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_EXCEPTIONRESPONSE</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a73d6a4564b03db8d1d0bcf3361aec49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; BrokerError &gt;</type>
      <name>exception</name>
      <anchorfile>classactivemq_1_1commands_1_1_exception_response.html</anchorfile>
      <anchor>a11e2cd91f8e7823fa1ba62ebc5b55ed1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::FlushCommand</name>
    <filename>classactivemq_1_1commands_1_1_flush_command.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>FlushCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>acf3ee1c5596f7fbb055d00ebf5c13cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FlushCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>a9a3e2770310d60f6c68b90a242571ff1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>a8282c1ab872bca813b610d9e509cb819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FlushCommand *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>a32d4a32708f4bfe18a77e5ae3839e854</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>ae7d8fc1e131331ba62733851b111c718</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>a3d5633ee33c6df8f05577ef3a1d411d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>afac3c8b023e94ed0b390eab4ad688794</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>ae734691b095f000c0662006fe41f8007</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_FLUSHCOMMAND</name>
      <anchorfile>classactivemq_1_1commands_1_1_flush_command.html</anchorfile>
      <anchor>ab1472759382a7c889786dbd80790f135</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::IntegerResponse</name>
    <filename>classactivemq_1_1commands_1_1_integer_response.html</filename>
    <base>activemq::commands::Response</base>
    <member kind="function">
      <type></type>
      <name>IntegerResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a79b1f633a710d9e89cebc504e648e8ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntegerResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a6ef38a60781220b075235e0a4099f58f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>afbdbb7df86188af389d05507ad65326f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntegerResponse *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a7bb828e6183160ff419c99a992f5269e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a9c2b3237eee795d728f2ad0f680030a1</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a2932b637530985ab74c2a3bd6329306d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>ac08554e720e714017499381686da4559</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getResult</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a3e5dbb233e98408fe31e54ef1675b126</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResult</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>a413efdab810d40c77e3512c3c84e2e91</anchor>
      <arglist>(int result)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_INTEGERRESPONSE</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>abf5dd4d3d4143a2d729a4c32458b3601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>result</name>
      <anchorfile>classactivemq_1_1commands_1_1_integer_response.html</anchorfile>
      <anchor>ac1569d3a41e2f9a41126203021c1c182</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::JournalQueueAck</name>
    <filename>classactivemq_1_1commands_1_1_journal_queue_ack.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>JournalQueueAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a54c30d6fe7bfede8c86b56376202be84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalQueueAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a8a2cebc78c488060d2033367135f1e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>adccfd3272e50487208f7064bc8306e70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JournalQueueAck *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a6f37fe556fa3c5a43aea3c4ea0e89ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>aee381104068ea1e9d1642992d14fb8a9</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>affdbf7c70754d929db1a6c0724ddf426</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a23b7e7ba4af8493761c4647bec43873b</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a3751da49a7ba1ce76851eb704f95ff82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a938f6fd94f516ce68f5fd4bcc98543fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>af34406d40f7dc513343d681fe77190db</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageAck &gt; &amp;</type>
      <name>getMessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>af8b599e53e200bc1b2008d37d58ebab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageAck &gt; &amp;</type>
      <name>getMessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>a493e40c75e734ee8a74c283cd1363703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>ab655c56b345afa4d16f79f577041b685</anchor>
      <arglist>(const Pointer&lt; MessageAck &gt; &amp;messageAck)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_JOURNALQUEUEACK</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>ab792d6b0035057ae8b47c08c1e0c217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>ae508bcab4aae508a5ecca507ed01d8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageAck &gt;</type>
      <name>messageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_queue_ack.html</anchorfile>
      <anchor>abb581ba7bb0b614fca9022d9161d1d37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::JournalTopicAck</name>
    <filename>classactivemq_1_1commands_1_1_journal_topic_ack.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>JournalTopicAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a5dc34118d36f4a4fdee34de7e90e8523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalTopicAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>ab01bfe5f974f5405ae2cd3e50c94f9e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a5c0c25b0502a13e62f488597094ad8a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JournalTopicAck *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a87555471d50ece53ea81da242cebd832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a82fc7a482187884327096bcd9e8b0984</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a07b54c4c392715cbef8a50afd192f99a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a888acbe047b859c758b29f96be3e6ac0</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a5aa0b96f5abe71670e4c677d57d174cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a1ef3449d9c24cbbd08d804752adea2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>ae95e566cec1178a55d782957011ee9d1</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>aa7d01566516d22d4a02dbf9f6452a040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>afbaa1f1a3062b7edf6f0d751842a9b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a9acc206cd906d46694f9f1766aef8c73</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;messageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getMessageSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a590de7cc10c4bb782f5057b41566a33c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a00ae4b115ee7d1a524f19bc36afa73a6</anchor>
      <arglist>(long long messageSequenceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getSubscritionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>aea97fad4148600a0d89939617af20b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getSubscritionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a03d8d5baa41e7ab23016aa9c5c2bd41b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubscritionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a462559fe4f78280f03fa0716978ae538</anchor>
      <arglist>(const std::string &amp;subscritionName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a54450ba2cbebb1c83eb56749228c1792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>aa45960ab14d981b9d3e7f8926ba8bf94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a1893115ee99ae5f2c77001880ac624bf</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a8de3da21d312b8699b48bcbad7851c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>aceaf9ba7768cf8b00922be3c30c17202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a10256c68d18b7c9959801ceb2466a57e</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;transactionId)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_JOURNALTOPICACK</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a86009e2eb4596f4bd2bc4e70505b1d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a94f56c1ebfeb2b37b5626a10e82c6e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>messageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a0859c4c4698f55347c040b4ca314a968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>messageSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>a3da18b483fdb61ff8d43bac17c3ede63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>subscritionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>ad22e5618dd926cae8c52c057d1a6f8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>clientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>ae25b0e54027be68ed871b0b7f8a72a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>transactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_topic_ack.html</anchorfile>
      <anchor>aa9a893f70d8b77c7537690aa77549b9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::JournalTrace</name>
    <filename>classactivemq_1_1commands_1_1_journal_trace.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>JournalTrace</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a405d4a67962b581b7d703f60818c88c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalTrace</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>ab8a46c2c01cafa0351ca9cb13bdf43f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>acf04e5bc02651a350856e6b4c314f8eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JournalTrace *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a73564aefcb6f7d9796df3b09c07d02e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a42a1ff8a9e75587aecc7b6ea53bd5592</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a1a99f9472ed6cc7ca2555e6621e77f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a4ebe6ba4086dce75a332349cf6029790</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a0404e3f132eb1790e6dc3d2e5639da22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a1cdc74f254b50e38fafa64483a2ffad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>af25aa09457825c3743a1137cb4dc2058</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_JOURNALTRACE</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>acbdbfc25fca0e21676e09a9a06d067b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_trace.html</anchorfile>
      <anchor>a60daef5cfd68215316d15c88a852cb4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::JournalTransaction</name>
    <filename>classactivemq_1_1commands_1_1_journal_transaction.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>JournalTransaction</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a658af114181cfe0f58b4e5e422255ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalTransaction</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>adb16f6031f1c4adbd140970e22d36f56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a32e23a1340bd0d412251bcd86b66f3d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JournalTransaction *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a5d42b322e691f7961e2d1ebd3146aa4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>aa1ebd37682bd4cfd5ebc6ca12dd69c7a</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a12526478428a4710e51c3a22735d858c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a9fd6441e46a0d8d8b212b857321c2ad4</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a5dd291fd1e97de788773f4be5cb5f9e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a8002a791ba93182f8d9cb7076d3a63c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>adcac1675ed3068edbcc02adf9114f5c9</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;transactionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getType</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a592b3470e260d3ccaca3c33bcb19d6cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a6a106a99dd7e7376d3b485ed126011d0</anchor>
      <arglist>(unsigned char type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWasPrepared</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>ad5be597ac87f2dc462e632c3fbd3c9c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWasPrepared</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a850b1681890c1a950a297e326a4ae2b9</anchor>
      <arglist>(bool wasPrepared)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_JOURNALTRANSACTION</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a3dc2fb76a00dc54138ff82e20e40adae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>transactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a0847b7fe4fb753f794cb245d437c0b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>a1789df49773c24afd0ac4cefdf5701ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>wasPrepared</name>
      <anchorfile>classactivemq_1_1commands_1_1_journal_transaction.html</anchorfile>
      <anchor>af6a822db5fe5820aa478b3e2704ef4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::KeepAliveInfo</name>
    <filename>classactivemq_1_1commands_1_1_keep_alive_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>KeepAliveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a70da276cdf365aca0981a3f48cc65a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeepAliveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>ad850e0238778d32666f5ca8ebf95ac59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>af52631fb36c4f36420afca1c9ce7eeac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeepAliveInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a790b6bf6ab4619e701eca3cb5294add5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a165285b0b69403f7e6b89d9b3ba395a4</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a11e19610a787673e0b52e9ac65d28676</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a6080dacb2b8c31965990e13c7aee23c5</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKeepAliveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a0187eb6f606d8076bc9926dc613d6ae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>a955f20d9df5de09d4060f726a2005648</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_KEEPALIVEINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_keep_alive_info.html</anchorfile>
      <anchor>aacdd9fd83577917e018863616f4fa6b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::LastPartialCommand</name>
    <filename>classactivemq_1_1commands_1_1_last_partial_command.html</filename>
    <base>activemq::commands::PartialCommand</base>
    <member kind="function">
      <type></type>
      <name>LastPartialCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a4401db36d3ca095087a0515e2ad1395c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LastPartialCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a36a923296d04cb53216e08cfc60a422b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a792832923f9ba30649a64d01613b3def</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LastPartialCommand *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a279927eed20c782a93aeb8a03903f99a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a431ef39733de751d677f071bf8d8d42f</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a76854cd5593f8d17556f9b97ba1b11b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>a3a48defa1bb4d6beef3cec42d9a51b37</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_LASTPARTIALCOMMAND</name>
      <anchorfile>classactivemq_1_1commands_1_1_last_partial_command.html</anchorfile>
      <anchor>ad4ddde57d61b6bfb8cabc1288d8eb0c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::LocalTransactionId</name>
    <filename>classactivemq_1_1commands_1_1_local_transaction_id.html</filename>
    <base>activemq::commands::TransactionId</base>
    <base>Comparable&lt; LocalTransactionId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; LocalTransactionId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>ad96b41373ce7848174489d19f4255291</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a43f7b74407c6b43f3865e12d0298d8ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a5ccfb15852d1f29f56407f88c69c5df0</anchor>
      <arglist>(const LocalTransactionId &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a4df87895ccce51bc374e6036f136a53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a78ebf5241310e2fa907ed4db735621ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LocalTransactionId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a5db05f19d03d795f15f808205e9f1248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>ab718c1f085be35a822a25222b560ed16</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a24b292f134e5131d457541d0952ba780</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>ad983c55ca50ef849350b5a61286faeda</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a77ddd87c898371f443fcfcfaa58a21fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a7fc9f2f770fea2610af83c7f3a5ded2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a9894c2f52861f5f8ccc0c81b50311869</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a995686a614c9e6c6116e5e072e7d2f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a3e9eded58d59aa6cbabffb8ef4bf8281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>abb4cede667939515521b38ca4da6cd14</anchor>
      <arglist>(const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a4df4a85fccb5fccc0152abe68c42f93f</anchor>
      <arglist>(const LocalTransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>ac6cfa11dfe0a97002753973e1aec1e1b</anchor>
      <arglist>(const LocalTransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a384ce245f166f28a0b6eb64397ef254f</anchor>
      <arglist>(const LocalTransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a9bb8d20f06d5d8f55e86caf55bd07648</anchor>
      <arglist>(const LocalTransactionId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>LocalTransactionId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>af9d1f5056b4909b9954dbfe64484feee</anchor>
      <arglist>(const LocalTransactionId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_LOCALTRANSACTIONID</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a62a62f5c20e0ba720c49e580865d0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>value</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a855d7ad5011f8a7455f5806d7d765905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConnectionId &gt;</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_local_transaction_id.html</anchorfile>
      <anchor>a9a48edf0ebc18c27039053ab5ee21453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::Message</name>
    <filename>classactivemq_1_1commands_1_1_message.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a4db70344e2d86ceed204c92e88469164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Message</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5b39e9c68ec8f34c7a6f08871bee3b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a86424b3d8028a000ff38d26f7e4e9d04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Message *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>acc67bedd34c73c169e38d860542d0d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a681bceefa9a583a3f8289d536e71223f</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a3db5a8f66aa11df55acc6d919d3cf740</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a576c53e8745085a64bafd3a1babdda6c</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeMarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a881b4a8e9488fb9c0d50859784e7bca5</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>afterUnmarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aca0f5a7f443f4d64f7eb244f7396f9a4</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMarshalAware</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aac12695c114ee47822213986891cd028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckHandler</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a4ce3b1b4aa53680d0f6d5ae41db8b483</anchor>
      <arglist>(const Pointer&lt; core::ActiveMQAckHandler &gt; &amp;handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; core::ActiveMQAckHandler &gt;</type>
      <name>getAckHandler</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a0c0ece0db4a0b1d0233a38ffb2d54e3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ab2565a0695d69ea1ad56ed4fdeaf0d39</anchor>
      <arglist>(core::ActiveMQConnection *connection)</arglist>
    </member>
    <member kind="function">
      <type>core::ActiveMQConnection *</type>
      <name>getConnection</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>af427b7ee23c39bec1f5ca7abf919e506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aa01cf27908cdb0af06652da3b44011b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpired</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a0e347e53bfeabb7efbfce6deabe41ec8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onSend</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>af34f3317fa4d7cd60af02e264f4e7c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>util::PrimitiveMap &amp;</type>
      <name>getMessageProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5a6a1737d21dbd2744572d9ae6551399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const util::PrimitiveMap &amp;</type>
      <name>getMessageProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a9ef9582b14691dceba9bddf4e03c718c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadOnlyProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a631f468cad363da05abc7f4cdc091dd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadOnlyProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>af5026464bb40bdd271bcef9c9b64964e</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadOnlyBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aca8b98e026bcbb652ac27d7e7a1e71af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadOnlyBody</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a55f8a7b133324408662812f55c824136</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a2f97b51d2b82a584337054589ba63432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a738d31d0d360ac2418b49d170492bc5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a6cb818ab6e2d2fd06d291b73b522f341</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;producerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a7d9c0364e3b924528632729f6ab1aada</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ad53150794f841d6d5ebae491a486c779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a0e9c0ee8ae963f552b28d6f61ae04ec2</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a2ee422c1b8b72aa54869dedb1e42b71e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a33bc5e45671c26b69ef620811b479b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a9dbdea7d98d4d6f1f3fc916025a7f1c3</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;transactionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getOriginalDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a61f04d5e29b5c6540af87f78b7a20645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getOriginalDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a95a2d676b095f153c6463207a4be994e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginalDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a67c3ff9ee4e5461c01572fb2491f8352</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;originalDestination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>adb84f5946ce9e7a05baa6d4845955795</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a0835f49325371869d553b4c9a592a124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ad882f81beac878200d148cc161c7b64f</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;messageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getOriginalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ab9515116532242aab3765ee344b0d289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getOriginalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>adba956087bd91481edfc6e01ec65578a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a6e2781050901990643ca09d8f237d0f4</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;originalTransactionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getGroupID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a3abb5ee15836a7258e83d2bc9a08e464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getGroupID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a2a8e0c394f2ee9b44ab71b3b45d895cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aefd9a5bdbca66425d2986f302d544c9f</anchor>
      <arglist>(const std::string &amp;groupID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGroupSequence</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>afefd53e4d9d7b07b3ef745e79585bd2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupSequence</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aff43df8bb7e0c6fbc4d331a4113d675a</anchor>
      <arglist>(int groupSequence)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a80001ff241f739a9b3d85aba42d2bdce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a93b6712e84bb7b8dd058905631d82418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a793273f820349b278da9090d993b8a67</anchor>
      <arglist>(const std::string &amp;correlationId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPersistent</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a73fcc6481df2da4a3898f5cb0b21fb39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPersistent</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ae50e6c916848892b2a695e1a307a97f0</anchor>
      <arglist>(bool persistent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getExpiration</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ac4be85054e1b2a389eeb1c6fcc6348b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpiration</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a8bb5424f5862a66a1009733274f19613</anchor>
      <arglist>(long long expiration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getPriority</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>af2fec263cdb4f7960fd541b338bf94fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a644f3953f9c54fbee97884faada46875</anchor>
      <arglist>(unsigned char priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getReplyTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a63e1c7db4a4885449dabd50a21d74173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getReplyTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a6385a2c78bf8a7d40090c2ebadfa6e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReplyTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aaab8906e737b17eb5a31b6cbfd11bdba</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;replyTo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTimestamp</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>abd609671ea5a7bed574dc48d536ca9a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a40eebe9087c3573aceb5d45e1b5c3612</anchor>
      <arglist>(long long timestamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aeaea70ddcbc7937f9836456b7ab3788f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a28ad584d5b5490688bf92f4116634955</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a4a5617dd688bc4ed40a14037d4698a52</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getContent</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a7a261c3837c64570fe2eacca284d2691</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getContent</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ada7815cbfe87e6b1b0d335fce682d5bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContent</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a778daebb8a43ccc6838e4e8f8eac9d5e</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;content)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getMarshalledProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5aac4820180be6608584e5e88bd3ecdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getMarshalledProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a4eafffe4e035606b25868a2409b61fa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMarshalledProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ad10b3e7fe6ac4ccc64a040991cd56a72</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;marshalledProperties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; DataStructure &gt; &amp;</type>
      <name>getDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aa1bbfcb0e9266bb9d549f4e0696a65c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; DataStructure &gt; &amp;</type>
      <name>getDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a681ecd013532fbfcfbd0e0b375f26021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a95916a7da7bb3e9c4f49bbaca9b202a0</anchor>
      <arglist>(const Pointer&lt; DataStructure &gt; &amp;dataStructure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getTargetConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ac01dc80d37bef7f4c76433038bbf2d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getTargetConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5cd3ee0f876a9e71da38365d7bd5f90f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a7a69a6f79fb2bdca43894445a8b837ab</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;targetConsumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompressed</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a3b49fac6b50c5935657b095a87aba092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCompressed</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a9c48c6664963fd2b80d1bca6f2d06f63</anchor>
      <arglist>(bool compressed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRedeliveryCounter</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a09d23d331ca6a4cfe031a00dfafc974c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRedeliveryCounter</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ade58dd9d85b4878a3911ef03be59a022</anchor>
      <arglist>(int redeliveryCounter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a6c2dd9e687db0c7169ca0235d2a01cfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a42449b1f7dfdff39815896acd2c51746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a831224c052882259228570f780994d81</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;brokerPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getArrival</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>abfa079f4008011d23d8955daec3ff2d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setArrival</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a01fdb5fa87eed1908af5f9f2f0416eac</anchor>
      <arglist>(long long arrival)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getUserID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a4b3a4391b5465159022538249ab5b3df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getUserID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a3424b07222cd8ebeba9621e8ea509b50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a0cbd9c681283cf907eac8540b86f63be</anchor>
      <arglist>(const std::string &amp;userID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRecievedByDFBridge</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a1fada8b06174d70ba9e3a4dbf7da9ac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecievedByDFBridge</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a27a3a798077c7eb02b2ee758bc5e06ba</anchor>
      <arglist>(bool recievedByDFBridge)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDroppable</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a77cf07071096865ef60700c04238c65a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDroppable</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5bd6ee806c1300d404b22140f92d1bce</anchor>
      <arglist>(bool droppable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getCluster</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ac06368bbb678fef4d27771e349d7d7e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getCluster</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a06b98088371df3d7f9413aa439469d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCluster</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ab6b57a100ab5283ebc2cfd2b5483b043</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;cluster)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getBrokerInTime</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a3993786cd91c6a204529a526613eced4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerInTime</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a1a273983ff67c34166a9ee2afb31539a</anchor>
      <arglist>(long long brokerInTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getBrokerOutTime</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a252cb8ec3b5faa04de78e0d5e8993c5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerOutTime</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a1b62b55de61a98c69c2c4991cfad8f1b</anchor>
      <arglist>(long long brokerOutTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a0b9ea6c15d7c61e74bda7eac7ff78cbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aac6e9d23409965a8e2d32c06091f4cbf</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_MESSAGE</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a16feeeb2f97a2d01be75432f0d6254f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ProducerId &gt;</type>
      <name>producerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>af06f784481fdf1c74032cbc6870bfdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a8db45b32dc4a0ec952a3b0f2cb283bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>transactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ae42f326e8f568bad2e8eca39b327c1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>originalDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>abcfd6fc1fcbb5a19bffa18b479d82cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>messageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ab4a667fb04d12b8598a02e3711831fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>originalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aceb3df74342d968a73ec58f5bc27d447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>groupID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5bd799ba086d5e268f15ee1bfa42015f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>groupSequence</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a18258e039dcd437826c043a725124b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>correlationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ad9a15456db1f9a96cb98a0a9673ea516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>persistent</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5ebad2c1f4f506a40dc6b7f504b72cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>expiration</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a98f3aa06acf31416393ad74ff45108f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>priority</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a1d6b671888ba01e2c1c791496c39aabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>replyTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aaf064ce7057ae28fdbaf35710adfeb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>timestamp</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a8bb8299f91d7f861e184f3d46ccdbce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aae66a0138f42e7e3fe421d6110ac0b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>content</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ac86d31b060bdf3ce81e84e697a23f116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>marshalledProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a06412bedf3b4bd4fbb29785b5b859fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; DataStructure &gt;</type>
      <name>dataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>adf3feb1437f47ec0cb2672fab52fa558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>targetConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>aeb4b7ef0054c269dfc21086959d73250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>compressed</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a205ad63ffae643e7f1ad9f137b08a1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>redeliveryCounter</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5574cdc2262d1e065429b9d05dbdfa72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt;</type>
      <name>brokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>ac46ca987e129f1dd017027b2653755f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>arrival</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a8f1691fa3dcc46959d71682ffcbaab4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>userID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a94cac2560371c9578fbb132465951ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recievedByDFBridge</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5ae2a0ffae811eb463e993645b776500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>droppable</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a5716ad1ee8c61bfc40c544eaae2ee2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt;</type>
      <name>cluster</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a9847e000b2bba382b74a6095731982a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>brokerInTime</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a8222fe11c45f2b8054f5828fccaf5b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>brokerOutTime</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a44897ee970d76ff984de9c31f11eadb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>core::ActiveMQConnection *</type>
      <name>connection</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a685f5499a4a646d431d483b2a394e518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>DEFAULT_MESSAGE_SIZE</name>
      <anchorfile>classactivemq_1_1commands_1_1_message.html</anchorfile>
      <anchor>a8e59aabded00fd8e94a6b76c8a2d57c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::MessageAck</name>
    <filename>classactivemq_1_1commands_1_1_message_ack.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>MessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a3eb7becdc2c62688b7cf22515aa2ea79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a3355530c0711b3acfb04adcf268eec2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a7ec9f5b6b6cb98d46b7814f23e96eaa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageAck *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>abee4e5397a530c882f4c4eb3fa6fd284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a8c66c0b8e89990fdfeb626ae81b529f6</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a1d9ae2db81f2b27efad8eee1d151cf51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a6feace35079682cba66fcd3887378b60</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a734e1493a1f41b60139ac422d69f7ba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a9d245ac36a2a7d0142c2e8bebdbbd96a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a5f1e5a6d7c72caf32f544a0fe7968c7a</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>ae41466eb6a5e307d38bd0540d3daad96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a8ad3fc81fe16ba4e313f618310b9352d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a6057438edd26ea66d64473a52ab3ef2f</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;transactionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>ae9bdee32a415316300c14abc4867bae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a81f759c1fe85ce0295efefbebc2f1f62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>ad45eb1d20d81545a93c33eb90bacaebf</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getAckType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a7c7f0fc53212ad28f233023d2416cc5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAckType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>afd979b107694d28476f4d35e45edf9da</anchor>
      <arglist>(unsigned char ackType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageId &gt; &amp;</type>
      <name>getFirstMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>af0520852db9219d6de67d6b50c358d91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageId &gt; &amp;</type>
      <name>getFirstMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a219bd5647b3abd64b1b4311379d64e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFirstMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a93c2d0fb00ca8bdb8c93dfe07558eb70</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;firstMessageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageId &gt; &amp;</type>
      <name>getLastMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a2264c16998d9bf1065d5b596eb61605d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageId &gt; &amp;</type>
      <name>getLastMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>ac6fc6473fdfa3d624af16dcfb63f6415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>af56d465f74a57e2501cf71fdb7f8b239</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;lastMessageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMessageCount</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a17e685b68bbbd2820c8adbe6274251d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageCount</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a7448c583510dd00b79b9f89c2a982a74</anchor>
      <arglist>(int messageCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a7fdaa9f766d7197d2ac63c7787717576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a12c8da4905646d2cba829b0a4a5cff53</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_MESSAGEACK</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>ad66a8839efaa82c1168811ebf7df8659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a107fd0d95a2794724855e1f4ff8085d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>transactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a26e482aeecabf3dab47ab9e81e0f732d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>consumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a27f703ae9baee4e7693e6d96acf4912d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>ackType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a0eb477e277368e94748993af82e3fbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>firstMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>a34c9b59e7b242ffd522a3133411112f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>lastMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>aba0789e7863b3c821f2e7b2309ad5879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>messageCount</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_ack.html</anchorfile>
      <anchor>af0a8e39f81f9c34bdc5185979ec17a01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::MessageDispatch</name>
    <filename>classactivemq_1_1commands_1_1_message_dispatch.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>MessageDispatch</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a818eefce99afde26aaee9395c1798ead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDispatch</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a41f93fabee3d87a9f424b33ba85bd02b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>ad8f6249ac4f558057931b95d3390a506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDispatch *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a7ce0fae1b13ecc638621f2c3521f2960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>aa36d0e684c858c2bb1f599d9829ae48c</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a0d104a062700584a2e31fc799ebf063e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a47a41a10708e365ed2fb5e419d46e77a</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>aef7bc97cdf271b2f39aacf06792c859f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>ada882f1f2b4ae5557b94d4ecfb527a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>abc771f289d69709d4961b57f441691ff</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>ab5f0ba4821d28191fac0a98d26cd8e3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>ae2ff9b9bfa194c30c3c62a87b2199d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a6702d64e968e727b8aa79b4126dd239f</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; Message &gt; &amp;</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a276b07c2f07616e2d348cf9cbe747291</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Message &gt; &amp;</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>af783e88ca4a3134cd2504b9feffa1acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>adcbab129e8761bd0dc47431c5bce68a3</anchor>
      <arglist>(const Pointer&lt; Message &gt; &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRedeliveryCounter</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>aad857708f39149ee1650071bc443de2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRedeliveryCounter</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a2d0e569bc9713eaca793250f8d0b38c3</anchor>
      <arglist>(int redeliveryCounter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageDispatch</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>ac536ed69d34cba0f0a4b64a2efeb29ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a06395d2d1df124923a0fdf5e2a3c92a7</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_MESSAGEDISPATCH</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a108da4324bf9046fbbea203ec3c9a805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>consumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a05093718bd358f7f3a051ea5aa1ba60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a837d34ca447932a72a5c995cf51cbb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; Message &gt;</type>
      <name>message</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>aa2a3821315f2a466bffe7bca3c1f9737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>redeliveryCounter</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch.html</anchorfile>
      <anchor>a1cd5401f5b86f15207b4dd3588318fa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::MessageDispatchNotification</name>
    <filename>classactivemq_1_1commands_1_1_message_dispatch_notification.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>MessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a9e719bbd1d6a28f18747af012fdf6158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>aa62536d9611321bb5f26d80cd50cb99d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a8b786461cfac6aa83af97eea011b313e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDispatchNotification *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>ac17a56f182ca56a955651876ea374137</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a107b5b22130099ab1edfea61680283c2</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>aef062f3efa344c64f1adf5d5e65258a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>aeaca79131f6a72753b0493cdd84e3b54</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a4dcab78c922549770ace39a420a5baa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a455e7be70e8416a5dc69bbbd61cf81d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a65b753bff326769affdcd052b38d018d</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a27bf5b6bbf775d9831c2d7179d104540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>adbd40e4d11b9e17b2e4e5bef7e88d2f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a22731eaf6b0aa8db4ab7b2432b4c0f34</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getDeliverySequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>ade198b7620f7acd0da8ec68833bd1e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeliverySequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a324dd64abb745b1479768277c9fd83dd</anchor>
      <arglist>(long long deliverySequenceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>ad0bed6e9094e2d64c4ff8fc6c8bd0f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a78968906b893743f2a6c8df83546646d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a19884d820fb165f825d7c90d1303755f</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;messageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>ab08e81ad50705649869bb04ab0d57ae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a175b04b6e1e741479f25e78d7ac5a3c9</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_MESSAGEDISPATCHNOTIFICATION</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a61a83e7cd859917e8121dafe1e74ded2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>consumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a836f06da7518a64e6ccc17d1ed4e3e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>a16013e08dce56bc6bed5d6c3da1bdc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>deliverySequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>aa9fa1b93917fe2a0304da708852dd1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>messageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_dispatch_notification.html</anchorfile>
      <anchor>ab7a9776aee12276609d74457a0ad769f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::MessageId</name>
    <filename>classactivemq_1_1commands_1_1_message_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; MessageId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; MessageId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>add975dcdb712cb091847c3e3308d3e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a432fe2e948fba8f4fb9d425b7375acdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a052ee73176d659d35d2195a6ca9d96e9</anchor>
      <arglist>(const MessageId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a26e3f80a7cca854a75b7675442533224</anchor>
      <arglist>(const std::string &amp;messageKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>aeee1c3966bb8c9b47edd7daddccd6051</anchor>
      <arglist>(const Pointer&lt; ProducerInfo &gt; &amp;producerInfo, long long producerSequenceId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>afbad1b8f6b940505898de3f035b9b685</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;producerId, long long producerSequenceId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a79e200c56755dfc98862f7b23fc8e5a3</anchor>
      <arglist>(const std::string &amp;producerId, long long producerSequenceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a37e350d2e7dbed4ed152ef6edd61145d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a652a33d6cd76f5cc6e64c5328b1d9028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a2ee534af81b5693c56f32c4bd8f416d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a197378521ebd8a8381561665bccd23d2</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a7d42b3026d6fe3717a4b4c9d556edbbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a622c27db9b4681ea8fc8b2a3195b331c</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a48b2d1c5257e8f56503a4a5371ecd0cc</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextView</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a7df0103e6e2299b1e45dc3a53943e719</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>afdff02bdc701ca33d373316a6b6cae3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a977b5861500c248588ca53c7684d1f2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a2ed31c762142f7d84131515d18dab580</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;producerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getProducerSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a428183b4a58bdfce081cf06b07a680a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProducerSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>abc36680bab2a4b79c75ed09c4c7f889a</anchor>
      <arglist>(long long producerSequenceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getBrokerSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a0fe09c55694204ca2db4b86903f4af03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a28c95b366c3dfe0c597b63a5f53c8ab5</anchor>
      <arglist>(long long brokerSequenceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>afaba5cedcda0549d845a5f2281756dd4</anchor>
      <arglist>(const MessageId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>ae9218d264cd121e35e0a94eba70f78fb</anchor>
      <arglist>(const MessageId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a1e6e6933be7ef9b773bf7e455eb2a1d0</anchor>
      <arglist>(const MessageId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>aaac4fe9fe889784cf0c440705d56eb59</anchor>
      <arglist>(const MessageId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>MessageId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>aab28d791ebdcd016f33001e57eccd38c</anchor>
      <arglist>(const MessageId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_MESSAGEID</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a0cbe1dd7d4bd525aba27dd48fc37be62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ProducerId &gt;</type>
      <name>producerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>ab18b529dee3c3401c6f2fb035b207ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>producerSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a3993f9bfd08cc764985a7f7a60ed12d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>brokerSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_id.html</anchorfile>
      <anchor>a63f2a59d596642bb68fa49232bd1389d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::MessagePull</name>
    <filename>classactivemq_1_1commands_1_1_message_pull.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>MessagePull</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>aed1361ffbeb847ec9a5ef27d3f1d117c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessagePull</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a9e8af6ec905b10abc0f102af6c6e713d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>af717a525dbb3d3f3769e54820044814e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessagePull *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a97fdf61614b98cceb0e373d5db75aeb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>acb00244d53815f27132e9b2c8276f9f6</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>aa8daa18afc84f1d0bde38851db66464a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a1178e810397f9388406609d841d12fa2</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>acfeec084a47175f4686d65e7adadccf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>ac558bb4dd176da9616c700ee6348164c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConsumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a178897666e13710543e2a024145cf0d0</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a1696b849d82728852f93d5d4f0f8ecc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a8d157513ee0ab4c9d95cbbdd5c38f6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a37e815bba8e97adc2f2dd725a1596f05</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTimeout</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a4bd736ce11629fcb5f96d8cb32fd6635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeout</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>af811708230606f453bdcd5d61230da92</anchor>
      <arglist>(long long timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>addf517336882df3fe45fd70b7fef9271</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a2755c3b3fb3bef8f9bef8a9c15c84fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a10973c461c02a7cb4925d6af279dce47</anchor>
      <arglist>(const std::string &amp;correlationId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a3571055ddb3f54b2aa7213186201642e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageId &gt; &amp;</type>
      <name>getMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>ab4d0e872d6ce8660f320398de6f52301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a0cfcc132c450d126742953827f030546</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;messageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>aaedfb18a00d2eb880f91a3e0cebca3d8</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_MESSAGEPULL</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>ae77b3b2979174a00370e6d386b18ca99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>consumerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a338e95d6695d0678e17f06a134f6bc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a876fda6d8ecf29ffc6801bc402361133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>timeout</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>ab1474b0eadcf34558fdb273a32efa37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>correlationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>af3a43480b7ae473b7abd5d536bd28b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>messageId</name>
      <anchorfile>classactivemq_1_1commands_1_1_message_pull.html</anchorfile>
      <anchor>a4152daf61d17933a1cb25958b593c0a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::NetworkBridgeFilter</name>
    <filename>classactivemq_1_1commands_1_1_network_bridge_filter.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>NetworkBridgeFilter</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a1782bae6bee1478e8b95202d4f24156e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkBridgeFilter</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>ad5ca9940d5eba1447153d3741153cd8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a4b9d896d408dafc38b575141f2290f94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NetworkBridgeFilter *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a13f7dd35c0db05a874754fdf31179b8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>af0ea3e1d705142dca30a9786a85719b5</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a9e4f3d5503bcaecf6eed7ac55e403ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>aed59c60ffce108bff7621839d6649868</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNetworkTTL</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>ab61cb9bcaf3c068b9bd855fa02417915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkTTL</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>ab56187c9178e131c3ad460d102a42d3d</anchor>
      <arglist>(int networkTTL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; BrokerId &gt; &amp;</type>
      <name>getNetworkBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a83a2d3fe97781d61b6b2a8f0258927ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; BrokerId &gt; &amp;</type>
      <name>getNetworkBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a9c91002c699561193a7a3538ebe9fd8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>ac713fbe9ffb5a191e297892f9d3243c5</anchor>
      <arglist>(const Pointer&lt; BrokerId &gt; &amp;networkBrokerId)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_NETWORKBRIDGEFILTER</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a99d57d48003eb595ff7c39da49ecbbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>networkTTL</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a0613aeffdcf9235d257bf523274e41aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; BrokerId &gt;</type>
      <name>networkBrokerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_network_bridge_filter.html</anchorfile>
      <anchor>a602362f3447ea1379e545017b592c4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::PartialCommand</name>
    <filename>classactivemq_1_1commands_1_1_partial_command.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>PartialCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>aa3fbb448a57b3d9f5612fe0079550ac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>aca737738583155af649ef380377caa91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>ab802dd02c2541139c2c390b4bfae82a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PartialCommand *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>aa54ef49f58391d4a3159cd9f2db67971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>ad4977da5dadd34179b5b61108c13f086</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a7901a38c097b85d91b6e58d7ab02b51f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a1411af3d69602b3cb6b809add9e6ff6d</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a98ac1924fa6ae0818958d21c64542337</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>aa7fa12330f209bc60ddd7b635abd520e</anchor>
      <arglist>(int commandId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>adb38b9782cb21211f2fee059170f0a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>ab3696bf3b1c769625cecc84673e598fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a08c41023b3117ed5928a6a9264f22076</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;data)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_PARTIALCOMMAND</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a2638e4d4cd60e4c2a81729d0ec340c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>commandId</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a06c795b1a546451c8ec7c1fcd8d87fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>data</name>
      <anchorfile>classactivemq_1_1commands_1_1_partial_command.html</anchorfile>
      <anchor>a9237106df947712e8c62760ca380395a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ProducerAck</name>
    <filename>classactivemq_1_1commands_1_1_producer_ack.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ProducerAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a5b24449080ce222c1836eff5c4b48d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>ae4fc0ddfb4ca5697447becdf67787126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>acfc846a54df0b3b84fb41918b481e6df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProducerAck *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>aed1a8af68fceeb5914c313a2545c621d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a3965e32c7b618b7279607ec1dde37940</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a9a74573ea6c79d189e7e8408bff2838f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>accca1dd9b92c6306392c480567a5349a</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>aee3b08a76ba9fef2f6f982ebc194ac5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>aa2e1eca3d78816289fd3c348740d46f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a4502d8515896ef9e9e2cae2f59a995e0</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;producerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>ae50be2939868f272ecaf6ec6358f5f16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a1423fe53af01c40f8b233c1be21a64b9</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isProducerAck</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>afb37d453787d67d3f69227cbc83479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a94d2cf6402c1236d9a03845afff3f4e5</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_PRODUCERACK</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>ae55b3943377b9336af3e549ce51abca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ProducerId &gt;</type>
      <name>producerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>ada1c909c9d82896dc27bfb0e14e5414a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>size</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_ack.html</anchorfile>
      <anchor>a3b751ffc2e24dfaed49beff4881cb54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ProducerId</name>
    <filename>classactivemq_1_1commands_1_1_producer_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; ProducerId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; ProducerId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a0d307a26b289d94f13c2f185a97e05a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a1337bd7a12e81f18884670c1f8157ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a60aa25ff6cfe5d0c97f589a610b59dd4</anchor>
      <arglist>(const ProducerId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a81c3ab823c1851750af59a0f41996d7b</anchor>
      <arglist>(const SessionId &amp;sessionId, long long consumerId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a525572286db29b7b673e4e8e2a5f8076</anchor>
      <arglist>(std::string producerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>aaf21916577e7c4c2adfc3f7b44ac819a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>ae88e9290d6992d3f4fae8acc44fa0b61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProducerId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a07f4fff6c839d0a64c91eabe745a0869</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a19b44ee8e772203ef946e797c47cfeb1</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a28827079c0919f3199ac0362e35dab9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a61bc864d94d9792dfddb34858f3d9e44</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; SessionId &gt; &amp;</type>
      <name>getParentId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a3e1ddaa620101babdf6db3f8f6b6344c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProducerSessionKey</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a0db727af375877a64962a874068d596f</anchor>
      <arglist>(std::string sessionKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a99d9b4a6d39f99aa914b0c25d1e6f9b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>acfc56d3074adff5845f1743b712e2a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a5941e244a032c9532ccc4f85510295a7</anchor>
      <arglist>(const std::string &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a1b45188775472cb729ec6d7e05476d32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>ade172fcfc819fe672a834e076a628e4b</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>acbd8d7adbbee4da3facc4a22968003f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>ad98577dfb71b2a94ed4eed483d53e8ca</anchor>
      <arglist>(long long sessionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a3f6478b5211913907e3d0c1b814dc9a7</anchor>
      <arglist>(const ProducerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>ad3842c870f262686ea12066ea18cc378</anchor>
      <arglist>(const ProducerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a8f12aa38658442122861ec8ea640691f</anchor>
      <arglist>(const ProducerId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a3657b9a7889f31fa0c2dd15f72069ab1</anchor>
      <arglist>(const ProducerId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>ProducerId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a11e7347dd7587a911a91557efc9ceed0</anchor>
      <arglist>(const ProducerId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_PRODUCERID</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>afea09169c3f2ab89a3a1ce8b022f442b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a5770b607c6df910b969701d6efffa3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>value</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a6779239951c0f1b65cb9128ae5e1f10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>sessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_id.html</anchorfile>
      <anchor>a2ecc9ea3cc9d48e6b91431bdb7d0b075</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ProducerInfo</name>
    <filename>classactivemq_1_1commands_1_1_producer_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ProducerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>afcec1f938fdb86ff2c9b1b30acd9a067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a2e0cae72eed9ca51c46d9cb0dccd39a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a1b5a2ff65941cd180c5d4af86dc65e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProducerInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a236f77caba34a3bf688bc3550a5225b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a8ddcc7805c9bc15b891161a1c4cc80c3</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a6a60efcd2a066f8d3f649e55563b44df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>ad45d6a570b88c2ec7a3e75042a5d2115</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; RemoveInfo &gt;</type>
      <name>createRemoveCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>aa3802e6958391efe32f089d439433606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a409ea47736baf61ee5c9c6e7d8b80a4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>acb92d155ca27bf7e35b59848782a6c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProducerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a419b2fde4493b7bd979d609d2801c260</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;producerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a89f963dad27df785867e63491a15ffb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a9334b52e5bc634c09a5bf1098d999db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a388653c1ddfb7c54523e41b727c70707</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a4d343067b475404bc6303c2377f5f9d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;</type>
      <name>getBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a0c01e94e775a8754216a3bfe7468adf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBrokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>ab61b71de7b5c23681bbb1d409a2b72da</anchor>
      <arglist>(const std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt; &amp;brokerPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDispatchAsync</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a96a33b1493d39caa4012c5c4c630e164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDispatchAsync</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a2046a06194926ef225c57352263945b7</anchor>
      <arglist>(bool dispatchAsync)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getWindowSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a2b9afd6191900f3e1e4daec9f61448c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWindowSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>aeb3924019d66a89eec0650c8b78c2980</anchor>
      <arglist>(int windowSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isProducerInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a158aa70b1a265558bf43b66cba677b52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a9a6ab0e8dfa63f486a672f39be2084b8</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_PRODUCERINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a24cfdec972f654882f92c41905ec7d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ProducerId &gt;</type>
      <name>producerId</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a47bf82bb4dc05f6a4c595cda20fb87ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>ac4e28a208748b7550874dc4f77844265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; decaf::lang::Pointer&lt; BrokerId &gt; &gt;</type>
      <name>brokerPath</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a41b98779a948c9a193d42007d6b774be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dispatchAsync</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>aa7f890a6c844d5551eb75bc7de5eb4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>windowSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_producer_info.html</anchorfile>
      <anchor>a954eb3bc4d2e6358c030c5dd52d2a177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::RemoveInfo</name>
    <filename>classactivemq_1_1commands_1_1_remove_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>RemoveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a7bb4d8f59329f2327daf743bc8ec59bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a07eab3ae2ff124edb1793dbfc3173deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a0c1777d5be92ab697e4715fd531868e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RemoveInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a1b32e38ef2ee3327344329cf72216d3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a63781a0e2c1e327545af5acf304c15c2</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>afd9a18a7e41a75704ea1f21438b3b4ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a078027ba09e28dd353e0f6ec55bf1e4b</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; DataStructure &gt; &amp;</type>
      <name>getObjectId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a7503607c0d57852e8351721e1cc85b3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; DataStructure &gt; &amp;</type>
      <name>getObjectId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a0421ce0e4f13b09fc2c5fdd6c9bae5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setObjectId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>ac19dd8b6807a6a91ff40753318e1175c</anchor>
      <arglist>(const Pointer&lt; DataStructure &gt; &amp;objectId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>aaae7a9230d6f233eb4a0a5d014db1b15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a379a5339fece1b3e0bd46a0ac81bca0b</anchor>
      <arglist>(long long lastDeliveredSequenceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoveInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>ac8045094242bc084111156c7fc8928db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>aa8d2bc009e6a75d7f61cd4bc2b1babe7</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_REMOVEINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a068b2f27d1185725632873bdc95685a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; DataStructure &gt;</type>
      <name>objectId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>a9b15a671f97153dfa9fd0eeed99a0fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>lastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_info.html</anchorfile>
      <anchor>ad23323a81cd2e4a5fdfd635aa9e3c196</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::RemoveSubscriptionInfo</name>
    <filename>classactivemq_1_1commands_1_1_remove_subscription_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>RemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a1fc12d3088442f3016a69bf59b94b70e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a1603b93277f16e9607c0a5e385bd95c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>aefe02f8d00b53df605deefb21b33a22a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RemoveSubscriptionInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a9716647f07b7210c2e1f6e3191f1e07e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>ad210f08e24c3f737c45a14ec59d3cd72</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>ad57d1c783e1205f657127751cf153814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a92112963d14d01585ee3a93a3c2b277f</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>affc3c8b7bd21a9b1cacfe369d6f8f022</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>ace308796607e97002e23bfb0ee3828db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a13448b97bef92a3f9a64dd2b1ba2618a</anchor>
      <arglist>(const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getSubcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>ac1f68583e78e855264e74d215cb36969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getSubcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>aa8157e84330ac2ac3b6cce5f47a93dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a35b1707099266ecc9c0edbf2cb6b9b31</anchor>
      <arglist>(const std::string &amp;subcriptionName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a4dc4d915042a6ea4151977e28c29e105</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a9ef16b9d2d392b717cdf3c2ec4d3e2bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a24f8daf61d1f304fff4e95942f7d263a</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a31fc98d5e653c12e3f027f492447122e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a6fd51d2ee10dbf9a9b37f3ea9dd29c16</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_REMOVESUBSCRIPTIONINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a6ce39cb790cc4b52d8386cc9405f79eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConnectionId &gt;</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a9a34e76fd66eef4a45d44f2c19634895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>subcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a35d372aa312be80c8292bf3ac3599a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>clientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_remove_subscription_info.html</anchorfile>
      <anchor>a568681256f3a1082050c6e584f8f359e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ReplayCommand</name>
    <filename>classactivemq_1_1commands_1_1_replay_command.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ReplayCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a4d4f84728d34fd9dd9ba9a5bd94c5ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReplayCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>afba151c2257d68a3504bae913388c1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a92086f837fdcb0fe02214866bbc5c449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReplayCommand *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>ae23f4ae10edc7ae9f1433934a292d866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>aa0150756c247880f7a4785de67bbd11f</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>aed1c7c33f53e62238d9539d2f307ba19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a05338266b72b32ede2f6299c4352b25f</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFirstNakNumber</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a997637f6bae471bd9c54f70b626b4337</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFirstNakNumber</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>adb1cf9dabae0f15b2fbfafe47f011b6b</anchor>
      <arglist>(int firstNakNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLastNakNumber</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a5ea03867841ff4ad133979aa3a0d46da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastNakNumber</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>aa608f2e54f9afe19eaf2c613a3c07f8d</anchor>
      <arglist>(int lastNakNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a57e0c7da8a404c2caffa46cf655dbbca</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_REPLAYCOMMAND</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a9ecf0e25978ece531ee26ced3c9d2150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>firstNakNumber</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>a613cb3ad5b3ac9aed8064b4017dbb405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastNakNumber</name>
      <anchorfile>classactivemq_1_1commands_1_1_replay_command.html</anchorfile>
      <anchor>ae42ced43929e4cb2162f5be87023b43f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::Response</name>
    <filename>classactivemq_1_1commands_1_1_response.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>Response</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a41c243355303730c5ebfdb982d4b6170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Response</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a53161d9f5b4da20f329d656b156e02b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a2e9f76dce603e33faa1ed7700ec37b80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Response *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>adbe84fc7c49903a3dd33951ce3c2dfd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a591a3954d8ffc86d023fd0612ab19d63</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a214e6b28d1e54207b62f77e61080d05e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a0465ce9bc8e31d85eb0ea08d690a367e</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a2491d171e8addac76374924b94196937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCorrelationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>ac6ffe160a76de7d9cd7e1560fe4bdddf</anchor>
      <arglist>(int correlationId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isResponse</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a30ce3754bafbdaf553b5725255cbbb1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a2d1440848acba1a624e7e00f04277b62</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_RESPONSE</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a54a5d9594d227435a1d0d4af7a13690e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>correlationId</name>
      <anchorfile>classactivemq_1_1commands_1_1_response.html</anchorfile>
      <anchor>a7798238e686bdc625aec03fc45585a60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::SessionId</name>
    <filename>classactivemq_1_1commands_1_1_session_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; SessionId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; SessionId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a2c5d110afea4668ef04b8970825f680e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a603fcebce7dc5f1ca7e04ff35a6b5f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>ae48b25c59f9a06a9143ad9365d33155f</anchor>
      <arglist>(const SessionId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a4e3e8ac1d134426b470921f6c1b2f74e</anchor>
      <arglist>(const ConnectionId *connectionId, long long sessionId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>ac3367085130194e040853c2409fb52cb</anchor>
      <arglist>(const ProducerId *producerId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>aa8d8769bb143be4eb0420824e2cf3ece</anchor>
      <arglist>(const ConsumerId *consumerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>ad18684f9e31daab6a37c18af4ca58f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>acdc9e8c044fe5cf555d32cdcd4018894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a1de3c82fd482ba85077f8b3e5d291603</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>ac69c393be939cb82bf6686dfc0a6c650</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>aa84d8add7cc504430226ca6631e25b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a5289e7fa218860ae42f575e2734c7eb4</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getParentId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a9133c1deaa3d55e7074b2a57bddfc810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>aa66bca3e4e575429d5cbd6ef55aff7e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a2e891024e3b900bd4f7c2f577b4ac6d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a7ab6bb362c62ff7061b99964402b27b5</anchor>
      <arglist>(const std::string &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a42ea370e6dadbfc0d9f0e1371aef3888</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a7ca6be7aa24d8eba3b228174cacd3fc4</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a58eb6d6ab3d80a912b00231eedac8594</anchor>
      <arglist>(const SessionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a5f80d712f789116354a996e6b188c860</anchor>
      <arglist>(const SessionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a4d92508f52b20696af7168ff02554117</anchor>
      <arglist>(const SessionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a1394fecc00d2a0724b6ef23bb6bf3f3b</anchor>
      <arglist>(const SessionId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>SessionId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a892d220c8b2d6b9ab95239fedeb146a7</anchor>
      <arglist>(const SessionId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_SESSIONID</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a36677b888476e90b75f2f172ade37747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a6c55a247cdb20237825e7f66acc42a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>value</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_id.html</anchorfile>
      <anchor>a5ff98cfa42cabac6333f4fbe6d72ea54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::SessionInfo</name>
    <filename>classactivemq_1_1commands_1_1_session_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>SessionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>aec8d276c5a9c6ed4a8bb27fa4d3a4423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a8eaaaa53675c4b8c237847048ab446ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a3f112ae2de525d5c5ba17d4bd0db877a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>aa3ab2ba67ebc98f8eb0292d47e7f7112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>af195709b55f9f6ad4f3ddfc003ea694d</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a9a967646140459c69555cfa46db9c632</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>abb7355bcc9c62b5d79c55b75d3102616</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAckMode</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>af993c65c9ca10fe81b27f75fffec1e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAckMode</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>abcba76ef6f951a640a97c383a38fdd7b</anchor>
      <arglist>(unsigned int mode)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; RemoveInfo &gt;</type>
      <name>createRemoveCommand</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>acaac389ea9e1ac16bbfd6da19d30f53a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; SessionId &gt; &amp;</type>
      <name>getSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a72c6454f0cc5cde28630cbfce5b91630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; SessionId &gt; &amp;</type>
      <name>getSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a614604bd9bdd34dc68e712fd334718ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a6d48c63c25c7e8ff989bf04c6003a3c6</anchor>
      <arglist>(const Pointer&lt; SessionId &gt; &amp;sessionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a7e51d83679ce266368fe138faf166c63</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_SESSIONINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>aa415366b50637c66096c892c471a5079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; SessionId &gt;</type>
      <name>sessionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_session_info.html</anchorfile>
      <anchor>a963b48b86dbae069f714db04f660bb37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::ShutdownInfo</name>
    <filename>classactivemq_1_1commands_1_1_shutdown_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>ShutdownInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>afe8ad21a8686edc9ca943e23182ce64b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShutdownInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a552c71da71a24dc880ed124f5a724348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a37d585e447a9dd68fd7f836b0f801c6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShutdownInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>aa864ef09f4da9824604b930dd0f13b5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a45b45ef3d19dd7464517159d2d289cee</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a82a2e31ab1c5a5ffd3baccb1773e083f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a1d0cec0b788199805a573f8e820480d2</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShutdownInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a563679a592450b4188906bafdd106988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>a5fa6e3a721808f0af736e5881e342b19</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_SHUTDOWNINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_shutdown_info.html</anchorfile>
      <anchor>aa88efc8a0fcae91781a02f2ac6e3bf68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::SubscriptionInfo</name>
    <filename>classactivemq_1_1commands_1_1_subscription_info.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <member kind="function">
      <type></type>
      <name>SubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a08cbd49f3b14c2be27692cc4485ca9e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubscriptionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aa4838adb8c22eddf8b4b79a92a4723e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a2945ebd17713edf5bbacedd6fa78bacd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubscriptionInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aa07531e9bd2fc9474e202fb2ec8a6280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aa71804cc9d0cedc68fbd3abb673cc18d</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a1b93575c96ebef22d2f90867f02d8fd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a33bbc938114d8648aeaf79b676711ff8</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a72eebd817a23ad020ee693215960d814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>ae9af06f4aa1150f45fd276203351e55a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>ac31b060bfebf2019431f21917c9e125f</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a4ae7b2f515cc0d00833d7991de129136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a59fa8036dea106dacae96b9f1c015730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a711f0d5ad9dcb5ba1fa8d1da35480ad0</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getSelector</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>ae77f41c271288200dcba0f66cd3886b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getSelector</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aa09be5b910af9f845094a7ae3599ac8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSelector</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>ab4ae5122623876a7d3bf4c24fa9aa3f1</anchor>
      <arglist>(const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getSubcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a8014ed23fb3be6638a94965108f9b935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string &amp;</type>
      <name>getSubcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a38b263acd0ed2ce05a58556d22db4c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>abb7a6bd2fa67b767d9a5e8204324cf3b</anchor>
      <arglist>(const std::string &amp;subcriptionName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getSubscribedDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a39f21fe30be3cc7e1d40d561de65d6b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ActiveMQDestination &gt; &amp;</type>
      <name>getSubscribedDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aed3f1c9bf1066aceab18fbf474846a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubscribedDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aae42a45b1b5efa5bc7c19df8302a95c9</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;subscribedDestination)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_SUBSCRIPTIONINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a3f0bc171b4b78c5045436efe326766fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>clientId</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>aaa3f776c2a099538d785309e9bce1221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>destination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a066088c1123530d47940e823ec82c2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>selector</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a283a6705fc21ae98e102d74c3b46d296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>subcriptionName</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a392b08cc67e210375449984559567e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>subscribedDestination</name>
      <anchorfile>classactivemq_1_1commands_1_1_subscription_info.html</anchorfile>
      <anchor>a0aa3a492e13503308a22b2fecd233e00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::TransactionId</name>
    <filename>classactivemq_1_1commands_1_1_transaction_id.html</filename>
    <base>activemq::commands::BaseDataStructure</base>
    <base>Comparable&lt; TransactionId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; TransactionId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a7d995c842f653467141dc681468c347b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a539343cec88ef796e6022d6dba148730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>aecc442541c13cd895533da916ef6b59f</anchor>
      <arglist>(const TransactionId &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a21f1015975bfa15dbcf63a6d20484d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a452915adc64ffa834513dd7bbadf7866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransactionId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>aa06c2db094a84537d29887291b8607e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>aba76141b9825a1845557f77e1bb9da10</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a696a4996cecc235b04f35653cf8946e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>ae3530e9050c30e75f80db900084e9a30</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLocalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a11e32117acd02a42816b15e852b8d996</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isXATransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>affcee84aea5b76de24da6117016ea539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a105bf66abcb7aaa5632fcda0bd5cb2fb</anchor>
      <arglist>(const TransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>ac85773b3672b437978949eaf70d283c5</anchor>
      <arglist>(const TransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a2b02db46c5dbf2b50f507ebfae7a29b9</anchor>
      <arglist>(const TransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a7653fa2b06c799b168dccacb3d01219e</anchor>
      <arglist>(const TransactionId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>TransactionId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a63037c7e48b1e772128951ccaea6746b</anchor>
      <arglist>(const TransactionId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_TRANSACTIONID</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_id.html</anchorfile>
      <anchor>a23172e8c485ad71fe4f1261c8e91aaf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::TransactionInfo</name>
    <filename>classactivemq_1_1commands_1_1_transaction_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>TransactionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a124879428c6a4735f513718aa8c0330a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>ad837993293db737ab37c5a5bb5949500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a378b602560921f0604135b5f2698cea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransactionInfo *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a25ca4692bde08c466334e6f38b1b050a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a97aa0c98b5e3101a85f206b13c05c8f1</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>ab7c3f4fb7e64152f1ddd767b5ca5230f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>acf1c69863934a68486a6e18c724fcad8</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a2cb65d8aee35fe77a7eed95b623b0fa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; ConnectionId &gt; &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a6aeafac19036a39f2042fcdd7374ab56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setConnectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>aae82448270305605c474890593475e15</anchor>
      <arglist>(const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>ad7f6ce02c92d79fb4ed8b0daf3d996b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a3910f1f8857d40deb2a135dec15bf7e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a818661b968cb8a13237caede00949df4</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;transactionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getType</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a31fa9be8a47e579ae9278c74a930f01b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>ab761b9f8647a60555df78f15302b3a47</anchor>
      <arglist>(unsigned char type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransactionInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a08c88d93bbdcd3ebc211448577780e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>ac17cd0819101fcd52751cffbf533d350</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_TRANSACTIONINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a1353861b591e1e8250a5e816a4f5ad38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ConnectionId &gt;</type>
      <name>connectionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a7f8f8f1317172ff923f9aeaee21cd228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>transactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a300040fc5f716b671bf1677038d765ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>classactivemq_1_1commands_1_1_transaction_info.html</anchorfile>
      <anchor>a0b6ba6fc1e6c04a55a3c0d382e78b09f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::WireFormatInfo</name>
    <filename>classactivemq_1_1commands_1_1_wire_format_info.html</filename>
    <base>activemq::commands::BaseCommand</base>
    <member kind="function">
      <type></type>
      <name>WireFormatInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a343f20c9d400458e88ffd5a56e8db287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WireFormatInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>abafa49d339cbab9aefdf30399ce798ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a431177edb68bf18ead1a46b662f18496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataStructure *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>ab436c24a90ab1263252be5af3714a389</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a5fc26623fbd31918de1be937e2e270e6</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a9eaacf8d79211842f8d4b2b01c5366a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a29f1435f8ada789c21142d3d12f8315b</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMarshalAware</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a2fc7025b593b72314b78fe981f8ba66d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>visit</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a8747474113240a6e7159b5f31d26211e</anchor>
      <arglist>(activemq::state::CommandVisitor *visitor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVersion</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a1af8e260398677d2a3a3686ab262503a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVersion</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a52d4a4c6d99dba7d8e3baaa0182d048d</anchor>
      <arglist>(int version)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getMaxInactivityDuration</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>ac194c24038e4a43609ebb80755aa6ace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxInactivityDuration</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>ae73f433a4090965ac191205a1d3c1b52</anchor>
      <arglist>(long long maxInactivityDuration)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getMaxInactivityDurationInitalDelay</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a99e0ea80a3cfbabb55df546628cc6c0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxInactivityDurationInitalDelay</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a0c9df1eac6da00abc85f358fbe297dec</anchor>
      <arglist>(long long maxInactivityDurationInitalDelay)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStackTraceEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>afe95653805b31135a395aba5d7033a72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStackTraceEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a04360bd30e8650fd2d36293663539833</anchor>
      <arglist>(bool stackTraceEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTcpNoDelayEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>abc74e1712f19ba60697cec0d9fa9a9e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTcpNoDelayEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a94a957561c0e5c039ce4c984da4c197e</anchor>
      <arglist>(bool tcpNoDelayEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCacheEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>aee399b62363119b4d4f0d69cf69fd14f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>ae2f0fba8366faf389fe0539d7574c7b0</anchor>
      <arglist>(bool cacheEnabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCacheSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a77181a69ee3159a3539d2940a4f32596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a2f17aa588ff07f4b03d9a55030148dac</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTightEncodingEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a76598c793a8812123ba5caf4977b4fbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTightEncodingEnabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a50487a2e2198dc9970e2e1c13e19886a</anchor>
      <arglist>(bool tightEncodingEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizePrefixDisabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a1f983c2840f4063f817d2ddc4f278ece</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizePrefixDisabled</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a9c5a11db16f6d8586e69f5178de9f8b9</anchor>
      <arglist>(bool sizePrefixDisabled)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getMagic</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a1250edbd36a4c9847bc58cbd6d2ec832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagic</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a61d0ce2ab36a58e2f78336dd1cd1448c</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;magic)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getMarshalledProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a155f328db7cbf96f56a3eb96e912e9a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMarshalledProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>afa41e8e71d8b66c6dfb6ecf006e1e581</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;marshalledProperties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const util::PrimitiveMap &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>aad146a96905cf07383586dad982fd361</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual util::PrimitiveMap &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a5ddb2ceb7f6d5b5af85bdbe38ccb2ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProperties</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a9ff8c6f0d0e536ca9a9775652d83d4ce</anchor>
      <arglist>(const util::PrimitiveMap &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>aae8b88d5ad906b1cf147408aea44f527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWireFormatInfo</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a3cc53e28cb7aeaa6d83598d2ec9701eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeMarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a580f1a57d0598b27cd100d1be5c34496</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>afterUnmarshal</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>a17c632281ad6ba0b1db22029b2df8f6c</anchor>
      <arglist>(wireformat::WireFormat *wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_WIREFORMATINFO</name>
      <anchorfile>classactivemq_1_1commands_1_1_wire_format_info.html</anchorfile>
      <anchor>ad2c491dc02653a6809acc7850b663e54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::commands::XATransactionId</name>
    <filename>classactivemq_1_1commands_1_1_x_a_transaction_id.html</filename>
    <base>activemq::commands::TransactionId</base>
    <base>cms::Xid</base>
    <base>Comparable&lt; XATransactionId &gt;</base>
    <member kind="typedef">
      <type>decaf::lang::PointerComparator&lt; XATransactionId &gt;</type>
      <name>COMPARATOR</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a6d2b79df17cdba873daef33ae0c707bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XATransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a2c8655e67fb7ae8bbeb2d85de3768062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XATransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a7ad3a097f754a1e41c9208203cdd409c</anchor>
      <arglist>(const XATransactionId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XATransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a920a3c8b7376abc65de5d7d48c748649</anchor>
      <arglist>(const cms::Xid *xid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XATransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a9ace4d2793f2f14b9a41c3a1b8294445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a6d8865181ad5fcdd997f1c2ab7ffd21e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual XATransactionId *</type>
      <name>cloneDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a9c0e3f31c593c49f89aa528a8d239f90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDataStructure</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>ae6ab12a8c342cd63afb7dd8d15ebabc0</anchor>
      <arglist>(const DataStructure *src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>af2025e550e04e4887b1dcad84068baa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>af6da58fb4d7e1019b62c7b968a1f97d6</anchor>
      <arglist>(const DataStructure *value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isXATransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>ac8ba78914371af7c6ec849550d352125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Xid *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>ac7095ac33928918948dbb63ffb156586</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a4be4c2c096323264bf5aba978438b8fb</anchor>
      <arglist>(const Xid *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBranchQualifier</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a454f9206c4ff2861589111346b208971</anchor>
      <arglist>(unsigned char *buffer, int size) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>abeda519a1e5cedb9d478ca88c0320fa7</anchor>
      <arglist>(unsigned char *buffer, int size) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFormatId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a44d6c4c5cec8e4076b5f47ad97f7e337</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFormatId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a9697befd7aca45dc8633513fe71a4769</anchor>
      <arglist>(int formatId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getGlobalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>ab90ae5dacee560d9ba3f3949ce65c2f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getGlobalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a8202c2fbe1d32cb41b989a13793f104b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGlobalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>ae5bce995d34467841b45e9dcd1e8f1eb</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;globalTransactionId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getBranchQualifier</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>aec191838531d865a8c73af14c96346b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getBranchQualifier</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a5cb900b47969e5134d0007e0f4d0ea7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBranchQualifier</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a16c42c2e06916898bc40d71ca2f29a67</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;branchQualifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a0b9aa6277329034afee9cf571d232ba2</anchor>
      <arglist>(const XATransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>ab65e72d000219348404ff147feac656f</anchor>
      <arglist>(const XATransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a96b60b86d95d5d5dec8a144f279f387d</anchor>
      <arglist>(const XATransactionId &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>aa434df7eafb96fb9ab731f392247b6ad</anchor>
      <arglist>(const XATransactionId &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>XATransactionId &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a57f1ef3b79f9ce7bcea6590fd08a791e</anchor>
      <arglist>(const XATransactionId &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>ID_XATRANSACTIONID</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a493f5ebafa0f55eff6451f9d6a9f6a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>formatId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a1af246726f7ce7b5e76b889bf937e8ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>globalTransactionId</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a748c99652d813daad6f90a457516267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>branchQualifier</name>
      <anchorfile>classactivemq_1_1commands_1_1_x_a_transaction_id.html</anchorfile>
      <anchor>a147a28f75d217aad574008048d05d340</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::core</name>
    <filename>namespaceactivemq_1_1core.html</filename>
    <namespace>activemq::core::policies</namespace>
    <class kind="class">activemq::core::ActiveMQAckHandler</class>
    <class kind="class">activemq::core::ActiveMQConnection</class>
    <class kind="class">activemq::core::ActiveMQConnectionFactory</class>
    <class kind="class">activemq::core::ActiveMQConnectionMetaData</class>
    <class kind="class">activemq::core::ActiveMQConstants</class>
    <class kind="class">activemq::core::ActiveMQConsumer</class>
    <class kind="class">activemq::core::ActiveMQProducer</class>
    <class kind="class">activemq::core::ActiveMQQueueBrowser</class>
    <class kind="class">activemq::core::ActiveMQSession</class>
    <class kind="class">activemq::core::ActiveMQSessionExecutor</class>
    <class kind="class">activemq::core::ActiveMQTransactionContext</class>
    <class kind="class">activemq::core::ActiveMQXAConnection</class>
    <class kind="class">activemq::core::ActiveMQXAConnectionFactory</class>
    <class kind="class">activemq::core::ActiveMQXASession</class>
    <class kind="class">activemq::core::DispatchData</class>
    <class kind="class">activemq::core::Dispatcher</class>
    <class kind="class">activemq::core::FifoMessageDispatchChannel</class>
    <class kind="class">activemq::core::MessageDispatchChannel</class>
    <class kind="class">activemq::core::PrefetchPolicy</class>
    <class kind="class">activemq::core::RedeliveryPolicy</class>
    <class kind="class">activemq::core::SimplePriorityMessageDispatchChannel</class>
    <class kind="class">activemq::core::Synchronization</class>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQAckHandler</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_ack_handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQAckHandler</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_ack_handler.html</anchorfile>
      <anchor>adf5a44dba8f15fd2a72572f79f714381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>acknowledgeMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_ack_handler.html</anchorfile>
      <anchor>ad20709c5a1bd48d8a090d935a5e2c183</anchor>
      <arglist>(const commands::Message *message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQConnection</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_connection.html</filename>
    <base virtualness="virtual">cms::Connection</base>
    <base>activemq::transport::TransportListener</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ae811d576a9ae80839401a1b393cfcda3</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport, const Pointer&lt; decaf::util::Properties &gt; &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a2605378ccc4227c872a4cffbbf1d73c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a63eb43e62d438e9a54d2f37a8bee30e2</anchor>
      <arglist>(ActiveMQSession *session)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a88739f3f4baeee371f3f72e9ea9fbdce</anchor>
      <arglist>(ActiveMQSession *session)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a0dff5e84fa141fa2c959ebd323ddfc0a</anchor>
      <arglist>(ActiveMQProducer *producer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ad6a9aa008b4833eb02c23f0395384036</anchor>
      <arglist>(const Pointer&lt; commands::ProducerId &gt; &amp;producerId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addDispatcher</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a384472a28a506ff43ab20de7ac592444</anchor>
      <arglist>(const Pointer&lt; commands::ConsumerId &gt; &amp;consumer, Dispatcher *dispatcher)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeDispatcher</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a9fd8c4947c364e7f25d98437004f4a85</anchor>
      <arglist>(const Pointer&lt; commands::ConsumerId &gt; &amp;consumer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendPullRequest</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a39f71b51d402502bf11f0198b12d1c5b</anchor>
      <arglist>(const commands::ConsumerInfo *consumer, long long timeout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ac7b2b3c0602cd0436e3f588771374424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStarted</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a07dd334e846f4f0e3b80be1bc4dbb237</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransportFailed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>af41a6aee9a3564909152fb4d9e8d1ce6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyDestination</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ae3e2c2e6b9e37b8686179450c2eea48e</anchor>
      <arglist>(const commands::ActiveMQDestination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyDestination</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aa93af25b6aaec97404e443933663d685</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::ConnectionMetaData *</type>
      <name>getMetaData</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a6b8fdf65b791675091dd9b607e8d8328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session *</type>
      <name>createSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a372408d458debb1026c258829c55f5e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClientID</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aa9b6ebc7c064c358e755e3f4b04615d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClientID</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aeb87c79f66e3c709856e0949ca99e2ee</anchor>
      <arglist>(const std::string &amp;clientID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session *</type>
      <name>createSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a651ab05d224c046d80ed64dba3b69380</anchor>
      <arglist>(cms::Session::AcknowledgeMode ackMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aec65c16bc9f574e4d20bb52b42cf9a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a733bc028094a89400e752d64d9a9d445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a511a7a1ade9c08a24c2bd8f554cce149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::ExceptionListener *</type>
      <name>getExceptionListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a4dcc4261b8561fe2e3181a144ee7d044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExceptionListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a6876e71ba256f2ffa041c2b5ec1ee315</anchor>
      <arglist>(cms::ExceptionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsername</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ac7857b65abcc62a80cab0a2139aa366b</anchor>
      <arglist>(const std::string &amp;username)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getUsername</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a0b0ab63284f9b4b71090711c93f19341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassword</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a5934fc866d3e926604e021935f5c3ffa</anchor>
      <arglist>(const std::string &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPassword</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a4cb31fe2b92591990819f0521b3daac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultClientId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a80d66d374532befbdc399e3b1c5abf50</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBrokerURL</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aa271b56a14f05624a37f225b790e99d0</anchor>
      <arglist>(const std::string &amp;brokerURL)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getBrokerURL</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a0321f89fe63659f6ab696207b398aae8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a799579dd9cb741424a946bd6afe59ff6</anchor>
      <arglist>(PrefetchPolicy *policy)</arglist>
    </member>
    <member kind="function">
      <type>PrefetchPolicy *</type>
      <name>getPrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a42d9ad051b922aec57a72b14f08d86b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a28a0a8871c13e1ba0b8fc8e0a8185ab1</anchor>
      <arglist>(RedeliveryPolicy *policy)</arglist>
    </member>
    <member kind="function">
      <type>RedeliveryPolicy *</type>
      <name>getRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a8fda960c4f13377f502ee6af2b8a5025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDispatchAsync</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a7ef836f227018ca3716f6e94eff4991e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDispatchAsync</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a3032cf87402acab6398ace176b9547ba</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlwaysSyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>abf02657763df7ec4307cfad6d6724afc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlwaysSyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a97ad78a25690963ac1f7d0fbadb13b6e</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUseAsyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aad22c4ade4f6cd1643a0ab8301e3be0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseAsyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aff58f2f016ad18def0703fc3410ab828</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUseCompression</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>acfbbd286a43b1bf61dffc35db38bae1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseCompression</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a4dd0a165b61e424112410624fbe54815</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompressionLevel</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a7c36c14e473509c71742980f6b054590</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCompressionLevel</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a235a0f620026593ec13eaea57aeb8abd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSendTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a4e1e510007a6987b3dfc4098ee4964da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a24d6a2869214a73b26b31ce8a4704196</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCloseTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a8bc163b9904c6dda7ad1a2912145efe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloseTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a4eabda8fca616e215a9d4bf08f2165f5</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getProducerWindowSize</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a2af3b9597190bf427e30107a8d74b321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProducerWindowSize</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a80eb98a5fa3e91b752fe109ac729ef8d</anchor>
      <arglist>(unsigned int windowSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMessagePrioritySupported</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a482b7f488bc34fc4ffbc4505ac936ddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessagePrioritySupported</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a35a7ab22126bd9a597e754a1cfbf4126</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getNextTempDestinationId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ad1936a542663315fd5bf38d08fdf4df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getNextLocalTransactionId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>af135ce31bad5bf06f9bf246b1944858a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransportListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a6619876b9179370ad777c30013824b4b</anchor>
      <arglist>(transport::TransportListener *transportListener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTransportListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a9a300adb00f9becfb9903d8e73b34db4</anchor>
      <arglist>(transport::TransportListener *transportListener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a76ec2ef05dd27d8627618524b241f47a</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>afabbe8f3df2c08e854a0be53860542b6</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportInterrupted</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>af766d1b740b80bb2eb120595abff912e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportResumed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aaa792d2a29b1d5dc3605ca33db8b7c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const commands::ConnectionInfo &amp;</type>
      <name>getConnectionInfo</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ab3fa370df488b85616b12f01b6b20b9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const commands::ConnectionId &amp;</type>
      <name>getConnectionId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a6606b263418a80bcd5daa7c278693c91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>transport::Transport &amp;</type>
      <name>getTransport</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a92e339cc0663ec2340fbc08e6d075269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; threads::Scheduler &gt;</type>
      <name>getScheduler</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a5f059cddff70b2f7745ed9221242c4cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getResourceManagerId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>acddb432014a6e9307165ad5c29dd77a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a453c636b9150bd6485d2b19c3a72bf59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a4054cd4165ce83d4084778a4bcf158f8</anchor>
      <arglist>(Pointer&lt; commands::Command &gt; command)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; commands::Response &gt;</type>
      <name>syncRequest</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a2eb599535fa68e911a2c2ee9ab66f139</anchor>
      <arglist>(Pointer&lt; commands::Command &gt; command, unsigned int timeout=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fire</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a385d89dae5a3407cf8ac84a628b1c210</anchor>
      <arglist>(const exceptions::ActiveMQException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransportInterruptionProcessingComplete</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a0ebd3eadd9f8a10da73e7a9a5b74a54b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decaf::lang::Exception *</type>
      <name>getFirstFailureError</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a8c08143975bd797cf550445af197ca03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAsyncException</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aebc1d128137a6df8463feb173b27bde2</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aeb7d6b74a5c1abf7c4768d6a7588dd9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkClosedOrFailed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>aadc7f387936eaa757b7a5daf11fbf836</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureConnectionInfoSent</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a35c810dee4cea7bbc9bfcb166e9f9506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Pointer&lt; commands::SessionId &gt;</type>
      <name>getNextSessionId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ae0c9c401fca486ed9238cbf46a287621</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>afb93a147d4cc16d61bf0cad2d1a795ad</anchor>
      <arglist>(long long lastDeliveredSequenceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>waitForTransportInterruptionProcessingToComplete</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>ac523dd59c3e069da5f23a3e935a848d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>signalInterruptionProcessingComplete</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a5dab945fb27fb3177e266c4559576d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const decaf::util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection.html</anchorfile>
      <anchor>a5917f66fa0732e913465f59c73a2a66b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQConnectionFactory</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</filename>
    <base>cms::ConnectionFactory</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a7df78b2c2a92668493554c3f512230b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>aff69d8313da21c443b6c0921e0c5ab33</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;username=&quot;&quot;, const std::string &amp;password=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a39b5450d5cdd572c7c31e72817001b74</anchor>
      <arglist>(const decaf::net::URI &amp;uri, const std::string &amp;username=&quot;&quot;, const std::string &amp;password=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ac0091e206ad31da7e69b719b235073ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a025e13dc6f729314d57991cd3d3cbe84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ac73c99b1353d20ef6ef22ff42c95f29d</anchor>
      <arglist>(const std::string &amp;username, const std::string &amp;password)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a6a2e23b82b2e95ce6e468187b1149773</anchor>
      <arglist>(const std::string &amp;username, const std::string &amp;password, const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsername</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a648a9f24c861989bafa7bcb8bb770d82</anchor>
      <arglist>(const std::string &amp;username)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getUsername</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>aa5604cbf0a2d35019ad0686741c1b9b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPassword</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a73f1ca6750d9b15a6d1fbbd32349fadd</anchor>
      <arglist>(const std::string &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPassword</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a7ffeaf403105eb942d5afee6d5051d6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClientId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a730ea8e5e18c5d8d4f71040b1257864b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClientId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ab24054eb2afcfa5b92441f14bdff4bf5</anchor>
      <arglist>(const std::string &amp;clientId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBrokerURI</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a6a86c3bca0fc2d36b5e65227a57a68b1</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBrokerURI</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a84f8ecfa56b7f901ae1b304cc9b89daf</anchor>
      <arglist>(const decaf::net::URI &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>const decaf::net::URI &amp;</type>
      <name>getBrokerURI</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>aa8a62455d077fc5d65327513a5331d79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a2a96f5de6cf96ac5970db095d4e94fe6</anchor>
      <arglist>(cms::ExceptionListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>cms::ExceptionListener *</type>
      <name>getExceptionListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a1e70ceabca65fb6fb7e6307eb166a427</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ab35c7e785ed9bb7975e70732d9abb46f</anchor>
      <arglist>(PrefetchPolicy *policy)</arglist>
    </member>
    <member kind="function">
      <type>PrefetchPolicy *</type>
      <name>getPrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a5a6551a250ef57f1c973883e4210d616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a00fa8ba0eaa3f17c214ae273b29b217b</anchor>
      <arglist>(RedeliveryPolicy *policy)</arglist>
    </member>
    <member kind="function">
      <type>RedeliveryPolicy *</type>
      <name>getRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>af934d05093dafc1cc0c9be6bf44967d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDispatchAsync</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ac1a6c4073f4a97d67b885c78c174a890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDispatchAsync</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a0bc84cc890b18d5b200aa9da54b20d78</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlwaysSyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a4dbe2a23e4fb4558c7961bd62b9b1542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlwaysSyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a0b930ead52b41aaee1226b6c7a989dd4</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUseAsyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a94838437a9542e1145ba22617c2da737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseAsyncSend</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a413548ed92eedbce6831abefbb2af0aa</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUseCompression</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>af6a62e8244aeaf94381245cb50678ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseCompression</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a12b896a18d41a24786fe1045b7555a3c</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompressionLevel</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ac50d1b66fe6b4c2381a888fc9f132a21</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCompressionLevel</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ac0d72d2ae0317db2875af19926a93443</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSendTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a1c5a1a62a5c54e95894f6121d0de675a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a7208b3183ece0139af9bf7bb2fcc70c0</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCloseTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a15642545acc1b4185f92616e6d2e1d49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloseTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a5d1d8c7d61e709ed01bd2ed4076849c0</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getProducerWindowSize</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a3c482251101c9b2f5ff071970d698d46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProducerWindowSize</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a60e7a18805b03bc9eca57c42ecab5fd2</anchor>
      <arglist>(unsigned int windowSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMessagePrioritySupported</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a411cf7663194704edb71dfcb90b50cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessagePrioritySupported</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a0d712e352fc8d06ab92e40e5bb6287b5</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a63fc814ddbf566c6a33e48a38fd31d11</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;username, const std::string &amp;password, const std::string &amp;clientId=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_URI</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>ab8f5aa8e64e47b5a8d57609178fd30ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ActiveMQConnection *</type>
      <name>createActiveMQConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_factory.html</anchorfile>
      <anchor>a773dea367b8225597d800badc52e239c</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport, const Pointer&lt; decaf::util::Properties &gt; &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQConnectionMetaData</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</filename>
    <base>cms::ConnectionMetaData</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQConnectionMetaData</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a2c0b6f99ca1a8e067d5d11ae45a83044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQConnectionMetaData</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a4f5363dbc90d424cf55496989cfacec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCMSVersion</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a65f34cdf9714ca8c84c4f1a230bc252a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCMSMajorVersion</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a06f9bac162e571c3854b09aa29f52961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCMSMinorVersion</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a41fe43fd779a668d3b86a43d4d95c1bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCMSProviderName</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a15381cf8b14876013946cc4b166895af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getProviderVersion</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>ab4b55fb0d409b4a8dd59072d4566c52f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProviderMajorVersion</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>a2d81540f57ec5d51acc2a0857a517781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProviderMinorVersion</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>af8c1219623220c017a40bda587aabe33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getCMSXPropertyNames</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_connection_meta_data.html</anchorfile>
      <anchor>afbb27e759da11ed815d4fde73599af11</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQConstants</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_constants.html</filename>
    <class kind="class">activemq::core::ActiveMQConstants::StaticInitializer</class>
    <member kind="enumeration">
      <name>TransactionState</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_BEGIN</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531ea127dfa16cf87e34eb66b9c46428791f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_PREPARE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531ea4d5042e8f8f4d968af611da79027db64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_COMMITONEPHASE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531eab1aecfd9102d4155b28bb9c528494be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_COMMITTWOPHASE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531eaaacc13f60e86a0681112f5a4f7d859db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_ROLLBACK</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531ea6e925d6206173c0ced7a4087091c9fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_RECOVER</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531ea00a37eded2206319a4c64ec94171d2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_FORGET</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531eac1a064ef345fc15d748f0041611fdae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSACTION_STATE_END</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aa8aa9b4002f314ae86032b794935531ea61d0d9056ff7c3e923633552e0f6985d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DestinationActions</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aaafa45cceafeabeeeb00a2338eec89d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESTINATION_ADD_OPERATION</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aaafa45cceafeabeeeb00a2338eec89d3aa75d3a81ca7a8d4514d4caf3e2478537</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESTINATION_REMOVE_OPERATION</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aaafa45cceafeabeeeb00a2338eec89d3a48e7ddd94d64be0c873026dab66f2765</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AckType</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a39d2ae519115f639fd507644f5f63dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK_TYPE_DELIVERED</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a39d2ae519115f639fd507644f5f63dc6aaa90249ffea5bab01ef33f941f729b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK_TYPE_POISON</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a39d2ae519115f639fd507644f5f63dc6a769a486d44f889569168b729abc8d23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK_TYPE_CONSUMED</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a39d2ae519115f639fd507644f5f63dc6a87ef32d8fb17f8095e08c3001ea5cf79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK_TYPE_REDELIVERED</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a39d2ae519115f639fd507644f5f63dc6a32de43fcdffc88cc022348004096b442</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACK_TYPE_INDIVIDUAL</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a39d2ae519115f639fd507644f5f63dc6ac8c275cc3c95b7b43c8e920523d9994c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DestinationOption</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_PREFECTCHSIZE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfaaf4c879ebb8d31163ebf98a6ad8e6085</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUNSUMER_MAXPENDINGMSGLIMIT</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfa4b93fa299933af8b85b0877ee38c8910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_NOLOCAL</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfa92711b80eda227f2a8d9bc182ca500a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_DISPATCHASYNC</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfa20d1c0ef3f624c1c75651d90ef82542b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_RETROACTIVE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfac8963d9a66c7dc2eb50e575f4ba85d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_SELECTOR</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfa9e4f32477096f2934ccd4524c5f653f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_EXCLUSIVE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfa704d7c64f6016b9611ea76e7a860a6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSUMER_PRIORITY</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfa7cd8dd794802895ba7bf16c9368b38ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_OPTIONS</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a23ebed34026325295c6e4d9b53b846dfaa2b2d77ec6257565f3cc017b07670f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>URIParam</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_SENDTIMEOUT</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a1ba93daa840b0db8187cb641f8c09ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_PRODUCERWINDOWSIZE</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a8ed4b35717b355b376ff1c5049efb950</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_CLOSETIMEOUT</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a35b615903f08a26855b198d1f3113269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_ALWAYSSYNCSEND</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a5d3a3e6e30496b6029b69e6554307283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_USEASYNCSEND</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031acf925d290eb2199abbbfcd21bd38ab31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_USECOMPRESSION</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a6fd49294427f6a20a8d0b9d5d47cdc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_DISPATCHASYNC</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a301a482339e1fccfa789037aeea1c49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_USERNAME</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a9bc253b4f0a8d6a5d0a3882e45a85dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_PASSWORD</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a7eab68f3970c5ff508cf6a1cff7084c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAM_CLIENTID</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a5eeaadfa8d84701e58c083fe9c5ae128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_PARAMS</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>aba2dad659b4a5b483719cab76a79b031a5c65a9734d416cdeb9bead9751a529ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>ad0b57803ef9a683b107dcd7c8fec415a</anchor>
      <arglist>(const DestinationOption option)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DestinationOption</type>
      <name>toDestinationOption</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a3ca8025c66dd57c405586f9807a0b88e</anchor>
      <arglist>(const std::string &amp;option)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a5398d7bef0df11a298641f6ea99bdcd8</anchor>
      <arglist>(const URIParam option)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URIParam</type>
      <name>toURIOption</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants.html</anchorfile>
      <anchor>a98ee6721086c38f9dae313d9feef7229</anchor>
      <arglist>(const std::string &amp;option)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQConstants::StaticInitializer</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</filename>
    <member kind="function">
      <type></type>
      <name>StaticInitializer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</anchorfile>
      <anchor>aa3239a22df748100bf256f8c6944f2ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StaticInitializer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</anchorfile>
      <anchor>a63ac72591f7ba82dfd58bc11f7fb2301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>destOptions</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</anchorfile>
      <anchor>aa599e570b37607b938e4c7dbd00511ab</anchor>
      <arglist>[NUM_OPTIONS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>uriParams</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</anchorfile>
      <anchor>ab933bb42c0a682370eddced6619ce609</anchor>
      <arglist>[NUM_PARAMS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; std::string, DestinationOption &gt;</type>
      <name>destOptionMap</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</anchorfile>
      <anchor>ab7891f433e440456b8870943ca0486e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; std::string, URIParam &gt;</type>
      <name>uriParamsMap</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_constants_1_1_static_initializer.html</anchorfile>
      <anchor>adb81795ea11f17693e8a231151f03b2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQConsumer</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_consumer.html</filename>
    <base>cms::MessageConsumer</base>
    <base>activemq::core::Dispatcher</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a754b25051d78dad440269421cc388225</anchor>
      <arglist>(ActiveMQSession *session, const Pointer&lt; commands::ConsumerId &gt; &amp;id, const Pointer&lt; commands::ActiveMQDestination &gt; &amp;destination, const std::string &amp;name, const std::string &amp;selector, int prefetch, int maxPendingMessageCount, bool noLocal, bool browser, bool dispatchAsync, cms::MessageListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a072b1bc376bd276baa6622bf1288b45c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a52df810d59e8acc56bef32eaceae7ff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a2c63e933df0fe6af6d054ba855c4d783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a2750ef61efdd7f637df3e7eac009ec02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a81645c1632ddf057917e78ec3618403e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receive</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>aa40e2cd259a4d6b05cff6fda270096f2</anchor>
      <arglist>(int millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>receiveNoWait</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a2b221bda0391b2d33c5ee471e36e56f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessageListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a2a21cdc0849a1c3572810d6058d477bb</anchor>
      <arglist>(cms::MessageListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageListener *</type>
      <name>getMessageListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>ab2d5d8d3cb74b167f7b58f99f78e9a9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMessageSelector</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>ad22f24a330a28e34dbc7706eb9ce93b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>acknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>aca1af0e63986df44917ce26dd421122d</anchor>
      <arglist>(const Pointer&lt; commands::MessageDispatch &gt; &amp;dispatch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dispatch</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a299b25d5e96af6c9ce09647a76499192</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>aad25463fb7b450c1f4dbea6de0de0b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a9cd001280fd71f3ead9a4e93d01395a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rollback</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a0dba9998b97116860c4ca7a6207bea3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doClose</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a82012b264bd91ebf90e4af9689318e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>ab993fb4250629b82c7c273f9a485f0e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; commands::ConsumerInfo &gt; &amp;</type>
      <name>getConsumerInfo</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>ac875dea70e4f68644b8f2d025ead3f50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; commands::ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a7e336600c537ce40f7dae71b8d6492bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a6c457d4c8f120c18f84349b3379c6433</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSynchronizationRegistered</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a48a262e29e452355e1adee5897dd8bd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSynchronizationRegistered</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a6e935f747af0644e25818f143da70b06</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a15ced23357658d442376c06a5ff0f1ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliverAcks</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>ab02d9c3a5ebf5c189a871004eb33352a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearMessagesInProgress</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a23aa4a71206331e6d22aefac19db0070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inProgressClearRequired</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a40467726a64eafd4cc9ef340e4f5347e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getLastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a391e03cfe9c65a7dcf900a975d24fae4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a28f9c1f503b121cd78a9a088ee0c052c</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMessageAvailableCount</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a0ad1d6b4024531bbea1d8fe357fd74bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a8527dfe8bfc8deb5445d1af22ee22cac</anchor>
      <arglist>(RedeliveryPolicy *policy)</arglist>
    </member>
    <member kind="function">
      <type>RedeliveryPolicy *</type>
      <name>getRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a59004b4fe0dc26b608cd71fc622e2cc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailureError</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>acf08ddd266512cb56d801562523a03c6</anchor>
      <arglist>(decaf::lang::Exception *error)</arglist>
    </member>
    <member kind="function">
      <type>decaf::lang::Exception *</type>
      <name>getFailureError</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a9aa32f6698d00655402dab445bff3422</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeue</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>ad66c1c5af0e88213b358d7331ca5ba9b</anchor>
      <arglist>(long long timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beforeMessageIsConsumed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a194c2f9c5911a1349b7d446c621ad1c0</anchor>
      <arglist>(const Pointer&lt; commands::MessageDispatch &gt; &amp;dispatch)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>afterMessageIsConsumed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_consumer.html</anchorfile>
      <anchor>a1116fcbfb3897f5b8b01578f49bca230</anchor>
      <arglist>(const Pointer&lt; commands::MessageDispatch &gt; &amp;dispatch, bool messageExpired)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQProducer</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_producer.html</filename>
    <base>cms::MessageProducer</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>aa7f6206d1ea80a2fe3c9e81f501f95d4</anchor>
      <arglist>(ActiveMQSession *session, const Pointer&lt; commands::ProducerId &gt; &amp;producerId, const Pointer&lt; commands::ActiveMQDestination &gt; &amp;destination, long long sendTimeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a6b37694fa39c9096f1a915fcce660a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a1a586ae11ff905a9e2cdf7132917defd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a723ca76cbabb6bb08a68b6d253268c57</anchor>
      <arglist>(cms::Message *message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a03c6b706815aebdb4fb6dc46abeee0d0</anchor>
      <arglist>(cms::Message *message, int deliveryMode, int priority, long long timeToLive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>af191ffe3fdf1c24b0ed0d4a9bda86651</anchor>
      <arglist>(const cms::Destination *destination, cms::Message *message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>af1e833fcf5bee352ac8856f51b3d4cd9</anchor>
      <arglist>(const cms::Destination *destination, cms::Message *message, int deliveryMode, int priority, long long timeToLive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDeliveryMode</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>ab7361ad4002ecc873222b25ab6e575f2</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDeliveryMode</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a449268e1e45801121683d2529a332901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisableMessageID</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a3182f7a1bfee3c430ba049ab3681ad7a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDisableMessageID</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a8d495cac2c270d42ab4664cf69437211</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisableMessageTimeStamp</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a1c4264281bd7126c08dd608e33b0bda4</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getDisableMessageTimeStamp</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a1807201fc975ae94f1fa04aa98b50a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a43bcc83cfd7e13d6880809c2b331a6f9</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>ab22faaadf927069464612a74f745a659</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a2f4bfcf92401c7aee713d53cfd095256</anchor>
      <arglist>(long long time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTimeToLive</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a65e56e4e37b7b4b384f252cd6c665f44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a7abca6a013cedcd1889d3ad93dce8da8</anchor>
      <arglist>(long long time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getSendTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a6aa4b81a52bd3c0bcda5fd57a07fea9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a3382d05a651b1ab30c701c78edcc0003</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; commands::ProducerInfo &gt; &amp;</type>
      <name>getProducerInfo</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a6c07eae3285550c8b72270bfb70f8e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; commands::ProducerId &gt; &amp;</type>
      <name>getProducerId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a118900d77abe115b6d07db422c229d4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onProducerAck</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>addd3848c10379d1841b3d3959eb88a33</anchor>
      <arglist>(const commands::ProducerAck &amp;ack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_producer.html</anchorfile>
      <anchor>a3051d0238a0078291cb36c93225bbd49</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQQueueBrowser</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</filename>
    <base>cms::QueueBrowser</base>
    <base>cms::MessageEnumeration</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQQueueBrowser</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>ac3d3c112f15a3c798b235f8da8b7f1dc</anchor>
      <arglist>(ActiveMQSession *session, const Pointer&lt; commands::ConsumerId &gt; &amp;consumerId, const Pointer&lt; commands::ActiveMQDestination &gt; &amp;destination, const std::string &amp;selector, bool dispatchAsync)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQQueueBrowser</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>abc1c8234ba75c8a637f8a5dda77ae139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cms::Queue *</type>
      <name>getQueue</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>a90bfcdfa770ae8c7e55b040be801f29e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMessageSelector</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>aab274cc0cf43a59b132c3bb87d4c19ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageEnumeration *</type>
      <name>getEnumeration</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>ade39252a95b50256a7b0e68b2c07492f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>ae687d3145ec675331fdd1d8a4848abc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasMoreMessages</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>a09d02313498d527aa07263e7789684be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>nextMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>a3de24d4d3acced87335da613fc0268c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Browser</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_queue_browser.html</anchorfile>
      <anchor>ad668344de67742cef3e2a35e4b40497b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQSession</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_session.html</filename>
    <base virtualness="virtual">cms::Session</base>
    <base>activemq::core::Dispatcher</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a7dbd76dadd37a6d8c04e216dac9dfc20</anchor>
      <arglist>(ActiveMQConnection *connection, const Pointer&lt; commands::SessionId &gt; &amp;id, cms::Session::AcknowledgeMode ackMode, const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ab4b7df9679e0a1c7cceaefa5279d75b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>redispatch</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a0f5748db8529ed4c63e8e0fb8c817381</anchor>
      <arglist>(MessageDispatchChannel &amp;unconsumedMessages)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a80d56d2a5fbc794b006b4508adc3ee70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a289e4edf0b4a3a417adffe731292331e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStarted</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a5ef7500ef3e39a4539daa8453b6a0c7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAutoAcknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ad4ed70660d19670c781ffefcfb73c798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDupsOkAcknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ac1a0ce0f82821286a18f5420ca425707</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClientAcknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>af38ab414be0161c1fd180433fd920383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIndividualAcknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a4621d13afc85152727d8c7a82c8b999a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fire</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>afdd524a1e518fc1a8ca8c421e49878f2</anchor>
      <arglist>(const exceptions::ActiveMQException &amp;ex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dispatch</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ab6231cfeabda13dfd7c5676374044332</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ab9fe61844dfee30d1abb0c4bdf2e2167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ad407cb37b79c994fbc3a1b1a14ec844c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a9f227aa9bfb3f133b2ae363f75f9061a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recover</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ad3e347bf1f5dd07d218e6d8483fcdc01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>abd0c5285993abd9fde313842bc67260a</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a763dba012516eaaa0461362a8946394a</anchor>
      <arglist>(const cms::Destination *destination, const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a7d06a50d17ec30a31c465a4f11dcd23a</anchor>
      <arglist>(const cms::Destination *destination, const std::string &amp;selector, bool noLocal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageConsumer *</type>
      <name>createDurableConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a29d43f59bd99489c9a08ab1a0414515f</anchor>
      <arglist>(const cms::Topic *destination, const std::string &amp;name, const std::string &amp;selector, bool noLocal=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MessageProducer *</type>
      <name>createProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a4e1ee905a7e2e4eab6d2fb79fe334026</anchor>
      <arglist>(const cms::Destination *destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::QueueBrowser *</type>
      <name>createBrowser</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a275a9bf6ed8e4982dee07edcb98652eb</anchor>
      <arglist>(const cms::Queue *queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::QueueBrowser *</type>
      <name>createBrowser</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a943401d839119e308301e106b83b4b46</anchor>
      <arglist>(const cms::Queue *queue, const std::string &amp;selector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Queue *</type>
      <name>createQueue</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>abcb5da1d27001c4352885b9dce40d314</anchor>
      <arglist>(const std::string &amp;queueName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Topic *</type>
      <name>createTopic</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>abb6cedf4f366f9909fb87090d952cbc7</anchor>
      <arglist>(const std::string &amp;topicName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TemporaryQueue *</type>
      <name>createTemporaryQueue</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>afae31f68a8f9ad6653a5f20ed56bf212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TemporaryTopic *</type>
      <name>createTemporaryTopic</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a15dd255d380747983169531b276105fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Message *</type>
      <name>createMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a212ea862fb6c35ebf891a01e631bf300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::BytesMessage *</type>
      <name>createBytesMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>acedea2ee9a1368f1433372a0e6ae230d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::BytesMessage *</type>
      <name>createBytesMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>aaec2501834bc0e0cf14b2068dbd929f7</anchor>
      <arglist>(const unsigned char *bytes, int bytesSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::StreamMessage *</type>
      <name>createStreamMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a4c59cb5be9c759c96c498fbeab810479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TextMessage *</type>
      <name>createTextMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ac4d54dda6803bdce156de9cc3e6a2b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::TextMessage *</type>
      <name>createTextMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a247e9b20d0912c92d7ba7222a5c229c4</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::MapMessage *</type>
      <name>createMapMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a99a7f904e18021491beb69babe744a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session::AcknowledgeMode</type>
      <name>getAcknowledgeMode</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>af674395bcc376b2df889061f37b07fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransacted</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a96d9a9b094e318ea4d12c4910b3c5fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ab7ef409171157a7fb71fe1738ab42ad4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>abf9bac232b00ec224178836712570ade</anchor>
      <arglist>(cms::Message *message, ActiveMQProducer *producer, util::Usage *usage)</arglist>
    </member>
    <member kind="function">
      <type>cms::ExceptionListener *</type>
      <name>getExceptionListener</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>aac35caa52ba62b1abcdeb908c650272f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const commands::SessionInfo &amp;</type>
      <name>getSessionInfo</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a765fb863d83d71ae8949dcf450cea76f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const commands::SessionId &amp;</type>
      <name>getSessionId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a65e16723d6e2cf9bf9721687d5c64802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ActiveMQConnection *</type>
      <name>getConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a58f2600a5f8ce57bc1fda2f0e1f15d2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; threads::Scheduler &gt;</type>
      <name>getScheduler</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>af1a924efa0a0449cc9ba4c27b8e0f731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getLastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a645f37a96969a76b545d3933a0166f6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ac5e4acc0c21666eb912e5686bd1d3f90</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a4ec7b638fca37c211f64ba4ba0e660e2</anchor>
      <arglist>(Pointer&lt; commands::Command &gt; command)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; commands::Response &gt;</type>
      <name>syncRequest</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ae9a9b62dc95fc5ce8316d0172a547cb1</anchor>
      <arglist>(Pointer&lt; commands::Command &gt; command, unsigned int timeout=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>aefc58754068030b08c6c33a190e4fda3</anchor>
      <arglist>(ActiveMQConsumer *consumer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConsumer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ad23de84e248cf4c8d4bd344509e77bdd</anchor>
      <arglist>(const Pointer&lt; commands::ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a5a88b079a3973eb6e9ac03f658c2e968</anchor>
      <arglist>(ActiveMQProducer *producer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeProducer</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>aa825f44bcc4e9a62b589b02068337c6c</anchor>
      <arglist>(ActiveMQProducer *producer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doStartTransaction</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>acf3a0d080c79008abd91447134343519</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ActiveMQTransactionContext &gt;</type>
      <name>getTransactionContext</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ad0bed2ba964c678516c914a639f73020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>af6e9e3198be3c030ea1621f1cb786405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliverAcks</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a267fb61cd3f94ef453d3fa4251dbee3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearMessagesInProgress</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ac603a09c9bf473ff978137b744479981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a0e8a75305402ebb428f51bcc78482947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; commands::ConsumerId &gt;</type>
      <name>getNextConsumerId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a7928f86a8fd7d2df0626903cf9659fd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; commands::ProducerId &gt;</type>
      <name>getNextProducerId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a2c43d3c1753c6b5aff45f3c4389b15f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doClose</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>af89b4da3a4a3f7173e01fd6edc6bdc6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispose</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a7240531ec7b1301de4f31099aee9ba32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SessionConfig *</type>
      <name>config</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ad88cf044d7b778f95c0823e6588a6718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; commands::SessionInfo &gt;</type>
      <name>sessionInfo</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a5f26bbc16a649db1196384ad0de94d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; ActiveMQTransactionContext &gt;</type>
      <name>transaction</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a71bb9063f7162264bc44e7ae3b52b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ActiveMQConnection *</type>
      <name>connection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a1fce73cdf30be5aca523a40505f805c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConsumersMap</type>
      <name>consumers</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a380d24d58d00dd21fed251d0631e5873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AtomicBoolean</type>
      <name>closed</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a0b74ce852b3c4a6247850c5fde1e2203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::auto_ptr&lt; ActiveMQSessionExecutor &gt;</type>
      <name>executor</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>aa6182923496e7347ec36c2db0ff226e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cms::Session::AcknowledgeMode</type>
      <name>ackMode</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a28dbbecb8b44ea74f6689157886ede7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>util::LongSequenceGenerator</type>
      <name>producerIds</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ac5202e80caec6863c51dd8f57f018f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>util::LongSequenceGenerator</type>
      <name>producerSequenceIds</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a2dda0c070394f05783e47869ddc8de08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>util::LongSequenceGenerator</type>
      <name>consumerIds</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>ab8fa0f3637efd584a1a179152eee4310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>lastDeliveredSequenceId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>afeadc4f30c32637ca0b1ed3d1a6d894d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ActiveMQSessionExecutor</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session.html</anchorfile>
      <anchor>a0eb0c52cb0c27e474bc84ba05ac5cf7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQSessionExecutor</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_session_executor.html</filename>
    <base protection="private">activemq::threads::Task</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQSessionExecutor</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>aa7c89a7c872204f749f1eb699cc1d8a5</anchor>
      <arglist>(ActiveMQSession *session)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQSessionExecutor</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>ae54d86e6294a2fcc4c362e11ccb1b8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>ae768989e436784790877222530cbaf56</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executeFirst</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>ade7c088216458e63bc92de99bfcd1a30</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearMessagesInProgress</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>acd96f3a30b87498d0acd1232229e0a8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasUncomsumedMessages</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>a9594e184077f1b9a53bab4965e7cb8e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>adc740573ac33fe0ea02816eab3ede250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>a73de107d20f8fb729263e530f90cbd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>a0701f5f23e3b5edeb1548a1d04114e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>a6cb074fa90638683c36d94f00dfd0ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>a4e31149cd57b74f7ba0fb7d612ec2bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>a4934f5a884fdd03bb88e2f2d011d2a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>ae18cd1336988ef7356f6dfd1ed3dc759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>acc72b296e5dc658860aff9734f5b79e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Pointer&lt; MessageDispatch &gt; &gt;</type>
      <name>getUnconsumedMessages</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_session_executor.html</anchorfile>
      <anchor>ad3b1fd3e8d46f9174d84f812f8315982</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQTransactionContext</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</filename>
    <base>cms::XAResource</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTransactionContext</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a580bc490a3feecdef7a2c18588901808</anchor>
      <arglist>(ActiveMQSession *session, const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTransactionContext</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>ac4dfef10adcd7d8aeae084f347271fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSynchronization</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a50012b5760c612bd94110f1f8bb6c55a</anchor>
      <arglist>(const Pointer&lt; Synchronization &gt; &amp;sync)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeSynchronization</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a0bcf3031be01589289c1c5f801944233</anchor>
      <arglist>(const Pointer&lt; Synchronization &gt; &amp;sync)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>begin</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a1d3b8764b523f1ea65c082e37f8f1718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>aa7313c29c280f59afdfa248a2e871e9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>af319574fc790804eb8098766d3da9f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const decaf::lang::Pointer&lt; commands::TransactionId &gt; &amp;</type>
      <name>getTransactionId</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a9f1ba53cbbd2f53d2501f2e9b453d393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInTransaction</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a36a85310c2a11ecfa1be03e84ba36aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInLocalTransaction</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a11230957c1a4d634262128edb1225190</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInXATransaction</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a4cdfbdc37dcc2d20893226048175009a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a6192d0d60352c106eaa4634feab8f481</anchor>
      <arglist>(const cms::Xid *xid, bool onePhase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a8adaf142de0d078ba2a57c3a2d05e78c</anchor>
      <arglist>(const cms::Xid *xid, int flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forget</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a938a99404962df9b4c2e4d0cf7338123</anchor>
      <arglist>(const cms::Xid *xid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTransactionTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a974b07eca37d636aa2d925b9739274fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSameRM</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a52b4eb6d9c08e138a79e56277e948740</anchor>
      <arglist>(const cms::XAResource *theXAResource)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>prepare</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a40831fc56a1a846a988e8f36e612e0cd</anchor>
      <arglist>(const cms::Xid *xid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>recover</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>af3344d9bf3fc7432945764ff5a0225dc</anchor>
      <arglist>(int flag, cms::Xid **recovered)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a600e044045bc476265ff42778cea2eca</anchor>
      <arglist>(const cms::Xid *xid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setTransactionTimeout</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a5d7b91d393ed9483b4ae9c05431a5e60</anchor>
      <arglist>(int seconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_transaction_context.html</anchorfile>
      <anchor>a434abb0d9587de731fd8b1af6d641c9e</anchor>
      <arglist>(const cms::Xid *xid, int flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQXAConnection</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_x_a_connection.html</filename>
    <base>cms::XAConnection</base>
    <base>activemq::core::ActiveMQConnection</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQXAConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection.html</anchorfile>
      <anchor>a59c7ee60e7a3a7c75bd16e3d959c49fa</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport, const Pointer&lt; decaf::util::Properties &gt; &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQXAConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection.html</anchorfile>
      <anchor>aea4dc6bb3b3f8cb321de809acc37c118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::XASession *</type>
      <name>createXASession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection.html</anchorfile>
      <anchor>acb16a820723aeea2d0d63bf226ea66a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::Session *</type>
      <name>createSession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection.html</anchorfile>
      <anchor>a87185649eb64981892829a0fbe6fa1cd</anchor>
      <arglist>(cms::Session::AcknowledgeMode ackMode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQXAConnectionFactory</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</filename>
    <base>cms::XAConnectionFactory</base>
    <base>activemq::core::ActiveMQConnectionFactory</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQXAConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>a005b1b4e626eeeeb2d3136fd59f90646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQXAConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>af8379418dce83d30da19eace9e0fae94</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;username=&quot;&quot;, const std::string &amp;password=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQXAConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>af1da6b236d0a81c69c63ede41d85a55a</anchor>
      <arglist>(const decaf::net::URI &amp;uri, const std::string &amp;username=&quot;&quot;, const std::string &amp;password=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQXAConnectionFactory</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>ade31eb8dbc8ae6af8299c6865773eade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::XAConnection *</type>
      <name>createXAConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>a90a5e28a2dc37f449a785d2e6f4f29ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::XAConnection *</type>
      <name>createXAConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>a7bf38f4257407c35b1e5d100a68dfe54</anchor>
      <arglist>(const std::string &amp;userName, const std::string &amp;password)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ActiveMQConnection *</type>
      <name>createActiveMQConnection</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_connection_factory.html</anchorfile>
      <anchor>addd1e224ddfd1c92a0e8c9b4c84483ed</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport, const Pointer&lt; decaf::util::Properties &gt; &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::ActiveMQXASession</name>
    <filename>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</filename>
    <base>cms::XASession</base>
    <base>activemq::core::ActiveMQSession</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQXASession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>a22f01066e8dd839cd9734b449de9c6ec</anchor>
      <arglist>(ActiveMQConnection *connection, const Pointer&lt; commands::SessionId &gt; &amp;sessionId, const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQXASession</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>ab29c76b2c706b2da8982dcf76de5438e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransacted</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>aa695cc050c91000e6543ca327ea7777c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAutoAcknowledge</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>ada1885e906a06b5022d2ebb961454a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doStartTransaction</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>a04375caecc0d3c8d3b9b0b5cb9150c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>aff2c7ac6583e7e515ed2e2f255f8e858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>a15d991c5728adba7df6efcd4de4e7670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::XAResource *</type>
      <name>getXAResource</name>
      <anchorfile>classactivemq_1_1core_1_1_active_m_q_x_a_session.html</anchorfile>
      <anchor>ad97ec41bb67adb882d4c6af29e282671</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::DispatchData</name>
    <filename>classactivemq_1_1core_1_1_dispatch_data.html</filename>
    <member kind="function">
      <type></type>
      <name>DispatchData</name>
      <anchorfile>classactivemq_1_1core_1_1_dispatch_data.html</anchorfile>
      <anchor>a0dc6fdedcab145c7628c3d6283e04a75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DispatchData</name>
      <anchorfile>classactivemq_1_1core_1_1_dispatch_data.html</anchorfile>
      <anchor>ad01ec78596dc1263f29d788bf9d071b7</anchor>
      <arglist>(const decaf::lang::Pointer&lt; commands::ConsumerId &gt; &amp;consumer, const decaf::lang::Pointer&lt; commands::Message &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>const decaf::lang::Pointer&lt; commands::ConsumerId &gt; &amp;</type>
      <name>getConsumerId</name>
      <anchorfile>classactivemq_1_1core_1_1_dispatch_data.html</anchorfile>
      <anchor>ae01a15a7db17e5f3eeb3964abfcc2f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const decaf::lang::Pointer&lt; commands::Message &gt; &amp;</type>
      <name>getMessage</name>
      <anchorfile>classactivemq_1_1core_1_1_dispatch_data.html</anchorfile>
      <anchor>a2f601e96e03b5217cd4b43f791da2a9b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::Dispatcher</name>
    <filename>classactivemq_1_1core_1_1_dispatcher.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dispatcher</name>
      <anchorfile>classactivemq_1_1core_1_1_dispatcher.html</anchorfile>
      <anchor>a66c63b7c248453301289799997a3f112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dispatch</name>
      <anchorfile>classactivemq_1_1core_1_1_dispatcher.html</anchorfile>
      <anchor>a6d223fd81e7950cad86de902f0f1561c</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::FifoMessageDispatchChannel</name>
    <filename>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</filename>
    <base>activemq::core::MessageDispatchChannel</base>
    <member kind="function">
      <type></type>
      <name>FifoMessageDispatchChannel</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>ae821bb5538602bdf7a0ab1bbe77184f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FifoMessageDispatchChannel</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a5ca133a45c80dfa936887513b7ace82d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueue</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a0856a3d2fbd49f8e9f958545ee19bcd3</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueFirst</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>ae23e4352fb167ebea5fc7591e397f27a</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a6a19d31fe045662a36dbc790186ad6ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a5c7147ed10e2c26b973349c2749b9a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a6ad0077eb175a1de3156cc43cdff57a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeue</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>abf9eb70c1f00159915324e21ed9e4027</anchor>
      <arglist>(long long timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeueNoWait</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a6c2ea1b213b028f7ef08764ddc75eab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>peek</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a5a41921750ce04abe02fa1f91ba4daff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>ab9b705bb46ed272ce1a5783eb081a2b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a5cd704c5bd53b272b4a3878ea4e58ad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>aed2bf1100bc2df96a23026e89b52c7d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>af0cb7d110fbdbaa92b1689eaaa8070df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a2adf7ee953571b33317674c330dd3400</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Pointer&lt; MessageDispatch &gt; &gt;</type>
      <name>removeAll</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a28206d8d91add4dd8d0999d8424403e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>ae70a94b51ee2cc986e2644aabe795093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a17e549fff2934b8f1d877a13380d1ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a6ee352e9c7669469e7052d9062095e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a425db6915dec207a113a83b431a2c309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>ab5488b0c17c37b5cf54b091354d08d4d</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a0ed728c38b53cbaf38b0bfa392f5c3d9</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>aa3ec7da884883a364725bb62cd5e6c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classactivemq_1_1core_1_1_fifo_message_dispatch_channel.html</anchorfile>
      <anchor>a9d86c1a30fb84d604d6b95ecd98af8af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::MessageDispatchChannel</name>
    <filename>classactivemq_1_1core_1_1_message_dispatch_channel.html</filename>
    <base>decaf::util::concurrent::Synchronizable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDispatchChannel</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>a1e9858f58cff99ebce598a7cc736daba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueue</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>a0ad2825ffabf2db41ef17a66c80fb41e</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueFirst</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>a9053428ed5ca963a12d6b194845b230e</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>af5e1e60e1c1016849a9d2b1610a1102b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>a26cc42ad8ead6003defbc57b58b8163b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>ad2d0994c2f34a42acd95f474e73372a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeue</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>ad97bf8d47b093e20f7726ccb9c61f608</anchor>
      <arglist>(long long timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeueNoWait</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>a8e2e76745f84e567e52a6b3bfb6e05ef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>peek</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>a354f2f51ac3f1f5e1d20c43a2d9f9b13</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>aa8492f81f75b38f771f2477ca28f450c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>ac12e34f023e25a416723c2e998d87bd3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>af75772beae647013a8f4ff9cb5da5202</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>abd10686458b3c79ce841b484d77c7a0a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>adf7ebe2b2670a41f7bf9bff6d4eef00f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; Pointer&lt; MessageDispatch &gt; &gt;</type>
      <name>removeAll</name>
      <anchorfile>classactivemq_1_1core_1_1_message_dispatch_channel.html</anchorfile>
      <anchor>af754ad74b1e7a8d867dbfb7cdd0021f8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::PrefetchPolicy</name>
    <filename>classactivemq_1_1core_1_1_prefetch_policy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a3ba8351461ed9811c454580808dda74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDurableTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a394a6bea3dac7ed4cff97552fc9da437</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDurableTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>ac6e364115d80181562e9687fe70bd2dc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setQueuePrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a2228761800b59d4a72a5ed1f3e26cbea</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getQueuePrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>ae6a5e411d176322b935a8e52ddd6708f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setQueueBrowserPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>aab1d7bf40a632678ba69e4a44e5bbefb</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getQueueBrowserPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a3bbdadcaa0c20c22e5c58f73c8eb46e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a4bf7a3cd852551e3ce0e586632e28864</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a316ead914922900670a6f3f3435c882f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMaxPrefetchLimit</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>ad352928a50dd7327edc126a08e713848</anchor>
      <arglist>(int value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PrefetchPolicy *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a8422733046e5f3b8f6d21681601a1a4a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a62cbb79d2beaaf3e4bf394c739981194</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_prefetch_policy.html</anchorfile>
      <anchor>a3571ee4964bfcc7a8dfc28946240f508</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::RedeliveryPolicy</name>
    <filename>classactivemq_1_1core_1_1_redelivery_policy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a8eb74096723be40efb88c9a8823fb25f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBackOffMultiplier</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a33a5641fa735594d43b317fe85461ad2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBackOffMultiplier</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a9177fc15713ca87d0a56a4571c9f220a</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>getCollisionAvoidancePercent</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>ac5499ff80e0cb5eebee190558cc71e2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCollisionAvoidancePercent</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>ae914784c2a49eb4dafea402b95b75430</anchor>
      <arglist>(short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getInitialRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a8fa5c916d249f33d70af18ff76eac204</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInitialRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>aa54198026e2ebf9401fe2aecb1c5bbad</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a304e358ed15023fc178180675f86d33e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a1faa7d8c8e3f21376e5d737ef25a344c</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMaximumRedeliveries</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a97a10bf229f1c97312660a53fdde09f7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMaximumRedeliveries</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>ae8e8a37a50f866fbcc12862da8548c2f</anchor>
      <arglist>(int maximumRedeliveries)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getNextRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a23de5b8a7000189f03589ed9c42e0454</anchor>
      <arglist>(long long previousDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUseCollisionAvoidance</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a5e026d1c54b35389e33a9f5187955c24</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUseCollisionAvoidance</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>aef6948ccb1f3dc3bdbe86c8604f2073a</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUseExponentialBackOff</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a641949b73061f36f64fdc76834364a23</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUseExponentialBackOff</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a9e3e2da64d95c06bb32e95dd01cb8e94</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RedeliveryPolicy *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a8c25ccf227e7b908421547718d4c04a7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>a460def576dce812a092ac5a04471d132</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>NO_MAXIMUM_REDELIVERIES</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>ad80fa6939993ef3933c70a3b4f1758d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1_redelivery_policy.html</anchorfile>
      <anchor>affd38220f675252ecdbdb387ca10d0b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::SimplePriorityMessageDispatchChannel</name>
    <filename>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</filename>
    <base>activemq::core::MessageDispatchChannel</base>
    <member kind="function">
      <type></type>
      <name>SimplePriorityMessageDispatchChannel</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a8698ee9a21487287fa5554c476efd359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimplePriorityMessageDispatchChannel</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a8953bf997c9b8746970ef44be4b65ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueue</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>ab83f4c9d585a67ccc7644d1709dcae26</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueFirst</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a3eeb3f437be4cf7f41356ef4aafb5679</anchor>
      <arglist>(const Pointer&lt; MessageDispatch &gt; &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a652e04d6d7820ac076e03ff081e7ab9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a4cc535f228c7cec3341f9bbd86834c61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRunning</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a3ee430a1026edeff13a936d37ae495f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeue</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a0a3bc76304567d3ca4588a07be5d0881</anchor>
      <arglist>(long long timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>dequeueNoWait</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>af5755b225f4a2db23c561161a28ff286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; MessageDispatch &gt;</type>
      <name>peek</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a74cba3c598ee5f786bdda23967be7bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a43df7cafdcd5665d6bbe17fc50dd969d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a8e53119239737971539976b520b82516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>aafd8f8fbaf6a99106e5e7f16267e40b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a1e47000eab39fd9cfdea0e6564ecd430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a998e04de0cb700752443ba34d4ddd6be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Pointer&lt; MessageDispatch &gt; &gt;</type>
      <name>removeAll</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a2fa7614aa3564864e9aab44688981f17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a13922c3016e840177597865511172fa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a94b6a35a204c5173e96295ca6302b943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a381411c0a8d3529750066f28a50b8d3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>ab627ccfba095d011772117c4a8be3537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a7efe7d0cbfeb5b3a09c659fde49d0f44</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>aa07c26f4119e600dfa0cba1b40472795</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a89e747f6c80f2aa94b86f7ca0d1cffd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classactivemq_1_1core_1_1_simple_priority_message_dispatch_channel.html</anchorfile>
      <anchor>a05988716a9eeb940e154ae348d8ad4f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::Synchronization</name>
    <filename>classactivemq_1_1core_1_1_synchronization.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Synchronization</name>
      <anchorfile>classactivemq_1_1core_1_1_synchronization.html</anchorfile>
      <anchor>a220b9d0cf246038fe8c4bffbb73636ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beforeEnd</name>
      <anchorfile>classactivemq_1_1core_1_1_synchronization.html</anchorfile>
      <anchor>a238b11d4317e4580855941ee32c6f539</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>afterCommit</name>
      <anchorfile>classactivemq_1_1core_1_1_synchronization.html</anchorfile>
      <anchor>a36369aed5915a8390e1cf36b10da151b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>afterRollback</name>
      <anchorfile>classactivemq_1_1core_1_1_synchronization.html</anchorfile>
      <anchor>a5e78eace1b9212e47f36039417c6f31a</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::core::policies</name>
    <filename>namespaceactivemq_1_1core_1_1policies.html</filename>
    <class kind="class">activemq::core::policies::DefaultPrefetchPolicy</class>
    <class kind="class">activemq::core::policies::DefaultRedeliveryPolicy</class>
  </compound>
  <compound kind="class">
    <name>activemq::core::policies::DefaultPrefetchPolicy</name>
    <filename>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</filename>
    <base>activemq::core::PrefetchPolicy</base>
    <member kind="function">
      <type></type>
      <name>DefaultPrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>af64ef37644a4fac6ea5df950a046cb66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultPrefetchPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>af4ad009840c0560e34ff95ac7fd8a3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDurableTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a5276b842e1e92de690fc0f954d061946</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDurableTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>aa442dedd9de184b9d81f955448d1d237</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQueuePrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>ad94771ccfa2dd3d3901627a17fcdb79c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getQueuePrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a1e491e3a7bfe25c42e0d8b8e1d389482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQueueBrowserPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a06c57d541c3eac81a3b13f25f7fec92a</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getQueueBrowserPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a0ed4d121efa46d0aa69bc56e60d372df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>aac8de3eed792db0f021320697cc04fa5</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTopicPrefetch</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>ab180255f60d5353126804c3166a1588e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxPrefetchLimit</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a3b6b350b629aedacea803a0c8786a9ce</anchor>
      <arglist>(int value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PrefetchPolicy *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>ab44e838726cf530a6d7282929c65372d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>MAX_PREFETCH_SIZE</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>ab7540c7df1124e84e53b46181b4ff834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>DEFAULT_DURABLE_TOPIC_PREFETCH</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>ae021fa5126b944a40b8633bdf962a8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>DEFAULT_QUEUE_PREFETCH</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a70ee4df72f82f3bdf97747ee015d1d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>DEFAULT_QUEUE_BROWSER_PREFETCH</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>a594b3725f4791a8f0c7bda8670cfcdbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>DEFAULT_TOPIC_PREFETCH</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_prefetch_policy.html</anchorfile>
      <anchor>ac55834fa9aa94bb4d564a49b624df551</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::core::policies::DefaultRedeliveryPolicy</name>
    <filename>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</filename>
    <base>activemq::core::RedeliveryPolicy</base>
    <member kind="function">
      <type></type>
      <name>DefaultRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a7e6bf79c2a53d64be7bfbc10917c24ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultRedeliveryPolicy</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a4624a2b18ed9c53e4bf24aed70aaabb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBackOffMultiplier</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ad104ea4ea0df895b43e5d1d91349311d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackOffMultiplier</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ab8f66f9b51c7ebc6f3dc81a39488ea65</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getCollisionAvoidancePercent</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ab668ac473d9ece1f9df3341776ef3868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionAvoidancePercent</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a3a647fab577b8b58c5173309286a02a8</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getInitialRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ac482a259b04208f70eba3ce1e3cfad29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInitialRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a135c5aa5f4f2c7170a209c39b1e5c950</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>af7a1fae76210508fde855fddbc598afc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a7cf88ad51c5eb55c5bac5a02aa2083ac</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaximumRedeliveries</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a6a9042df32603a602c2c6f6ae65121ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumRedeliveries</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ae11e62be6eb9ffdfbee65cb687ca1c05</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUseCollisionAvoidance</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a2429f9f4c746cbfee3a756ee0f386c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUseCollisionAvoidance</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>af6fffbbacb7150995894b9de5afe2c79</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUseExponentialBackOff</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a0fd7ceb959861c62065cfaaeda3eedaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUseExponentialBackOff</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>a3c3234b41073638f662ddba61623bf73</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getNextRedeliveryDelay</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ab2a00b655395588b18d4c533cdbae946</anchor>
      <arglist>(long long previousDelay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RedeliveryPolicy *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1core_1_1policies_1_1_default_redelivery_policy.html</anchorfile>
      <anchor>ac5ce3872a83b86f275cb2c601dc9af10</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::exceptions</name>
    <filename>namespaceactivemq_1_1exceptions.html</filename>
    <class kind="class">activemq::exceptions::ActiveMQException</class>
    <class kind="class">activemq::exceptions::BrokerException</class>
    <class kind="class">activemq::exceptions::ConnectionFailedException</class>
  </compound>
  <compound kind="class">
    <name>activemq::exceptions::ActiveMQException</name>
    <filename>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>aa0a87d21c8fea5fc752ec85cc01ebfae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>ae9690aecdbda37374d1044b3505a884e</anchor>
      <arglist>(const ActiveMQException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>ae68668383912371a01d51e27678b920c</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ActiveMQException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>ac93282610b8ce4444f3c64fe650013c4</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>a76766e0c2640a46ac2c87275b05ccbf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ActiveMQException *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>a06aec854a2952e1199d784593fe93ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cms::CMSException</type>
      <name>convertToCMSException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_active_m_q_exception.html</anchorfile>
      <anchor>aea3119c7e1176f7d0d9a34f39d28e3bd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::exceptions::BrokerException</name>
    <filename>classactivemq_1_1exceptions_1_1_broker_exception.html</filename>
    <base>activemq::exceptions::ActiveMQException</base>
    <member kind="function">
      <type></type>
      <name>BrokerException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>aab45e63f2601e6043e9d66450082460e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokerException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>a4ec2d5fe93ff4e71d563bf8572416a84</anchor>
      <arglist>(const exceptions::ActiveMQException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokerException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>aeb86f2315fbdba5ea0c5356643b0af77</anchor>
      <arglist>(const BrokerException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokerException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>a19aa5219b4a00f632d1a148fa50431b5</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokerException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>a78e7fc32ad8bfd4b1f6d7406c012d78e</anchor>
      <arglist>(const char *file, const int lineNumber, const commands::BrokerError *error)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BrokerException *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>acbc2f818bfc6b45a0d3f9691646ac969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokerException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_broker_exception.html</anchorfile>
      <anchor>aab4f874d5f1362b113578f50d5a496a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::exceptions::ConnectionFailedException</name>
    <filename>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</filename>
    <base>activemq::exceptions::ActiveMQException</base>
    <member kind="function">
      <type></type>
      <name>ConnectionFailedException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</anchorfile>
      <anchor>a01c6429f0deb7aa9bcb1c8f036a87e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionFailedException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</anchorfile>
      <anchor>a8229214b8e4f9454ab1c2801c70f53ad</anchor>
      <arglist>(const exceptions::ActiveMQException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionFailedException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</anchorfile>
      <anchor>a19a414e28126872326e07cf1862caf88</anchor>
      <arglist>(const ConnectionFailedException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionFailedException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</anchorfile>
      <anchor>a1af99c29e9e099f2747bfd0c78497873</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionFailedException *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</anchorfile>
      <anchor>aefa44bd54a68873b94471421e38d2fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionFailedException</name>
      <anchorfile>classactivemq_1_1exceptions_1_1_connection_failed_exception.html</anchorfile>
      <anchor>aa5f9033a0dc03c4b6d4803b756134f9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::io</name>
    <filename>namespaceactivemq_1_1io.html</filename>
    <class kind="class">activemq::io::LoggingInputStream</class>
    <class kind="class">activemq::io::LoggingOutputStream</class>
  </compound>
  <compound kind="class">
    <name>activemq::io::LoggingInputStream</name>
    <filename>classactivemq_1_1io_1_1_logging_input_stream.html</filename>
    <base>decaf::io::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>LoggingInputStream</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_input_stream.html</anchorfile>
      <anchor>ac843cc5c6c22fab858effcaa087ef940</anchor>
      <arglist>(decaf::io::InputStream *inputStream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoggingInputStream</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_input_stream.html</anchorfile>
      <anchor>a7c3fef9406134a45c622b0fca9177477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_input_stream.html</anchorfile>
      <anchor>a3e2bf01b49735c8e50daa7fa9904d80e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_input_stream.html</anchorfile>
      <anchor>a6ee7383d3918d4a5cc42e930331f3dc6</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::io::LoggingOutputStream</name>
    <filename>classactivemq_1_1io_1_1_logging_output_stream.html</filename>
    <base>decaf::io::FilterOutputStream</base>
    <member kind="function">
      <type></type>
      <name>LoggingOutputStream</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_output_stream.html</anchorfile>
      <anchor>adc699c8808a2e86bbb2cb1a02fe693b4</anchor>
      <arglist>(OutputStream *next, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoggingOutputStream</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_output_stream.html</anchorfile>
      <anchor>a0b923c09b0fadb2c26ed00be16228de9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_output_stream.html</anchorfile>
      <anchor>a9d1c41ff32d3028b541d46934fe87353</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classactivemq_1_1io_1_1_logging_output_stream.html</anchorfile>
      <anchor>a6cedb5bcdd7e8593e8fb030c4fe5c5aa</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::library</name>
    <filename>namespaceactivemq_1_1library.html</filename>
    <class kind="class">activemq::library::ActiveMQCPP</class>
  </compound>
  <compound kind="class">
    <name>activemq::library::ActiveMQCPP</name>
    <filename>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQCPP</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>a601009795f608b3d9b4fef27f71b6014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeLibrary</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>ab5b19bf0ceea3b2c32de1cef256da397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeLibrary</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>a167ca15ac41319bf195434fec7246de1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdownLibrary</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>ad2447444afa5f8066212f502e790911e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActiveMQCPP</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>a61d0ea311d5a44d17e6155baaeec1ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActiveMQCPP</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>aa5295ebc35acb1b54a3a4051d3e28f5a</anchor>
      <arglist>(const ActiveMQCPP &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ActiveMQCPP &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1library_1_1_active_m_q_c_p_p.html</anchorfile>
      <anchor>ad71bdb0cbd45730d3f7571590c7a62f5</anchor>
      <arglist>(const ActiveMQCPP &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::state</name>
    <filename>namespaceactivemq_1_1state.html</filename>
    <class kind="class">activemq::state::CommandVisitor</class>
    <class kind="class">activemq::state::CommandVisitorAdapter</class>
    <class kind="class">activemq::state::ConnectionState</class>
    <class kind="class">activemq::state::ConnectionStateTracker</class>
    <class kind="class">activemq::state::ConsumerState</class>
    <class kind="class">activemq::state::ProducerState</class>
    <class kind="class">activemq::state::SessionState</class>
    <class kind="class">activemq::state::Tracked</class>
    <class kind="class">activemq::state::TransactionState</class>
  </compound>
  <compound kind="class">
    <name>activemq::state::CommandVisitor</name>
    <filename>classactivemq_1_1state_1_1_command_visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommandVisitor</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a52ffbb5e25c3280fc5fa33a95e0d3736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processTransactionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>aa6eab56a4fc1e97c8a8f84d2fd7ffc1c</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a148fb4f336a55d78791c1c27572ded82</anchor>
      <arglist>(commands::RemoveInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConnectionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>acf7711f5a5aefd0938645ee6fb8e9fd5</anchor>
      <arglist>(commands::ConnectionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processSessionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a9e8330cafbeba2521ccc56f7d0b5eef0</anchor>
      <arglist>(commands::SessionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processProducerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a55425ce9a61e81efff7be1021057b3f6</anchor>
      <arglist>(commands::ProducerInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConsumerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a6e5b21efe04b30eaccf90a5fcc54c27c</anchor>
      <arglist>(commands::ConsumerInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveConnection</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a5c1394be4348ac803fc627b6b314a337</anchor>
      <arglist>(commands::ConnectionId *id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveSession</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a4b03f6f832189528663c81ff162fcb3e</anchor>
      <arglist>(commands::SessionId *id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveProducer</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a34b5e6cf06ef6fc4c632df2de0699f58</anchor>
      <arglist>(commands::ProducerId *id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveConsumer</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a74cab8dcf6fdae6a4a995b462d860677</anchor>
      <arglist>(commands::ConsumerId *id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processDestinationInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>af09e463adef139cafc260657e0b0f2cb</anchor>
      <arglist>(commands::DestinationInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveDestination</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a09db01640cbd44b4f4fc00db54d24fa1</anchor>
      <arglist>(commands::DestinationInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a0d2b0feabe38d6e83ebcaac4d37def92</anchor>
      <arglist>(commands::RemoveSubscriptionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessage</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a4a9209e517477070cd9c5077bd7bfe80</anchor>
      <arglist>(commands::Message *send)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessageAck</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>ac567afb6578def58c839fdfc034267f9</anchor>
      <arglist>(commands::MessageAck *ack)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessagePull</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a0846e9ebf42652ac046785ad19adf923</anchor>
      <arglist>(commands::MessagePull *pull)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processBeginTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a2c16f2983066fbcaa3d1a7e11d130616</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processPrepareTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a3636c12e2054df27f41ceeb58e820e7c</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processCommitTransactionOnePhase</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a49f9362c72dcecb2d8e017f0485c879e</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processCommitTransactionTwoPhase</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>ad198fa3238581e23753a506efb13b7cf</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRollbackTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a42955cb8c3645922bbfbf575a39e3578</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processWireFormat</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a67f6b860023a2b69707108e79320476b</anchor>
      <arglist>(commands::WireFormatInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processKeepAliveInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a124f03af60840044ef5f9548c4b99ba3</anchor>
      <arglist>(commands::KeepAliveInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processShutdownInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>af032e61b6a7f491a44474bae65796d22</anchor>
      <arglist>(commands::ShutdownInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processFlushCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a72df74bdc096d7e91b8dfe45c0a05722</anchor>
      <arglist>(commands::FlushCommand *command)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processBrokerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>aca257d3f338bf584e35b07e6ba5e1ca5</anchor>
      <arglist>(commands::BrokerInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRecoverTransactions</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>ac7db9268a3097e31db9ef879f33e1e23</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processForgetTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>aa46a396f59ad6c652a9d0368454ba375</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processEndTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a75dc92faf84e87712c176ce3466ab4a0</anchor>
      <arglist>(commands::TransactionInfo *info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>ad10f7b4b57f3e13c47ff036d5e980f8c</anchor>
      <arglist>(commands::MessageDispatchNotification *notification)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processProducerAck</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>ae160d888fb2ba304339d77b0883be298</anchor>
      <arglist>(commands::ProducerAck *ack)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessageDispatch</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>ab366c2735014a80d5b803a2d5ff21b99</anchor>
      <arglist>(commands::MessageDispatch *dispatch)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processControlCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a943693a5df5cca55226d79fad6ff6d5a</anchor>
      <arglist>(commands::ControlCommand *command)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConnectionError</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a1bf1bfaa4b48497c05fb00b05b01e763</anchor>
      <arglist>(commands::ConnectionError *error)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConnectionControl</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a6f183e7ce213175d169c3eaca07717ae</anchor>
      <arglist>(commands::ConnectionControl *control)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConsumerControl</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a71ae8783812bcd7cc07594d2a3e64f18</anchor>
      <arglist>(commands::ConsumerControl *control)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processBrokerError</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a091b2b3bdf4f3328b3f770e9846ecfae</anchor>
      <arglist>(commands::BrokerError *error)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processReplayCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>adb1ad8a78096e62d87ef86b9ba5f4ee8</anchor>
      <arglist>(commands::ReplayCommand *replay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processResponse</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor.html</anchorfile>
      <anchor>a41ca8c359066fe0a8ecdf2c5c6bac1e9</anchor>
      <arglist>(commands::Response *response)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::CommandVisitorAdapter</name>
    <filename>classactivemq_1_1state_1_1_command_visitor_adapter.html</filename>
    <base>activemq::state::CommandVisitor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommandVisitorAdapter</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a88b4ecf266e4c2f29aba790676d4a693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveConnection</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a6d7b06e5daf9d80689f7d701e24c08c1</anchor>
      <arglist>(commands::ConnectionId *id AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveSession</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a1353f0c406bfc396190bf1a9553c2fee</anchor>
      <arglist>(commands::SessionId *id AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveProducer</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a1eaa3899810232b82e871ebed0a56f44</anchor>
      <arglist>(commands::ProducerId *id AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveConsumer</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a09df4f40e11ab04c187d2bfb4a597878</anchor>
      <arglist>(commands::ConsumerId *id AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processDestinationInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a65fa6eb7908dba03754ffcbab935b4e0</anchor>
      <arglist>(commands::DestinationInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveDestination</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>af33d2c7427bdbd36edcc467ba85a574d</anchor>
      <arglist>(commands::DestinationInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveSubscriptionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a0091f9fb12c1426759e0a5fdcc4ab488</anchor>
      <arglist>(commands::RemoveSubscriptionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessage</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>af71a3e1167cfb0308b835b21253ec6b7</anchor>
      <arglist>(commands::Message *send AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessageAck</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a9ebfe98e66929c579c82e69c7969ce05</anchor>
      <arglist>(commands::MessageAck *ack AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessagePull</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a8baf6fbdee5d4f9f7fd7f254f4b6850a</anchor>
      <arglist>(commands::MessagePull *pull AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processBeginTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>aa77b08607cc09cf5c1fcc1fcaeab35f4</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processPrepareTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a1e97bab185315519f05752d7365f00e5</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processCommitTransactionOnePhase</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a0de52fcb17817455eb3e7a76e8ba4dbe</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processCommitTransactionTwoPhase</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a3b57ceacb46b4d11f5ccfc0f9708882a</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRollbackTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ab13349f26f5a4499c0159923e24643e0</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processWireFormat</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ae41e816a5aaeba2ad585b30d963e58f8</anchor>
      <arglist>(commands::WireFormatInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processKeepAliveInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a96ea409f5e7c110afee4f35dab59bb2b</anchor>
      <arglist>(commands::KeepAliveInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processShutdownInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ac9f98eed93f083d8e48fd633e4a8d16e</anchor>
      <arglist>(commands::ShutdownInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processFlushCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a3a47dbdddce0f697d7f816cd1ce8bad8</anchor>
      <arglist>(commands::FlushCommand *command AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processBrokerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a3a63129763f6a68f2cb9cad2c8ad15c2</anchor>
      <arglist>(commands::BrokerInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRecoverTransactions</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a91a987ffa59fe8aaca375b1da15c9774</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processForgetTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a8d3ebd4b77225afc9138055716d2f765</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processEndTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a461581692b8b197eb36882cd0d498fe0</anchor>
      <arglist>(commands::TransactionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessageDispatchNotification</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>aa650fbc4209e401c45377fe013400deb</anchor>
      <arglist>(commands::MessageDispatchNotification *notification AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processProducerAck</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ae87ebf6ead0580387d575620831b50cc</anchor>
      <arglist>(commands::ProducerAck *ack AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processMessageDispatch</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a83e0036de07f726199ab49425498d74c</anchor>
      <arglist>(commands::MessageDispatch *dispatch AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processControlCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ae521f24f2b5b4704cad45bd7775ae376</anchor>
      <arglist>(commands::ControlCommand *command AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConnectionError</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a68a9011aeee4095f5c6ae756d65a5b97</anchor>
      <arglist>(commands::ConnectionError *error AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConnectionControl</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a58f7e1dcaa42f9a252a52c5f758f695c</anchor>
      <arglist>(commands::ConnectionControl *control AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConsumerControl</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a1f39bfc42952edc6d75b73ce39aaef54</anchor>
      <arglist>(commands::ConsumerControl *control AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processBrokerError</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ab77dbcc76a9da5427ce13a98a7cba10c</anchor>
      <arglist>(commands::BrokerError *error AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processReplayCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>ac427dd0c98a725e1567b2332a7e11fa5</anchor>
      <arglist>(commands::ReplayCommand *replay AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processResponse</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>adee9efa1750ae584f673b7a90376f4ed</anchor>
      <arglist>(commands::Response *response AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConnectionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a7134a236ab1a0440fdaee98c56fbbb9c</anchor>
      <arglist>(commands::ConnectionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processSessionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a390ae54ba84607de4886783a5b3b2d9a</anchor>
      <arglist>(commands::SessionInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processProducerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a4eddab4ee45c8650d15a004fbb0a0738</anchor>
      <arglist>(commands::ProducerInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processConsumerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a4a9656f6fb99a647a15881a2c898725b</anchor>
      <arglist>(commands::ConsumerInfo *info AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processTransactionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a223b24840036201da3787f4fe75fd74b</anchor>
      <arglist>(commands::TransactionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Pointer&lt; commands::Command &gt;</type>
      <name>processRemoveInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_command_visitor_adapter.html</anchorfile>
      <anchor>a9d12b8df7f39882fe27e3c8eed331a6d</anchor>
      <arglist>(commands::RemoveInfo *info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::ConnectionState</name>
    <filename>classactivemq_1_1state_1_1_connection_state.html</filename>
    <member kind="function">
      <type></type>
      <name>ConnectionState</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>ad2e95665a427cbae3453862f7fe65e59</anchor>
      <arglist>(const Pointer&lt; ConnectionInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionState</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a6a8996308c2beff6685f77105a6c8c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a387496e5b5713df0842518492d1b71c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; commands::ConnectionInfo &gt; &amp;</type>
      <name>getInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a52ea729d809b7b4ab05ea57e8f2d47ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkShutdown</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a87cc28dcc09c567de5750b17d55c91f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>adec328a1f03a90f2fa17ba7e5e261cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a1a607a46d28289e05d19a5f13a82a7ce</anchor>
      <arglist>(const Pointer&lt; ConnectionInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTempDestination</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a3d7447751c65dfe7774d7a4f274742cb</anchor>
      <arglist>(const Pointer&lt; DestinationInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTempDestination</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a26134cb900847339f0e306c5c0d302d7</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a7b64a972ff27206b7b69bf3ae819d8b8</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; TransactionState &gt; &amp;</type>
      <name>getTransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a1fc9a9ad2fa0521afaa8078891b5443c</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Pointer&lt; TransactionState &gt; &gt;</type>
      <name>getTransactionStates</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>aba8e818d3da0fae6f2fc25d70994f178</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TransactionState &gt;</type>
      <name>removeTransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>afec97a5b47ec57b5d378d9fe0642b846</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSession</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a09d581eb15ec4b03aa9714675e88a368</anchor>
      <arglist>(const Pointer&lt; SessionInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; SessionState &gt;</type>
      <name>removeSession</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a64db4d2cd80e8333302760335c6008b8</anchor>
      <arglist>(const Pointer&lt; SessionId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; SessionState &gt; &amp;</type>
      <name>getSessionState</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>aff3d050a08b0cadfa8e1b7d16b839cae</anchor>
      <arglist>(const Pointer&lt; SessionId &gt; &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const LinkedList&lt; Pointer&lt; DestinationInfo &gt; &gt; &amp;</type>
      <name>getTempDesinations</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a11fa6ec7f8d29cc939ca8acc6f3b31ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Pointer&lt; SessionState &gt; &gt;</type>
      <name>getSessionStates</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a761050e8e11890ccf04b5ca501d69864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StlMap&lt; Pointer&lt; ConsumerId &gt;, Pointer&lt; ConsumerInfo &gt;, ConsumerId::COMPARATOR &gt;</type>
      <name>getRecoveringPullConsumers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a90aa59cddc24cd5b803348e4070fd152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionInterruptProcessingComplete</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>ae8b70697a415c4d6375612453478094d</anchor>
      <arglist>(bool connectionInterruptProcessingComplete)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectionInterruptProcessingComplete</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state.html</anchorfile>
      <anchor>a46426b6cf52391d9a5b3ad30d5c38893</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::ConnectionStateTracker</name>
    <filename>classactivemq_1_1state_1_1_connection_state_tracker.html</filename>
    <base>activemq::state::CommandVisitorAdapter</base>
    <member kind="function">
      <type></type>
      <name>ConnectionStateTracker</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a09cb10c7694fbadcdb005695719075d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionStateTracker</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a86a88aab1fb916283a3764253d3b6ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; Tracked &gt;</type>
      <name>track</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a7c1d5f62c2ff5244081075cc7957ce96</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackBack</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>ace647dd9d59948ec848e86a58c505b4f</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a87fbd32a2af01517e1ebd5c5becdbc73</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectionInterruptProcessingComplete</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a46c12f1dcbb77c0e23220e1d2c711a43</anchor>
      <arglist>(transport::Transport *transport, const Pointer&lt; ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transportInterrupted</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a8670e5c3ad694e0bc53c284f9e1b68a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processDestinationInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a3bc7af87dc6b6e08253aa21b0bf79b56</anchor>
      <arglist>(DestinationInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processRemoveDestination</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>aff76b77e083b3394af2d0a07a66e2710</anchor>
      <arglist>(DestinationInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processProducerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a6c1a4833f5b5aa31082ce9cad79d7c76</anchor>
      <arglist>(ProducerInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processRemoveProducer</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>ad3c8e6ecd19282d732313f9bff52056c</anchor>
      <arglist>(ProducerId *id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processConsumerInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>abc05144982264f5fdd9ee06bfa71b0dd</anchor>
      <arglist>(ConsumerInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processRemoveConsumer</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a6e848ad32401325c382df1104c6ad8d0</anchor>
      <arglist>(ConsumerId *id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processSessionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>affe7bb1d28d63c85f7f9f8b0ee09561c</anchor>
      <arglist>(SessionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processRemoveSession</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a9a06bf9044f148800e932fa08645c243</anchor>
      <arglist>(SessionId *id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processConnectionInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a75ed7bbb62f2beea320bba77c7839a93</anchor>
      <arglist>(ConnectionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processRemoveConnection</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a7ebf007651e4b303f8eade55c4408ca6</anchor>
      <arglist>(ConnectionId *id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processMessage</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a1daa9c1b9266d251744ea8260da97a78</anchor>
      <arglist>(Message *message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processMessageAck</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a13409a24c23bc97f8a39ba0464eda404</anchor>
      <arglist>(MessageAck *ack)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processBeginTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a91b1f21b6f972d9b1c055e4354921a32</anchor>
      <arglist>(TransactionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processPrepareTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a83c69ae7b7eb438de926e45bd8750dfd</anchor>
      <arglist>(TransactionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processCommitTransactionOnePhase</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a1df2a69470fb2a3893f60567ad01f640</anchor>
      <arglist>(TransactionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processCommitTransactionTwoPhase</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>ab00a35af91ecb2b025a6814585499344</anchor>
      <arglist>(TransactionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processRollbackTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>ad9f4cbb73f9027a4fe6e5849a0ab6a10</anchor>
      <arglist>(TransactionInfo *info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Command &gt;</type>
      <name>processEndTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a7c9c9b1fcc1c889aeb74a33dbbbf7a9b</anchor>
      <arglist>(TransactionInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRestoreConsumers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a3d7721fd25215ef78a6037814238cdf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestoreConsumers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>aa39db7a793318127215b65381679b096</anchor>
      <arglist>(bool restoreConsumers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRestoreProducers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a697a0862aa659050c35be41ae24ba9a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestoreProducers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a80dcbfa0df8e62141d840277eb99c168</anchor>
      <arglist>(bool restoreProducers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRestoreSessions</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a816c5a35049c57cde6544503c0f8293e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestoreSessions</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a5f8d799a727f6c3a74937a3d197be125</anchor>
      <arglist>(bool restoreSessions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackTransactions</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a3a7f71b538dc4c757ecafc16ad2fe378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackTransactions</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a4360eb08a8bfdb0b7998b33be78de18e</anchor>
      <arglist>(bool trackTransactions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRestoreTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>aa4f4399e2439248a31301db23853fc30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestoreTransaction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a77f1474295516667c2493fa6ed0360da</anchor>
      <arglist>(bool restoreTransaction)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackMessages</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>ad714bf4786ef8e7a5413a95509001a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackMessages</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a1468335f5873340e8291ba10eb4c7f93</anchor>
      <arglist>(bool trackMessages)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxCacheSize</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a267db04614d37008b6592be477dd7117</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCacheSize</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a8005b60c4f4c93abb2f30f8e62b1af9f</anchor>
      <arglist>(int maxCacheSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackTransactionProducers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a4a3af7e91e55821819264d62315e9723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackTransactionProducers</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>aef8d92f317fb995f08a6c3bf37ea153f</anchor>
      <arglist>(bool trackTransactionProducers)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RemoveTransactionAction</name>
      <anchorfile>classactivemq_1_1state_1_1_connection_state_tracker.html</anchorfile>
      <anchor>a11e2829cf6256add7a0d06f951b7ebb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::ConsumerState</name>
    <filename>classactivemq_1_1state_1_1_consumer_state.html</filename>
    <member kind="function">
      <type></type>
      <name>ConsumerState</name>
      <anchorfile>classactivemq_1_1state_1_1_consumer_state.html</anchorfile>
      <anchor>afececede74f047fae637871bc6bfd51d</anchor>
      <arglist>(const Pointer&lt; ConsumerInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerState</name>
      <anchorfile>classactivemq_1_1state_1_1_consumer_state.html</anchorfile>
      <anchor>a5a53fada5eace16df79c1c7d001be085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1state_1_1_consumer_state.html</anchorfile>
      <anchor>a2efaf48ddd13aa52019a4c7a34aeaed9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; ConsumerInfo &gt; &amp;</type>
      <name>getInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_consumer_state.html</anchorfile>
      <anchor>a50635cb8e07f1c4706cb8964f3cdead3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::ProducerState</name>
    <filename>classactivemq_1_1state_1_1_producer_state.html</filename>
    <member kind="function">
      <type></type>
      <name>ProducerState</name>
      <anchorfile>classactivemq_1_1state_1_1_producer_state.html</anchorfile>
      <anchor>a3c64e138f8e82d2fe7093027b6def3aa</anchor>
      <arglist>(const Pointer&lt; ProducerInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerState</name>
      <anchorfile>classactivemq_1_1state_1_1_producer_state.html</anchorfile>
      <anchor>a3c828ca53c3f9d8cb4158456fefaf8c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1state_1_1_producer_state.html</anchorfile>
      <anchor>a92fafab05f9f800496bbd3c71587b2b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; ProducerInfo &gt; &amp;</type>
      <name>getInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_producer_state.html</anchorfile>
      <anchor>ae2ac03c9f12b2e19a143fc6489f68816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_producer_state.html</anchorfile>
      <anchor>a565d5eecd2b487b465eb85567fcbad51</anchor>
      <arglist>(const Pointer&lt; TransactionState &gt; &amp;transactionState)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TransactionState &gt;</type>
      <name>getTransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_producer_state.html</anchorfile>
      <anchor>a0674add4d54294f0b8a1850dc57ae5eb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::SessionState</name>
    <filename>classactivemq_1_1state_1_1_session_state.html</filename>
    <member kind="function">
      <type></type>
      <name>SessionState</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>ad3d67630601a989d0ccf4579f0560f1f</anchor>
      <arglist>(const Pointer&lt; SessionInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionState</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a9bb8972cd05cae899273ffabe7930607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>ae007331dc5be2175568df3099bd8c02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; SessionInfo &gt;</type>
      <name>getInfo</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>adfe5fe550db7acb0fab7b47bcb6a01a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProducer</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a1c29dac4eb5f910cad17f21303647177</anchor>
      <arglist>(const Pointer&lt; ProducerInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ProducerState &gt;</type>
      <name>removeProducer</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a5b7474253ef71b94594c10762417e22a</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConsumer</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a88d9be2fbc6a13e166f46edbb01c66dd</anchor>
      <arglist>(const Pointer&lt; ConsumerInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ConsumerState &gt;</type>
      <name>removeConsumer</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>ab2f2d6db08344fd94cb34b91241a75ff</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Pointer&lt; ProducerState &gt; &gt;</type>
      <name>getProducerStates</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a68da7877890934be9692fba668de0105</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ProducerState &gt;</type>
      <name>getProducerState</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>ae3bbf4efd3eb251e2c7e10f1d590f55c</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Pointer&lt; ConsumerState &gt; &gt;</type>
      <name>getConsumerStates</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a8693f89d3f79c8abba5e7a7ba0941eaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ConsumerState &gt;</type>
      <name>getConsumerState</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a9dcf1bc8d4db6c2c2cdb51efc74ceac2</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkShutdown</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>afaa82cac64d2ecdeeb95cf9218bd7b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1state_1_1_session_state.html</anchorfile>
      <anchor>a5d85a2bc6d486b776747ebdfb0a0ab6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::Tracked</name>
    <filename>classactivemq_1_1state_1_1_tracked.html</filename>
    <base>activemq::commands::Response</base>
    <member kind="function">
      <type></type>
      <name>Tracked</name>
      <anchorfile>classactivemq_1_1state_1_1_tracked.html</anchorfile>
      <anchor>a09f9332618e7efb03affb79cc60c361a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracked</name>
      <anchorfile>classactivemq_1_1state_1_1_tracked.html</anchorfile>
      <anchor>a1335c2aea78156f9856b7d2e8bb91700</anchor>
      <arglist>(const Pointer&lt; decaf::lang::Runnable &gt; &amp;runnable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Tracked</name>
      <anchorfile>classactivemq_1_1state_1_1_tracked.html</anchorfile>
      <anchor>a727013741b10e67479b2103c31b474da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onResponse</name>
      <anchorfile>classactivemq_1_1state_1_1_tracked.html</anchorfile>
      <anchor>afb65db94b52728920f3d5b325bb3e354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWaitingForResponse</name>
      <anchorfile>classactivemq_1_1state_1_1_tracked.html</anchorfile>
      <anchor>a24ed289e8dfbf6a89d595c66880f8ac1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::state::TransactionState</name>
    <filename>classactivemq_1_1state_1_1_transaction_state.html</filename>
    <member kind="function">
      <type></type>
      <name>TransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>a979b9340a7f56b64edafc4f2ac0bd5c3</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionState</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>ab088046add3db072739324e322fbe03d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>ac1cd18997fdbe9d3bc71a8fedf7a0005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCommand</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>aa8408ed7d9fa5208ebac79895b533db1</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;operation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkShutdown</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>a98eedad81cd736ce9fb215451ad60407</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>afa442b6a58afea824e82710b9bdf4dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinkedList&lt; Pointer&lt; Command &gt; &gt; &amp;</type>
      <name>getCommands</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>a4114e0763c45d77bdb59e357cae2d302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; TransactionId &gt; &amp;</type>
      <name>getId</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>ae0b80561425339471fbb5f4120797e56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrepared</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>a42e51ecf66d930061f8d1c4556af1b69</anchor>
      <arglist>(bool prepared)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrepared</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>aaf5153c48276f85623c4f92ca96aa83b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreparedResult</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>adc15710e8ac94ae54d440ecbd4f81582</anchor>
      <arglist>(int preparedResult)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPreparedResult</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>abbc003a8aacdb0d4b8cb3da888865681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addProducerState</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>a1e10184e1eca4c00a10c12958da4b5fe</anchor>
      <arglist>(const Pointer&lt; ProducerState &gt; &amp;producerState)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Pointer&lt; ProducerState &gt; &gt;</type>
      <name>getProducerStates</name>
      <anchorfile>classactivemq_1_1state_1_1_transaction_state.html</anchorfile>
      <anchor>a036384e41a1dfa3d47158b797ca698a7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::threads</name>
    <filename>namespaceactivemq_1_1threads.html</filename>
    <class kind="class">activemq::threads::CompositeTask</class>
    <class kind="class">activemq::threads::CompositeTaskRunner</class>
    <class kind="class">activemq::threads::DedicatedTaskRunner</class>
    <class kind="class">activemq::threads::Scheduler</class>
    <class kind="class">activemq::threads::SchedulerTimerTask</class>
    <class kind="class">activemq::threads::Task</class>
    <class kind="class">activemq::threads::TaskRunner</class>
  </compound>
  <compound kind="class">
    <name>activemq::threads::CompositeTask</name>
    <filename>classactivemq_1_1threads_1_1_composite_task.html</filename>
    <base>activemq::threads::Task</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeTask</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task.html</anchorfile>
      <anchor>a1d269d43a3138f4b0e00c20c930f3da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPending</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task.html</anchorfile>
      <anchor>ae278f8b17ac92e5fbb4e2f88cbe022c8</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::threads::CompositeTaskRunner</name>
    <filename>classactivemq_1_1threads_1_1_composite_task_runner.html</filename>
    <base>activemq::threads::TaskRunner</base>
    <base>activemq::threads::Task</base>
    <base>decaf::lang::Runnable</base>
    <member kind="function">
      <type></type>
      <name>CompositeTaskRunner</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>ad23fe6258bb3a8f6d43cc9bb4c06c692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeTaskRunner</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a18ca6cda49c4a65079b4b9b218c33829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a06431ed0ecf2fb50a76b91956f81c202</anchor>
      <arglist>(CompositeTask *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a00a1ff5d48685a05688651726ed744c6</anchor>
      <arglist>(CompositeTask *task)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>abe99422fca912fbe57a1a1d7f037023b</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a50f9c295205fbf05b84feebb4aca09a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a0c854e3e9807bbe38f87d7781a7c860f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a0095906af32fb7ea3fc04b748145e1ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1threads_1_1_composite_task_runner.html</anchorfile>
      <anchor>a54a8bad6fe7fcf08e386257282001d3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::threads::DedicatedTaskRunner</name>
    <filename>classactivemq_1_1threads_1_1_dedicated_task_runner.html</filename>
    <base>activemq::threads::TaskRunner</base>
    <base>decaf::lang::Runnable</base>
    <member kind="function">
      <type></type>
      <name>DedicatedTaskRunner</name>
      <anchorfile>classactivemq_1_1threads_1_1_dedicated_task_runner.html</anchorfile>
      <anchor>a4a0d1593727c1ae952e591800454e4fd</anchor>
      <arglist>(Task *task)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DedicatedTaskRunner</name>
      <anchorfile>classactivemq_1_1threads_1_1_dedicated_task_runner.html</anchorfile>
      <anchor>a9d94c4b848bcb633fd58f672e9165d7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_dedicated_task_runner.html</anchorfile>
      <anchor>a3a42e99dc026bf72f50bdeeb384b3629</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_dedicated_task_runner.html</anchorfile>
      <anchor>a8d912289f2742e4feb3bb050b8aeb686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wakeup</name>
      <anchorfile>classactivemq_1_1threads_1_1_dedicated_task_runner.html</anchorfile>
      <anchor>a6e56cd72909381a2a63e5912f5232299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1threads_1_1_dedicated_task_runner.html</anchorfile>
      <anchor>a5da19e5f33cd89aef3d0c9e4e17f5372</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::threads::Scheduler</name>
    <filename>classactivemq_1_1threads_1_1_scheduler.html</filename>
    <base>activemq::util::ServiceSupport</base>
    <member kind="function">
      <type></type>
      <name>Scheduler</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a09e5385c7c5f5a41c6111be1761084ed</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Scheduler</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a0db428d5eba37178012f9c964e58d3c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executePeriodically</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a99846d76993e9c66721eb88f81fbb856</anchor>
      <arglist>(decaf::lang::Runnable *task, long long period, bool ownsTask=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedualPeriodically</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a27d76b18050682083442a8cd21125ba2</anchor>
      <arglist>(decaf::lang::Runnable *task, long long period, bool ownsTask=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a6f0bc8fd9ac2dc2890dbbdec73413845</anchor>
      <arglist>(decaf::lang::Runnable *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeAfterDelay</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a15d0886d0e5480635a27c372c3533dcf</anchor>
      <arglist>(decaf::lang::Runnable *task, long long delay, bool ownsTask=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a49f5310acf74ee96629fe3c7d8df159b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doStart</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a4d1bd0df9951c9d15795de109a243d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doStop</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler.html</anchorfile>
      <anchor>a0d642ce31efa387942b663a5ae8b7aef</anchor>
      <arglist>(activemq::util::ServiceStopper *stopper)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::threads::SchedulerTimerTask</name>
    <filename>classactivemq_1_1threads_1_1_scheduler_timer_task.html</filename>
    <base>decaf::util::TimerTask</base>
    <member kind="function">
      <type></type>
      <name>SchedulerTimerTask</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler_timer_task.html</anchorfile>
      <anchor>ab2790c7054f8b8cc31c721d857be5747</anchor>
      <arglist>(decaf::lang::Runnable *task, bool ownsTask=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SchedulerTimerTask</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler_timer_task.html</anchorfile>
      <anchor>ac0ea3f9d9c1f27d9f71307b64849460b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1threads_1_1_scheduler_timer_task.html</anchorfile>
      <anchor>a64a2a74eac178c3785858e0d19aceb5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::threads::Task</name>
    <filename>classactivemq_1_1threads_1_1_task.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>classactivemq_1_1threads_1_1_task.html</anchorfile>
      <anchor>a6fea152f5bd1447b19ab45b7c6d97d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1threads_1_1_task.html</anchorfile>
      <anchor>acd905a469028d795da2d4e4cb4c7447b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::threads::TaskRunner</name>
    <filename>classactivemq_1_1threads_1_1_task_runner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TaskRunner</name>
      <anchorfile>classactivemq_1_1threads_1_1_task_runner.html</anchorfile>
      <anchor>a4f2592ea96170dd1b5d7da1c1dd05249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_task_runner.html</anchorfile>
      <anchor>ad9ac77625789d09972be31a4bcde922f</anchor>
      <arglist>(unsigned int timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classactivemq_1_1threads_1_1_task_runner.html</anchorfile>
      <anchor>a884d079da4f9feb1d6da9cb153fecb22</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>wakeup</name>
      <anchorfile>classactivemq_1_1threads_1_1_task_runner.html</anchorfile>
      <anchor>a04109ee35a4f3cf890ea82e449713f12</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport</name>
    <filename>namespaceactivemq_1_1transport.html</filename>
    <namespace>activemq::transport::correlator</namespace>
    <namespace>activemq::transport::failover</namespace>
    <namespace>activemq::transport::inactivity</namespace>
    <namespace>activemq::transport::logging</namespace>
    <namespace>activemq::transport::mock</namespace>
    <namespace>activemq::transport::tcp</namespace>
    <class kind="class">activemq::transport::AbstractTransportFactory</class>
    <class kind="class">activemq::transport::CompositeTransport</class>
    <class kind="class">activemq::transport::DefaultTransportListener</class>
    <class kind="class">activemq::transport::IOTransport</class>
    <class kind="class">activemq::transport::Transport</class>
    <class kind="class">activemq::transport::TransportFactory</class>
    <class kind="class">activemq::transport::TransportFilter</class>
    <class kind="class">activemq::transport::TransportListener</class>
    <class kind="class">activemq::transport::TransportRegistry</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::AbstractTransportFactory</name>
    <filename>classactivemq_1_1transport_1_1_abstract_transport_factory.html</filename>
    <base>activemq::transport::TransportFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractTransportFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1_abstract_transport_factory.html</anchorfile>
      <anchor>a3e7e838b8b523b25e278fc4b26c657bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Pointer&lt; wireformat::WireFormat &gt;</type>
      <name>createWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1_abstract_transport_factory.html</anchorfile>
      <anchor>abcf9113ca2e2abe4d7096cc5f0ec306d</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::CompositeTransport</name>
    <filename>classactivemq_1_1transport_1_1_composite_transport.html</filename>
    <base>activemq::transport::Transport</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1_composite_transport.html</anchorfile>
      <anchor>ae88dba740c55a10682d70828f811cf9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addURI</name>
      <anchorfile>classactivemq_1_1transport_1_1_composite_transport.html</anchorfile>
      <anchor>a74d925d9653fafcc6c58e7f874c36d53</anchor>
      <arglist>(bool rebalance, const List&lt; URI &gt; &amp;uris)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeURI</name>
      <anchorfile>classactivemq_1_1transport_1_1_composite_transport.html</anchorfile>
      <anchor>ab8e7493e41b86357e5f6d5742000f0e8</anchor>
      <arglist>(bool rebalance, const List&lt; URI &gt; &amp;uris)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::DefaultTransportListener</name>
    <filename>classactivemq_1_1transport_1_1_default_transport_listener.html</filename>
    <base>activemq::transport::TransportListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_default_transport_listener.html</anchorfile>
      <anchor>a6174cc9ca3a9b3409bf350875f0c4569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1_default_transport_listener.html</anchorfile>
      <anchor>a5faeddc18aec5842fc7355460c517378</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1transport_1_1_default_transport_listener.html</anchorfile>
      <anchor>a106a1e76c4029cab56cdd6332317deee</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportInterrupted</name>
      <anchorfile>classactivemq_1_1transport_1_1_default_transport_listener.html</anchorfile>
      <anchor>a59f59bf0c9fc27d28f2999b359e1f718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportResumed</name>
      <anchorfile>classactivemq_1_1transport_1_1_default_transport_listener.html</anchorfile>
      <anchor>ac9e1b617a78cc5ba0f8f2a08545a69b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::IOTransport</name>
    <filename>classactivemq_1_1transport_1_1_i_o_transport.html</filename>
    <base>activemq::transport::Transport</base>
    <base>decaf::lang::Runnable</base>
    <member kind="function">
      <type></type>
      <name>IOTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a9468cb721142b56cc1ef2fd302db9462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a606728a7cb1e264cfcb348007abef625</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a44652809deb4840e4a3292c084ce4c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInputStream</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>ac572f88afd35ff74faf827e66e4072ec</anchor>
      <arglist>(decaf::io::DataInputStream *is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOutputStream</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a79fb0ef1c8309a9f6c7a59e0be7b0c34</anchor>
      <arglist>(decaf::io::DataOutputStream *os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a74c87e4b0c2abbe44b56e4852f5fc68a</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>adb1ae105bea15ffb85c1e144404324e7</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a0417d274444cd4caa923be1f27140306</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a3eb50f5c0493827dca910b0c04a8e54e</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>af4cc27d1bbfbebaa5e1bac63096f7341</anchor>
      <arglist>(TransportListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportListener *</type>
      <name>getTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a7906236d2d1f7d9ef1aa4a6ec4deafd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a37290e0df9da76cda72b0672e3561894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a2aeb32df0d3b4bcfa5c94c5085fc701b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a95846e911a369efec40c8611d8e11111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transport *</type>
      <name>narrow</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a290f2ea6b4e5a5f7ff441056bf684b2f</anchor>
      <arglist>(const std::type_info &amp;typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a92b0b51fd97420fba7c0bb87c03f1c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a1588fdb6ca025fd78d00b32b3e29c996</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>adb8518b55d7358b87f895e155f3f9d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteAddress</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a2e9e349a8fcf828b37078c6050376432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReconnectSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>ae5615cf1af1113a59e8cafd84c1760a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpdateURIsSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>acb149cd8c4688d458aa9c6268dadd9f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateURIs</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a079588eb9a7b7a4a43b8dc607f183f22</anchor>
      <arglist>(bool rebalance AMQCPP_UNUSED, const decaf::util::List&lt; decaf::net::URI &gt; &amp;uris AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnect</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a89d35dfb0e6dd9cc2b2e51dde9364106</anchor>
      <arglist>(const decaf::net::URI &amp;uri AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1transport_1_1_i_o_transport.html</anchorfile>
      <anchor>a982b8ff5ef0c8422b6aafef2f326d46d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::Transport</name>
    <filename>classactivemq_1_1transport_1_1_transport.html</filename>
    <base>decaf::io::Closeable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transport</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>ada70d161736fa70ace540f330b527e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a391d4a75b22491ebe29d217ad5e7207c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>ab44c586133dbffde04306ecda6efb436</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a4182721c90bd41432b26a6a7483f3648</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a5228bdfc4a9b4316c0417e3e06ba3509</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>aa76a2d84f9593fc0ed7bf8c9f143b887</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a572a03d33f1934331c5cee62f0addf37</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a7b126499443fcad2970d8f031d6bf081</anchor>
      <arglist>(TransportListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TransportListener *</type>
      <name>getTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a1f9f45323d6bd9cda3f5935eabf062f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transport *</type>
      <name>narrow</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a787bd60aaa225729f312405af41cd7e1</anchor>
      <arglist>(const std::type_info &amp;typeId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a0104d40c6583778314ea8dd1e5a06602</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a9bb23c54180d73dec9ae445974ef0adb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>ac1ca240d0462ba90cd0af55ac9f9062a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isReconnectSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a15042e8382cb88dfde691c1719c163e9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUpdateURIsSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a6d979c0fea1fd6455b3d1c9469ab5dca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getRemoteAddress</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a5f6035367bcc828a1d3aa8768b00e9d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reconnect</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a041b44ee15c6b4d0795329101c17158c</anchor>
      <arglist>(const decaf::net::URI &amp;uri)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateURIs</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport.html</anchorfile>
      <anchor>a4713fbe335d6afccc74cedf9acb27a53</anchor>
      <arglist>(bool rebalance, const decaf::util::List&lt; decaf::net::URI &gt; &amp;uris)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::TransportFactory</name>
    <filename>classactivemq_1_1transport_1_1_transport_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransportFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_factory.html</anchorfile>
      <anchor>acc325e9853b32f3de4201bbbe81ac513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>create</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_factory.html</anchorfile>
      <anchor>ab6eb823ed67da847350e6514e9fc1e8f</anchor>
      <arglist>(const decaf::net::URI &amp;location)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>createComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_factory.html</anchorfile>
      <anchor>a59d35eadc9d37f9cf61dd983f93a697c</anchor>
      <arglist>(const decaf::net::URI &amp;location)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::TransportFilter</name>
    <filename>classactivemq_1_1transport_1_1_transport_filter.html</filename>
    <base>activemq::transport::Transport</base>
    <base>activemq::transport::TransportListener</base>
    <member kind="function">
      <type></type>
      <name>TransportFilter</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>aa5429b5861c1afcd163a1e72d95de3ba</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransportFilter</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>aac3a6ca204227ccdfe2aad7a1e824313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a0f4291247157506ff7da93b3466b5b4d</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>ab556ce3b648282b162af20505e7168d6</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportInterrupted</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a38c91af7f8d6b663e58453b03223650e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportResumed</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a20006f2a87006bd5c703a8dd08c24f68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a2dadf4298231f200509722e4c99c775d</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>aa7b259d9a5a99c4d318b7fa265f2a680</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>ad5b967df4df1e15a763c98a350a96cf0</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a9287ff108648bf18fd21928020e903e2</anchor>
      <arglist>(TransportListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportListener *</type>
      <name>getTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a0ebcb9f77d73ec77f0a72336afddbfc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a0bf0789586345336fb701a77238421f2</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>abc3d3346e3c08542d31371247bd891e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a1a36eecfbae05c6ab5505c30d619885f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a9c7341007b0adf1246adfc783ad49fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transport *</type>
      <name>narrow</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a276b29590969542fc0bb791fc1c6dbb8</anchor>
      <arglist>(const std::type_info &amp;typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a9a0a619af5029dd60cfff1467449ab8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>afc5d7c25a88ca366fb1289210add16cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReconnectSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a6d962451f545b742c996569ae132318d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpdateURIsSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>af914ded3e449fac57c01f5970a9f5e14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a5ea9da1de3275cf75d03c8c47e0648e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteAddress</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>aeaec98a78d596632b2acb40f638e5b0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnect</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a5a7115560700956dd2265648df123456</anchor>
      <arglist>(const decaf::net::URI &amp;uri)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateURIs</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a70221fa9342fd0e1eed5e7d48a83e151</anchor>
      <arglist>(bool rebalance, const decaf::util::List&lt; decaf::net::URI &gt; &amp;uris)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fire</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>adce8049b27ad24ddd9bdb544b091b561</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fire</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>aafa8976e049d4b5393c47ce3105cc44f</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pointer&lt; Transport &gt;</type>
      <name>next</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>af278af9a7f133ad41aeea8c2b7a04a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportListener *</type>
      <name>listener</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_filter.html</anchorfile>
      <anchor>a3f27f2de9f96d14049c1eafc30b22886</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::TransportListener</name>
    <filename>classactivemq_1_1transport_1_1_transport_listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_listener.html</anchorfile>
      <anchor>ab0538be07b5751967700e8f63425ebca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_listener.html</anchorfile>
      <anchor>a6fe6bb9c9e981af541f9d62c74c09c71</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_listener.html</anchorfile>
      <anchor>a75805597dcfe32d2ea0894f263ddea82</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transportInterrupted</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_listener.html</anchorfile>
      <anchor>adfe926d1a33816fd73c58103b22ff17c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transportResumed</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_listener.html</anchorfile>
      <anchor>ae4779a98227ea3d61696b630c06f4865</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::TransportRegistry</name>
    <filename>classactivemq_1_1transport_1_1_transport_registry.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransportRegistry</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>ac05336a279402886fb57e39f86e04a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TransportFactory *</type>
      <name>findFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>a5924998716b5f779f1b60235aaf01fcb</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>a05b2442a03c504a42787cfde94aea492</anchor>
      <arglist>(const std::string &amp;name, TransportFactory *factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>a96066cd1c779d3e6aae5c9d75ac9de49</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterAllFactories</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>a3ed870757417d3febdce0c430df34c54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getTransportNames</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>a5327055dc17453523cadcfdd83b47b0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransportRegistry &amp;</type>
      <name>getInstance</name>
      <anchorfile>classactivemq_1_1transport_1_1_transport_registry.html</anchorfile>
      <anchor>ad7dfc39fecc2defbb097c14a68b9c09d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport::correlator</name>
    <filename>namespaceactivemq_1_1transport_1_1correlator.html</filename>
    <class kind="class">activemq::transport::correlator::FutureResponse</class>
    <class kind="class">activemq::transport::correlator::ResponseCorrelator</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::correlator::FutureResponse</name>
    <filename>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</filename>
    <member kind="function">
      <type></type>
      <name>FutureResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a0877138c8fd58ab4ae68a5439e096447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FutureResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a5fdcaa00cab490f4d34d83fe4e249fd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; Response &gt; &amp;</type>
      <name>getResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a09e1215c94d7caa1eab5a574ae8cee34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt; &amp;</type>
      <name>getResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a277ceeefd2f823f035c498fe3246f42d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pointer&lt; Response &gt; &amp;</type>
      <name>getResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a4d59814a4e2644c739f36b60e7acb578</anchor>
      <arglist>(unsigned int timeout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt; &amp;</type>
      <name>getResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a62f7b8bc0516f27f774d34afd95a4dcc</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_future_response.html</anchorfile>
      <anchor>a878a627e29609faae6d9f12144b91422</anchor>
      <arglist>(const Pointer&lt; Response &gt; &amp;response)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::correlator::ResponseCorrelator</name>
    <filename>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</filename>
    <base>activemq::transport::TransportFilter</base>
    <member kind="function">
      <type></type>
      <name>ResponseCorrelator</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a65c94c2a6ff4a8b71e20de263d2141b3</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResponseCorrelator</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a8fabd0268915bf50f7e674623b90ebce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a8fd48c9ec340b5ec543da80aece8e94a</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a29337d9992976d07590fa907028407f5</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a52930973830c9e1875c098e8be3a9446</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a331139c4071dac2a384958f842a4c369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>adb7203675e2d6e216e7d8ca3318ff104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>a4270574904acdd9d818902cb5fc71823</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onTransportException</name>
      <anchorfile>classactivemq_1_1transport_1_1correlator_1_1_response_correlator.html</anchorfile>
      <anchor>aaecb1612acdc0afdc3edb5a28eaa96f6</anchor>
      <arglist>(Transport *source, const decaf::lang::Exception &amp;ex)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport::failover</name>
    <filename>namespaceactivemq_1_1transport_1_1failover.html</filename>
    <class kind="class">activemq::transport::failover::BackupTransport</class>
    <class kind="class">activemq::transport::failover::BackupTransportPool</class>
    <class kind="class">activemq::transport::failover::CloseTransportsTask</class>
    <class kind="class">activemq::transport::failover::FailoverTransport</class>
    <class kind="class">activemq::transport::failover::FailoverTransportFactory</class>
    <class kind="class">activemq::transport::failover::FailoverTransportListener</class>
    <class kind="class">activemq::transport::failover::URIPool</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::BackupTransport</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</filename>
    <base>activemq::transport::DefaultTransportListener</base>
    <member kind="function">
      <type></type>
      <name>BackupTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a8aa74dd35d54b46d9cfbe0251e59a1be</anchor>
      <arglist>(BackupTransportPool *failover)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BackupTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>ad296d576b640062285b2f5bb4405b2fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decaf::net::URI</type>
      <name>getUri</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a7c663e61b2e50bcb80f7a42933af0b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUri</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>aee04efe1f2c291fc74ef1052b879fc96</anchor>
      <arglist>(const decaf::net::URI &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; Transport &gt; &amp;</type>
      <name>getTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a9b385ae295a68a2d0615740fc1281e7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a2964c39d1aca0d66bd2c0c25a67b9ddf</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a1637343204a7ef6f4c4e130f42ff3dfd</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a62997665206a26cf612f3a8f1a134f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport.html</anchorfile>
      <anchor>a880a3c77315326c014b44efdd5a2faa0</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::BackupTransportPool</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</filename>
    <base>activemq::threads::CompositeTask</base>
    <member kind="function">
      <type></type>
      <name>BackupTransportPool</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>ab5e6937961f0f9ae75c20985fc366f2e</anchor>
      <arglist>(const Pointer&lt; CompositeTaskRunner &gt; &amp;taskRunner, const Pointer&lt; CloseTransportsTask &gt; &amp;closeTask, const Pointer&lt; URIPool &gt; &amp;uriPool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackupTransportPool</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>abd794d8289bc14063e727519e3e6a6dd</anchor>
      <arglist>(int backupPoolSize, const Pointer&lt; CompositeTaskRunner &gt; &amp;taskRunner, const Pointer&lt; CloseTransportsTask &gt; &amp;closeTask, const Pointer&lt; URIPool &gt; &amp;uriPool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BackupTransportPool</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>a1f9578ea3e54a9d20b004eb9633cb3da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPending</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>a7e93f4e7b864cc71877f488207134608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; BackupTransport &gt;</type>
      <name>getBackup</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>a35f3027e92862a433bbd6256a94e12ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>a5404e1841221c18b1fae2ec640e0ad90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBackupPoolSize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>a9b07f8f4663be556e6ecfbf80236d9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackupPoolSize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>afbcc225d706dbdb39faff50e33a17b77</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>ae175cd34ec240a02778fe5b4a63e38b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>a32d597c88d2e446fab9aceed87eccb35</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BackupTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_backup_transport_pool.html</anchorfile>
      <anchor>af715958184e1480fc9f75b7a90f8e008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::CloseTransportsTask</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_close_transports_task.html</filename>
    <base>activemq::threads::CompositeTask</base>
    <member kind="function">
      <type></type>
      <name>CloseTransportsTask</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_close_transports_task.html</anchorfile>
      <anchor>a87ed46409cc787c64111c2452f0b18c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CloseTransportsTask</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_close_transports_task.html</anchorfile>
      <anchor>a76df72525beb98d82590b557abb7fc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_close_transports_task.html</anchorfile>
      <anchor>a58d07843b1744f471e468c1a4b484144</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;transport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPending</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_close_transports_task.html</anchorfile>
      <anchor>a42cd0b75e2257d6e03e56028b97183b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_close_transports_task.html</anchorfile>
      <anchor>a6d07b1b9e68728c54ebdd20d491bc549</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::FailoverTransport</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</filename>
    <base>activemq::transport::CompositeTransport</base>
    <base>activemq::threads::CompositeTask</base>
    <member kind="function">
      <type></type>
      <name>FailoverTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a647fb76aa0d67113233ad1138695e0bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FailoverTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ac791ae5615e80f3fe1eba6e033a5c649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconnect</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ab0be468f2d8fa4bead3d0eaa7b8f7a6f</anchor>
      <arglist>(bool rebalance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ade13f35ff1f9023ce61dc095919d4835</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addURI</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ac3cd64409b0e20957be2c7652e3c8d1d</anchor>
      <arglist>(bool rebalance, const List&lt; URI &gt; &amp;uris)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeURI</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a566c7441e008d95c3cbf00e8fa659aae</anchor>
      <arglist>(bool rebalance, const List&lt; URI &gt; &amp;uris)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a01723fa493426de0df1e77bdd7ca6bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a26e8cfe200ed50606de9a77c196f47dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a1a0d3ff7cb7008c3f2ce9cc6447c8a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a86d179d9787b50e21bc683fcfaee0077</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>aa0a9712a2e82eedaf09ca5d509c2ea90</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>aa0c3f72eeb8e6538f435a515a0b6ab31</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a31ba0b7ced4873db3bd5d75074d85d29</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>aaebc141f1189170b3386813088d985ef</anchor>
      <arglist>(TransportListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportListener *</type>
      <name>getTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ae935ac73471cb549bbc95ed95734d51f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a67c7dfdcac34ee7b035a37f8831db535</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a505b89612f755fc3ea819bfe45d095ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ae67a81d3ec553c456c510ccc38838af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a2aab55b43bbb734750d52d4b2f54d0ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialized</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a55e8f6ffdeee0f0b64e01d2dd1bb74ad</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transport *</type>
      <name>narrow</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a08126bc39b81d95f555c4a842085a10e</anchor>
      <arglist>(const std::type_info &amp;typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteAddress</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>af8cb1d2346b5232c396720b4f83f1ba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnect</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a98bf1d3acdf0e4c341ce883c2775bc4b</anchor>
      <arglist>(const decaf::net::URI &amp;uri)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateURIs</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>acd24c5124a65ecc19da783eb6714b5ff</anchor>
      <arglist>(bool rebalance, const decaf::util::List&lt; decaf::net::URI &gt; &amp;uris)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPending</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a64394db18bebe6de5592130654a75d83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a407c82cfefc517ad4665be7b22ffb943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getTimeout</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a74ed3a64d17a9ef121ec6ca83ed993d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ae8ac5d014234eefda256baaebc80e594</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getInitialReconnectDelay</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a25f46929edf1b518b59effbd3fca08e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialReconnectDelay</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a05ef9c0b96adee0aff604c4990f26e89</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getMaxReconnectDelay</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a6b583e8a32a17c1a0ee03e770fdd4c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxReconnectDelay</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a69d7b17c2647d821b63f37b3ac275660</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getBackOffMultiplier</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a3514be4b7dadbebb3bdd9f6d16b67631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackOffMultiplier</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a91b995eb036f256c4572eac7bdac1098</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUseExponentialBackOff</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a62db6554c8fa5e87544a204daef13e40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseExponentialBackOff</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a4f07f6fe8112453a5eadf0787a29f072</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRandomize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a70bfa30f3d43a4a0cb568fbcd397be07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a8693dd7e91fe50369d066b007c1fa7c3</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxReconnectAttempts</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a25d9a8c46b09185bd97b71083735c5b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxReconnectAttempts</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a0f36e352a3a7c355b0c2e4a37b426afc</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStartupMaxReconnectAttempts</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>aa0139907330f8e1cae634e9a909bdb57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartupMaxReconnectAttempts</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ae4b728581a1bce5be4283725f87bec8d</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getReconnectDelay</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ac3a3f337d3eaff804c7eee8d50fda2d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReconnectDelay</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a4fe005d9e991efea85a5978617e92066</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBackup</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ae93ad45836c780a0644f84dd47f8f9cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackup</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a19eae9b45c7cdc2cf703680949db42c2</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBackupPoolSize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ac57c0b0d5d80ac00c27ed8f76d1616d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackupPoolSize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a5edfea5565c00bc87f3d23240d08961e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackMessages</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a1e24cb05d9b26ec67625e981ef6d86a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackMessages</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a615be14890d322c23dd8f967331f1aab</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrackTransactionProducers</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a2f74c816b335ac47a2d3ddf51170f802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackTransactionProducers</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>afcaa362a3016e213199342aa91f8959f</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxCacheSize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>aa31583de2a893ceb439b2b8e4b6d2d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCacheSize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a7e45d6717e492e4cbd797a5495342af1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReconnectSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a5fd647e2f50a2d5a0c8830598cfca317</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReconnectSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a9f7d3c978f1b8170c6c4028dc020f0a2</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdateURIsSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a0aa0b3798783a51c2ca61822ec25d918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateURIsSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a21fe96694a4881c0f176638840310af6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionInterruptProcessingComplete</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a5cc8e187cdc2bd92e8388413543570df</anchor>
      <arglist>(const Pointer&lt; commands::ConnectionId &gt; &amp;connectionId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>restoreTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ab6f0fe5cf56ad2a581244890ffb75279</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;transport)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTransportFailure</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>aa3256aaa6def5a2b030cc34e2bf3e9cc</anchor>
      <arglist>(const decaf::lang::Exception &amp;error)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleConnectionControl</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>ac88515c5ffe9689a3f2d87c4d48439df</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;control)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FailoverTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport.html</anchorfile>
      <anchor>a1ec7ef4d4fe66e1351258a7f86ffd30f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::FailoverTransportFactory</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_failover_transport_factory.html</filename>
    <base>activemq::transport::AbstractTransportFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FailoverTransportFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_factory.html</anchorfile>
      <anchor>ab252328f73f66a21eda1e6476f13fc5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>create</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_factory.html</anchorfile>
      <anchor>a4a2b9d92c1acb2f673a10ecefe1550f7</anchor>
      <arglist>(const decaf::net::URI &amp;location)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>createComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_factory.html</anchorfile>
      <anchor>a721504e7ff8e2ab508e3cfce6b030e47</anchor>
      <arglist>(const decaf::net::URI &amp;location)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>doCreateComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_factory.html</anchorfile>
      <anchor>a7590c1ae3963369dbc5723e4e87aae71</anchor>
      <arglist>(const decaf::net::URI &amp;location, const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::FailoverTransportListener</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</filename>
    <base>activemq::transport::TransportListener</base>
    <member kind="function">
      <type></type>
      <name>FailoverTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</anchorfile>
      <anchor>afade250bc3d41da51979501a2ae423ad</anchor>
      <arglist>(FailoverTransport *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FailoverTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</anchorfile>
      <anchor>af1f3abafcfc22c4abfd786e5d7bc8a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</anchorfile>
      <anchor>a49f418acabc8f0b7b41f7e35279c6623</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</anchorfile>
      <anchor>adb8ffe6659d4ddeeaec24e5ec82cf0d2</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportInterrupted</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</anchorfile>
      <anchor>af6245dff7809030189185aca7696fcd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transportResumed</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_failover_transport_listener.html</anchorfile>
      <anchor>a4ea004da3d20baecd90963cbadb3ac23</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::failover::URIPool</name>
    <filename>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>URIPool</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>a8aa9cc878275bade9a483b1558b94a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URIPool</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>aa222d7884d8bae3f51744d4372b18eaa</anchor>
      <arglist>(const decaf::util::List&lt; URI &gt; &amp;uris)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~URIPool</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>ab102643e752b1ab79fdabaf83fd732f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>getURI</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>a5436471a9d06e3aad65e5db520898578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addURI</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>a908311cecf352cedbe553823bd765158</anchor>
      <arglist>(const URI &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addURIs</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>afdf86170f80cdee0ddef5dfa3c18d4d3</anchor>
      <arglist>(const LinkedList&lt; URI &gt; &amp;uris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeURI</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>aa1bf357dee05244dbb7500232d20a214</anchor>
      <arglist>(const URI &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRandomize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>a717fa8e6eb1828c0be7dea69d6efdfcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomize</name>
      <anchorfile>classactivemq_1_1transport_1_1failover_1_1_u_r_i_pool.html</anchorfile>
      <anchor>aa80e46812d030522b569b08f1a777855</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport::inactivity</name>
    <filename>namespaceactivemq_1_1transport_1_1inactivity.html</filename>
    <class kind="class">activemq::transport::inactivity::InactivityMonitor</class>
    <class kind="class">activemq::transport::inactivity::ReadChecker</class>
    <class kind="class">activemq::transport::inactivity::WriteChecker</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::inactivity::InactivityMonitor</name>
    <filename>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</filename>
    <base>activemq::transport::TransportFilter</base>
    <member kind="function">
      <type></type>
      <name>InactivityMonitor</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>ac8a2c6aaf6d7cb69918aeb0eaf4a6d75</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next, const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InactivityMonitor</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a529170d3b54a6491794ae67f8219dd87</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next, const decaf::util::Properties &amp;properties, const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InactivityMonitor</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a994492fd7ae238b081ce9c94f49fd8f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a82ce1e17d7e1cbdf8c056092e6e661b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a71a833ccb1277f3050679e15e4ccc310</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a86ab9939c84b3315447dadc861d803bb</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>ab69eefc78f9bab4a8563845187a94b21</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeepAliveResponseRequired</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a04db83f6135397fd0f6f9c3498614901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepAliveResponseRequired</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>acfbd4268b9a575cf96abf742ef4f88eb</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getReadCheckTime</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a05b01fe6ffa23f77eb129c4b5693351c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadCheckTime</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a3ec074374160f144e80154153d449665</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getWriteCheckTime</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>abcfd3d90ea4fcddcd16f8433ef8b40d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWriteCheckTime</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a6ea13d1ee22b70f3bdbc4a91ef658e23</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getInitialDelayTime</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>af9eee631bf9681d1766bc15bd57c2dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialDelayTime</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a99a80d1fbfcb44c0842bfea76d7529c8</anchor>
      <arglist>(long long value) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ReadChecker</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>aa94dfc063a1d5c301a8a5e80a8e8a4ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AsyncSignalReadErrorkTask</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a653e0bb790cd7d377bd81c29a5d35212</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WriteChecker</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a4b36f01c70c854dd6e6a9ad44f6fbfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AsyncWriteTask</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_inactivity_monitor.html</anchorfile>
      <anchor>a2cb0c91995ccc852cc528c7f0a3e3499</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::inactivity::ReadChecker</name>
    <filename>classactivemq_1_1transport_1_1inactivity_1_1_read_checker.html</filename>
    <base>decaf::util::TimerTask</base>
    <member kind="function">
      <type></type>
      <name>ReadChecker</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_read_checker.html</anchorfile>
      <anchor>aa40104cffdf1d5acad194353d82c341e</anchor>
      <arglist>(InactivityMonitor *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReadChecker</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_read_checker.html</anchorfile>
      <anchor>a5f33d3c9d5bd89e4e14af97c8324bc00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_read_checker.html</anchorfile>
      <anchor>a6dbec2ae4fd9ea8943f8c51458522089</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::inactivity::WriteChecker</name>
    <filename>classactivemq_1_1transport_1_1inactivity_1_1_write_checker.html</filename>
    <base>decaf::util::TimerTask</base>
    <member kind="function">
      <type></type>
      <name>WriteChecker</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_write_checker.html</anchorfile>
      <anchor>a57be17a4c126d52c5a058675c51bbb99</anchor>
      <arglist>(InactivityMonitor *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WriteChecker</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_write_checker.html</anchorfile>
      <anchor>a8b921f051ea35987a441d4d10a670173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1transport_1_1inactivity_1_1_write_checker.html</anchorfile>
      <anchor>a7744c9209648dc12e554f46dfb20ed21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport::logging</name>
    <filename>namespaceactivemq_1_1transport_1_1logging.html</filename>
    <class kind="class">activemq::transport::logging::LoggingTransport</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::logging::LoggingTransport</name>
    <filename>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</filename>
    <base>activemq::transport::TransportFilter</base>
    <member kind="function">
      <type></type>
      <name>LoggingTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</anchorfile>
      <anchor>a671c3ba67e722f126898d72ae1a345c0</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoggingTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</anchorfile>
      <anchor>a25c9e9fba997726cd6970f19a28a8f59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</anchorfile>
      <anchor>a329c27556c8a0b04b5924989c019a698</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</anchorfile>
      <anchor>a982016ab6b9ec06cbc5c014aa028046f</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</anchorfile>
      <anchor>a1d59d4f05c1f1d00ec3c1106ce99681c</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1logging_1_1_logging_transport.html</anchorfile>
      <anchor>a82bbd335eec77365013d99d941c79089</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport::mock</name>
    <filename>namespaceactivemq_1_1transport_1_1mock.html</filename>
    <class kind="class">activemq::transport::mock::InternalCommandListener</class>
    <class kind="class">activemq::transport::mock::MockTransport</class>
    <class kind="class">activemq::transport::mock::MockTransportFactory</class>
    <class kind="class">activemq::transport::mock::ResponseBuilder</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::mock::InternalCommandListener</name>
    <filename>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</filename>
    <base>activemq::transport::DefaultTransportListener</base>
    <base>decaf::lang::Thread</base>
    <member kind="function">
      <type></type>
      <name>InternalCommandListener</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</anchorfile>
      <anchor>a591495e07c7bf2590137cfb909f8082a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InternalCommandListener</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</anchorfile>
      <anchor>a7151ce210c740d5a9fef645b793e84c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</anchorfile>
      <anchor>aa5841e886914ee51c7c745b3b883bce5</anchor>
      <arglist>(MockTransport *transport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResponseBuilder</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</anchorfile>
      <anchor>ae014665544f669cbe01a3fee2e631e32</anchor>
      <arglist>(const Pointer&lt; ResponseBuilder &gt; &amp;responseBuilder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</anchorfile>
      <anchor>abab2d006b2a82c7de0fc91343b2f6f05</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_internal_command_listener.html</anchorfile>
      <anchor>a99f8a961afe3412d96a46ea3d727d1d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::mock::MockTransport</name>
    <filename>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</filename>
    <base>activemq::transport::Transport</base>
    <member kind="function">
      <type></type>
      <name>MockTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>aca7567e1e19eb95380e21fa08ce899b5</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat, const Pointer&lt; ResponseBuilder &gt; &amp;responseBuilder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MockTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a3aaf71b4e681f6bc9b9950e5188277a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fireCommand</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a3fdd4aba598c8e0896f85bf60439b873</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fireException</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ad87f322fcc85675eeb2084b79cef25cd</anchor>
      <arglist>(const exceptions::ActiveMQException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResponseBuilder</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a7bbbc9ec328a0db5e2d17e1affc528ba</anchor>
      <arglist>(const Pointer&lt; ResponseBuilder &gt; &amp;responseBuilder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOutgoingListener</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a247a99827664b8a212a5598ea7571e1b</anchor>
      <arglist>(TransportListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; wireformat::WireFormat &gt;</type>
      <name>getWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a97ed31e93fafbce8757ba26cfa83d6a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a5f5c36778b708259dc5409be750621c0</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ac3b1517b0adae397d099694189a03200</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a37f56fc6298111bd86aff05549727369</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWireFormat</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>afbbec45e3fff4b11307f556e5186463b</anchor>
      <arglist>(const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a82f66f2f5e1390d4486046f7c7ec41eb</anchor>
      <arglist>(TransportListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportListener *</type>
      <name>getTransportListener</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ae82a0ebd3c37301866ebb321015b48c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ac4c65b9938e6c5b4882a684febc22301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>aec7d09af2695dcd0c63d2270a7dc8994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ae41076a953945d79ef9bea47e4f4ee17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transport *</type>
      <name>narrow</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ae75bdbbf9279ca08a42acdefa664ddb5</anchor>
      <arglist>(const std::type_info &amp;typeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a3ed43f8edffe00fbde172134c6f86f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a59152b3eb1be64f38d04aeed78fc6b77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a9d6fad505b23e6a9caeac2035db8509f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getRemoteAddress</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ae0ebad1c42846abc9ede01a80d6e6efe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reconnect</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>af9e3d7d278772d480f8d102f86a473b1</anchor>
      <arglist>(const decaf::net::URI &amp;uri AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a595e20b64bf18b9b125a2298c66b566d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a464deccb9ec1e534aaeb4e1e115394af</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFailOnSendMessage</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a405db912789781412d6c71422375b678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailOnSendMessage</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a0c05673a1a3af717703b65217abef9b3</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSentMessageBeforeFail</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a2dab5f2cefbf557bbfc1217668efd22a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSentMessageBeforeFail</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>afb9eccc20947170dc4078a6a70586645</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSentMessages</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a7c87ab44cae66d593df78a86a6eff716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSentMessages</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a6908f3740e2656eec57a03ecdd298339</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFailOnReceiveMessage</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a0a123a7d9f0525d48366962adcb71019</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailOnReceiveMessage</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a001daf1c0be0f5c3f8202468da2be092</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumReceivedMessageBeforeFail</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ad3c5b37f94be09398d454917c79cc9d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumReceivedMessageBeforeFail</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a7def51cf790d39e98dc766165c2f99de</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumReceivedMessages</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>acedbb0e91a3abd28bcb4d2c074885401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumReceivedMessages</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a4cb9dfa5edd61544e89b5215911f7bfb</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFailOnKeepAliveSends</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ace305347b23b9ee3b2dcba46ffbdb10b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailOnKeepAliveSends</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a38cd0a4983dbd175fb440e2608b1d7f5</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSentKeepAlivesBeforeFail</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>abdb3e5eefb3dd9e9cfc74af7444e38f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSentKeepAlivesBeforeFail</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a21ba4253923a9f7e113acf31aa87c28b</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSentKeepAlives</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ad9a6054228038884792f6a8136894324</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSentKeepAlives</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a70886818c7cf4acdaf66bafe65ba2c70</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFailOnStart</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a9529fc7661ea1e2679d9b9851f41f1d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailOnStart</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a70aed1d9123e424a967a95927052ddeb</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFailOnStop</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a42b52c0b5c8270bf8b35f771ed30a178</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailOnStop</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>ad9d09006867564b492889d9ea7cc6109</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFailOnClose</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a0eb7366bb9bfdb780e7cd8a7feb96f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailOnClose</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a068772da705e4b79041b5b1832deaf58</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReconnectSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a96515cd27e1e8de38fa670d3d543c1d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpdateURIsSupported</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a057fa4b30993aa837eef78538e0f7f41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateURIs</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>af81f078f08ad9ace110150b14da0f5c0</anchor>
      <arglist>(bool rebalance AMQCPP_UNUSED, const decaf::util::List&lt; decaf::net::URI &gt; &amp;uris AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MockTransport *</type>
      <name>getInstance</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport.html</anchorfile>
      <anchor>a350e029bd6d14bff1326d15ddc7b0afa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::mock::MockTransportFactory</name>
    <filename>classactivemq_1_1transport_1_1mock_1_1_mock_transport_factory.html</filename>
    <base>activemq::transport::AbstractTransportFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MockTransportFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport_factory.html</anchorfile>
      <anchor>a3dd927a84afd19af4f19ce7a321ee068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>create</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport_factory.html</anchorfile>
      <anchor>a7091ad41723de15b376c15df6315615b</anchor>
      <arglist>(const decaf::net::URI &amp;location)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>createComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport_factory.html</anchorfile>
      <anchor>ad132b2038581b2d71b0ce1749bc35aab</anchor>
      <arglist>(const decaf::net::URI &amp;location)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>doCreateComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_mock_transport_factory.html</anchorfile>
      <anchor>a3f45849a9fa99b5568eea376f27d48e5</anchor>
      <arglist>(const decaf::net::URI &amp;location, const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat, const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::mock::ResponseBuilder</name>
    <filename>classactivemq_1_1transport_1_1mock_1_1_response_builder.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResponseBuilder</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_response_builder.html</anchorfile>
      <anchor>aa09ada1faaf999647a3b52a0bd288766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Response &gt;</type>
      <name>buildResponse</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_response_builder.html</anchorfile>
      <anchor>a30e9aafb82ffd68b5a7e065668796acd</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>buildIncomingCommands</name>
      <anchorfile>classactivemq_1_1transport_1_1mock_1_1_response_builder.html</anchorfile>
      <anchor>a43c5aaff16886f9e6a5f81c3c8e5d17d</anchor>
      <arglist>(const Pointer&lt; Command &gt; &amp;command, decaf::util::LinkedList&lt; Pointer&lt; Command &gt; &gt; &amp;queue)=0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::transport::tcp</name>
    <filename>namespaceactivemq_1_1transport_1_1tcp.html</filename>
    <class kind="class">activemq::transport::tcp::SslTransport</class>
    <class kind="class">activemq::transport::tcp::SslTransportFactory</class>
    <class kind="class">activemq::transport::tcp::TcpTransport</class>
    <class kind="class">activemq::transport::tcp::TcpTransportFactory</class>
  </compound>
  <compound kind="class">
    <name>activemq::transport::tcp::SslTransport</name>
    <filename>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport.html</filename>
    <base>activemq::transport::tcp::TcpTransport</base>
    <member kind="function">
      <type></type>
      <name>SslTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport.html</anchorfile>
      <anchor>aa6155bee1d8bfd1144f62873a5a62bb5</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SslTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport.html</anchorfile>
      <anchor>ac6125840711855b551372ececf5f43b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport.html</anchorfile>
      <anchor>aafa1cd153fbdc3c62a6ee24251c70b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureSocket</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport.html</anchorfile>
      <anchor>a4add1c1a94d9c4696b96c767d743304f</anchor>
      <arglist>(decaf::net::Socket *socket, decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::tcp::SslTransportFactory</name>
    <filename>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport_factory.html</filename>
    <base>activemq::transport::tcp::TcpTransportFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SslTransportFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport_factory.html</anchorfile>
      <anchor>a6fa1ee3edfd8ac47f3a9d9b208b35246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>doCreateComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_ssl_transport_factory.html</anchorfile>
      <anchor>a0b2cd08c0dfe2f9f3e00617107f57477</anchor>
      <arglist>(const decaf::net::URI &amp;location, const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat, const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::tcp::TcpTransport</name>
    <filename>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</filename>
    <base>activemq::transport::TransportFilter</base>
    <member kind="function">
      <type></type>
      <name>TcpTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>a15eb74fbe79d197aee5b33c6e27cb927</anchor>
      <arglist>(const Pointer&lt; Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpTransport</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>a43f5683ba189c81a17262e7ebbaab7b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>a22909813e67ebd66a7aeb15b382a5dd9</anchor>
      <arglist>(const decaf::net::URI &amp;uri, const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>ae8a6ce36bc76ea278930ff52f07f6af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFaultTolerant</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>aa2739e570b164a72991b9e09d547fb16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>a1192f85e48dc7c8b864adc4a80fdc2a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>aa3070101dc44e6def34ed967f59f8ed5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>a3d2b47a3855a2eed5e8d5b71c595355e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configureSocket</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport.html</anchorfile>
      <anchor>aaebb196ca5411a60ef74b660659d73d1</anchor>
      <arglist>(decaf::net::Socket *socket, const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::transport::tcp::TcpTransportFactory</name>
    <filename>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport_factory.html</filename>
    <base>activemq::transport::AbstractTransportFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpTransportFactory</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport_factory.html</anchorfile>
      <anchor>a3c2d3352ebb3ed5ceae9bf8199e266ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>create</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport_factory.html</anchorfile>
      <anchor>a338d03acff94c3d7b4726cbe4fc7656d</anchor>
      <arglist>(const decaf::net::URI &amp;location)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>createComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport_factory.html</anchorfile>
      <anchor>af4862559215af2f6b71c08260601dc07</anchor>
      <arglist>(const decaf::net::URI &amp;location)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Pointer&lt; Transport &gt;</type>
      <name>doCreateComposite</name>
      <anchorfile>classactivemq_1_1transport_1_1tcp_1_1_tcp_transport_factory.html</anchorfile>
      <anchor>a7122f3544f5bf5b486ec2df99efeb361</anchor>
      <arglist>(const decaf::net::URI &amp;location, const Pointer&lt; wireformat::WireFormat &gt; &amp;wireFormat, const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::util</name>
    <filename>namespaceactivemq_1_1util.html</filename>
    <class kind="class">activemq::util::ActiveMQProperties</class>
    <class kind="class">activemq::util::CMSExceptionSupport</class>
    <class kind="class">activemq::util::CompositeData</class>
    <class kind="class">activemq::util::IdGenerator</class>
    <class kind="class">activemq::util::LongSequenceGenerator</class>
    <class kind="class">activemq::util::MarshallingSupport</class>
    <class kind="class">activemq::util::MemoryUsage</class>
    <class kind="class">activemq::util::PrimitiveList</class>
    <class kind="class">activemq::util::PrimitiveMap</class>
    <class kind="class">activemq::util::PrimitiveValueConverter</class>
    <class kind="class">activemq::util::PrimitiveValueNode</class>
    <class kind="class">activemq::util::Service</class>
    <class kind="class">activemq::util::ServiceListener</class>
    <class kind="class">activemq::util::ServiceStopper</class>
    <class kind="class">activemq::util::ServiceSupport</class>
    <class kind="class">activemq::util::URISupport</class>
    <class kind="class">activemq::util::Usage</class>
  </compound>
  <compound kind="class">
    <name>activemq::util::ActiveMQProperties</name>
    <filename>classactivemq_1_1util_1_1_active_m_q_properties.html</filename>
    <base>cms::CMSProperties</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQProperties</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>ac040d60e914842323a83fee79b43e23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQProperties</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a89867a0c36f9d1bbfbbb2cc0008da5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>aa9dbf7eb4809807a4f34c0c822b713f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const decaf::util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a52f0063b20b7bba21ef1e76487304a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProperties</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>ad4560bc5b00830d0c672067d4b1537c7</anchor>
      <arglist>(decaf::util::Properties &amp;props)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a54cebaea2a419fb577fed1a2627b4e16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a440c5ea159176457167166efadc59f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a214bb642d5c81b3e2ab8396c98942c2e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getProperty</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>af3be6feadb48207d376df410c87acea4</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;defaultValue) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProperty</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a122f41da4b47e07e43c3314c4bb9c6d3</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasProperty</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a97ec24ef3f8af8bb3c492258c700813d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>remove</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>afb33b44e0fd87eeefa10f0bcf4f0875a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>propertyNames</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>ad32b37300ac57bf0e1a848fbc976ade8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>toArray</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a0ece0d40d6ff87857e0670041a171ab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>a760d14669a653d8bbbd0a836df602d38</anchor>
      <arglist>(const CMSProperties *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CMSProperties *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>abb450f693ad38c209d493b0d16a447b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>adf8e472cb1339eda147b285a152403cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1util_1_1_active_m_q_properties.html</anchorfile>
      <anchor>ada15b6c8d619fa990350bda3e22f49af</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::CMSExceptionSupport</name>
    <filename>classactivemq_1_1util_1_1_c_m_s_exception_support.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CMSExceptionSupport</name>
      <anchorfile>classactivemq_1_1util_1_1_c_m_s_exception_support.html</anchorfile>
      <anchor>a022c68a1c1f2fda88fdd2a7c05718716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cms::CMSException</type>
      <name>create</name>
      <anchorfile>classactivemq_1_1util_1_1_c_m_s_exception_support.html</anchorfile>
      <anchor>a4e25445b57db0f28ab2693e74ea18f04</anchor>
      <arglist>(const std::string &amp;msg, const decaf::lang::Exception &amp;cause)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cms::CMSException</type>
      <name>create</name>
      <anchorfile>classactivemq_1_1util_1_1_c_m_s_exception_support.html</anchorfile>
      <anchor>a78d6181816e6205b2307a0a4e824f48e</anchor>
      <arglist>(const decaf::lang::Exception &amp;cause)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cms::MessageEOFException</type>
      <name>createMessageEOFException</name>
      <anchorfile>classactivemq_1_1util_1_1_c_m_s_exception_support.html</anchorfile>
      <anchor>abd7a5cf029d2a0e3075237047719f4f8</anchor>
      <arglist>(const decaf::lang::Exception &amp;cause)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cms::MessageFormatException</type>
      <name>createMessageFormatException</name>
      <anchorfile>classactivemq_1_1util_1_1_c_m_s_exception_support.html</anchorfile>
      <anchor>a96ebd9b1104d11fd59742d4a56797405</anchor>
      <arglist>(const decaf::lang::Exception &amp;cause)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::CompositeData</name>
    <filename>classactivemq_1_1util_1_1_composite_data.html</filename>
    <member kind="function">
      <type></type>
      <name>CompositeData</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>ab40611a295695f3636da69c7c045c1a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeData</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a3b68035a535374b248382d7c85546c94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkedList&lt; URI &gt; &amp;</type>
      <name>getComponents</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a19b2af5f5237bb884726dbcde0112a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LinkedList&lt; URI &gt; &amp;</type>
      <name>getComponents</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>ab913d110eda78257a9025206739fcafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponents</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a77cc892969a4eb22a2f829d78f9d13ef</anchor>
      <arglist>(const LinkedList&lt; URI &gt; &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFragment</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>aa68c2fcb4e775c82b8efc90fac223350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFragment</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>aa5dfb641b8d7786082a1550e6181d872</anchor>
      <arglist>(const std::string &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type>const Properties &amp;</type>
      <name>getParameters</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a9ecce096a19e9575c02718558758daae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a9f39a717d21b07dc44637d56d2b32e65</anchor>
      <arglist>(const Properties &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getScheme</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a801f7f79bafdd5d6bdf6ac7e974d6903</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheme</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a17ab3707473bb5bd25273c91f4a6a90d</anchor>
      <arglist>(const std::string &amp;scheme)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPath</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>acc9fc45930d655371c494a0c69d71cda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a494914dc57d22b4ea0f7c27457be6678</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHost</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a1ce60e0ae4bd3b35bf91a8d6a19a4793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHost</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a0185ce5561cfb6dddb35e05aa07832f3</anchor>
      <arglist>(const std::string &amp;host)</arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>toURI</name>
      <anchorfile>classactivemq_1_1util_1_1_composite_data.html</anchorfile>
      <anchor>a51ce233019fe13531f7df5150b2377ff</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::IdGenerator</name>
    <filename>classactivemq_1_1util_1_1_id_generator.html</filename>
    <member kind="function">
      <type></type>
      <name>IdGenerator</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>a8d1fd3915d37858bd8a0815d5aa3fe79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdGenerator</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>ad7bbacfa506bdeef105f79082f453c4a</anchor>
      <arglist>(const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IdGenerator</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>a3c4f5fba4d365dbe58c31ecdc2d3f21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generateId</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>ab2178d7febdab6fc55b352b9d6bc76e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getHostname</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>a99071019900b07b832067f9ef36d044e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getSeedFromId</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>a7e6937044a67a5de55f493f1415c603d</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>getSequenceFromId</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>acb926716be7e3540df5c529795d5ac3d</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>a7d62fc91cdb0bacdbe46a37cba4c9b38</anchor>
      <arglist>(const std::string &amp;id1, const std::string &amp;id2)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>activemq::library::ActiveMQCPP</name>
      <anchorfile>classactivemq_1_1util_1_1_id_generator.html</anchorfile>
      <anchor>ae703f1091aa37cc9050604ec86af5a08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::LongSequenceGenerator</name>
    <filename>classactivemq_1_1util_1_1_long_sequence_generator.html</filename>
    <member kind="function">
      <type></type>
      <name>LongSequenceGenerator</name>
      <anchorfile>classactivemq_1_1util_1_1_long_sequence_generator.html</anchorfile>
      <anchor>a4c99a4ab963ef1ab9583d7fdb4d04e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LongSequenceGenerator</name>
      <anchorfile>classactivemq_1_1util_1_1_long_sequence_generator.html</anchorfile>
      <anchor>a8474e183169d71ee80407a8e5bc1541f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getNextSequenceId</name>
      <anchorfile>classactivemq_1_1util_1_1_long_sequence_generator.html</anchorfile>
      <anchor>a01fc05148df1cbeb1f18b4f21ca54fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getLastSequenceId</name>
      <anchorfile>classactivemq_1_1util_1_1_long_sequence_generator.html</anchorfile>
      <anchor>a0fc617ed936378273a393d474aa0aa66</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::MarshallingSupport</name>
    <filename>classactivemq_1_1util_1_1_marshalling_support.html</filename>
    <member kind="function">
      <type></type>
      <name>MarshallingSupport</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>ad4235c153416e6696f6f389b6721b107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MarshallingSupport</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>a58ae067701a176a8b54213ffa8aa99b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeString</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>ae6d2d8e76832d95abc57e0aee1aa7fd4</anchor>
      <arglist>(decaf::io::DataOutputStream &amp;dataOut, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeString16</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>a9991819c312b36b1f0434a845b5ed8ce</anchor>
      <arglist>(decaf::io::DataOutputStream &amp;dataOut, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeString32</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>ad58475899794038bf0151145c78b4de5</anchor>
      <arglist>(decaf::io::DataOutputStream &amp;dataOut, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>readString16</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>aa000bc9edb43431b7c1c7b3f51f88be8</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>readString32</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>a999063b4e6b5f906f54a2a1944574d1c</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>asciiToModifiedUtf8</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>a71ece837cc1d9c55edc42dcb39cdec97</anchor>
      <arglist>(const std::string &amp;asciiString)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>modifiedUtf8ToAscii</name>
      <anchorfile>classactivemq_1_1util_1_1_marshalling_support.html</anchorfile>
      <anchor>a5486c197df68dc11b2b513c97180d9e9</anchor>
      <arglist>(const std::string modifiedUtf8String)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::MemoryUsage</name>
    <filename>classactivemq_1_1util_1_1_memory_usage.html</filename>
    <base>activemq::util::Usage</base>
    <member kind="function">
      <type></type>
      <name>MemoryUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a6ddb5d0d31f81092797f5ab701c2b0a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a8e73a0a8cee150dac604ef04c0c0eb51</anchor>
      <arglist>(unsigned long long limit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MemoryUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>ac165accac3e9ff0e674e7e3c2fe0b43c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>waitForSpace</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>afe23d0167a01d4f4b6372995aec175c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>waitForSpace</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a53932dc9610b977dcba4aa3cf7f02e5c</anchor>
      <arglist>(unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueueUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a0f5d9cee6781373b4d1ffad895b3f20d</anchor>
      <arglist>(unsigned long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>increaseUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a7e9f666ad92a19dc6bbd558a42cacff7</anchor>
      <arglist>(unsigned long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decreaseUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a670abab5aad616ed22800a43558ba8f8</anchor>
      <arglist>(unsigned long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFull</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>ac1402c9124b3e19b43bd985ffb82e3b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a2b0acd4b4eaf392c385d83529de22bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>ac22122dffd5d7bc0eb6a2474563d5a7a</anchor>
      <arglist>(unsigned long long usage)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>getLimit</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>a2ee32cad2355457d356c2554457d4aea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classactivemq_1_1util_1_1_memory_usage.html</anchorfile>
      <anchor>ac2766ad88367a31917eded986543b5e0</anchor>
      <arglist>(unsigned long long limit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::PrimitiveList</name>
    <filename>classactivemq_1_1util_1_1_primitive_list.html</filename>
    <base>LinkedList&lt; PrimitiveValueNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrimitiveList</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a8583e714dad26fe5b1439c51a6c4e48c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrimitiveList</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a821449c75a9a237a3a4680e7aa75661d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveList</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>ae8cb849ccb26d5832f97b89c91d625ba</anchor>
      <arglist>(const decaf::util::List&lt; PrimitiveValueNode &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveList</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>aff11cb2e2514033c0ecf095b74b96743</anchor>
      <arglist>(const PrimitiveList &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a2218245d2b8cdd808bc117012e26618d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>ac84197ee1b350617abf14bd9e7a9d394</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBool</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>acbec25da0efc6cc75f43aab4287bf154</anchor>
      <arglist>(int index, bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getByte</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a58a81e406c3b1ff0c2bc8d346f4a3f5c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByte</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>af91ff4ad01e415879e31297b2ce851f5</anchor>
      <arglist>(int index, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a0fd59ef5fde90897be06316e4f04326f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChar</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>ae777fcc2dfa81bdf2d002f8052be5db0</anchor>
      <arglist>(int index, char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a73726a33e34b335e5a13e7c457d0ca8b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setShort</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>ac4f536205862cf63e3cc3d7c323e7735</anchor>
      <arglist>(int index, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a9e7a138ad1e52b8e3f105aa48ce2ff3b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInt</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a3e984be42a2ce0d0eb0bf43ce1d17f02</anchor>
      <arglist>(int index, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a0ab05d89fef81e5c9f793a313c71452a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLong</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>add8780820e141b3ea66ccf4d66555916</anchor>
      <arglist>(int index, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a3bf32bbba4084b4f60bbd309d646a366</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFloat</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a658f362d271fcfe7fdf67a59f529ae42</anchor>
      <arglist>(int index, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a78615b64694fc1e89cdeee6d7a80433a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDouble</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>ad34c695fa8e228408e761f5227712b26</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a1c7f0fb1a75fc77b1b9d6eb2a4ee2f84</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a797ec6105658163d9b4e57ece886d6b6</anchor>
      <arglist>(int index, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>getByteArray</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a518e4ed4a762b7d67b4485c4db73f11c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteArray</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_list.html</anchorfile>
      <anchor>a937454b47f7a138433de5f43e823153e</anchor>
      <arglist>(int index, const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::PrimitiveMap</name>
    <filename>classactivemq_1_1util_1_1_primitive_map.html</filename>
    <base>StlMap&lt; std::string, PrimitiveValueNode &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrimitiveMap</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>ae78562ed9f0b5493b012beb3d4d17e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrimitiveMap</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>afeba7f0ffb5a70b60bc398e4387a6dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveMap</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>ad8f39d9e819c6462906f2a9cc17ea241</anchor>
      <arglist>(const decaf::util::Map&lt; std::string, PrimitiveValueNode &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveMap</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a0477b9fe4d3db7cc54fbe19d481399fe</anchor>
      <arglist>(const PrimitiveMap &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a0c4c095c52c1b624c38c3c10d10c3145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a22425fd4b741bcb3d4cb6e0ff4099f26</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBool</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a184f427aace18a0fcc7444c2d81673ba</anchor>
      <arglist>(const std::string &amp;key, bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getByte</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a369f28cb53b78a20caa98181a28678f7</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByte</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a01885595137b8e779d8bca5808c98083</anchor>
      <arglist>(const std::string &amp;key, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>ac260b3243fe8c05b2d0f797aa62b5047</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChar</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a043433575f568d80cd758fb266a6235c</anchor>
      <arglist>(const std::string &amp;key, char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a8c557fb085188b625496b6cb112d4aaa</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setShort</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a1141fb0ff6a16d221a3b934588cd57d4</anchor>
      <arglist>(const std::string &amp;key, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>acca9220151a29dab431118b0f89e9eab</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInt</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a5a6323b0625402227abd0327d6b649b3</anchor>
      <arglist>(const std::string &amp;key, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a47960844e9d5090f783b323af7334956</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLong</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>ad6cba61735e269c817f68fd7efc87864</anchor>
      <arglist>(const std::string &amp;key, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a0f614f57e05f5d59f5761990a77bd890</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFloat</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a68c8a784d37bde747b52ce38edda6735</anchor>
      <arglist>(const std::string &amp;key, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a4fbbbec58661f062511a3a4b7f4b627e</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDouble</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a6076f317d68bc586baad54f6be6a60d2</anchor>
      <arglist>(const std::string &amp;key, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>adb657085945d043c6f6ef1639e292a8b</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a629024c84b5f00db1b2314246ae56337</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>getByteArray</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>a8dadec6361a6619a6a249c59b706ac99</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteArray</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_map.html</anchorfile>
      <anchor>ad3c7a49fb443ac51105eb87c92d64f5e</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::PrimitiveValueConverter</name>
    <filename>classactivemq_1_1util_1_1_primitive_value_converter.html</filename>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueConverter</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_converter.html</anchorfile>
      <anchor>a482bc7a586d57a7ce87d3dd1a50f5428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrimitiveValueConverter</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_converter.html</anchorfile>
      <anchor>ab1fa4ef60548721ab6bbc9db06e25d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TO</type>
      <name>convert</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_converter.html</anchorfile>
      <anchor>a21c352fc614b2c67bdf4dcfa3dc11f64</anchor>
      <arglist>(const PrimitiveValueNode &amp;value) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::PrimitiveValueNode</name>
    <filename>classactivemq_1_1util_1_1_primitive_value_node.html</filename>
    <class kind="union">activemq::util::PrimitiveValueNode::PrimitiveValue</class>
    <member kind="enumeration">
      <name>PrimitiveType</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NULL_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeabdcf62354bc864d1b96c478ce89c572b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOLEAN_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdea19c50bd2a2458909ae4aa3e8525dba15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeacb85925651a546456361c679227f9a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHAR_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdea9b0eb11db1787441c611a837e27be9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeadc1eadb5e16a3abeb9153ef758018807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTEGER_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeaa452b43e27fd35bab86f6afa3efe1faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONG_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeaa5d4326075bef844c9409d6a752c87cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdea3fb6bd1f450b408847ecc6126f562f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOAT_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdea6aae74b360ff07cca647fe046e541e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeadf0dedc0cd9a55e0cc594fd414d57cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ARRAY_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdea81fed1a52fc25e4bd01e515fad23238e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAP_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeafb9008cacc3b64666bfa486a45f6c7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIST_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdea62734085c476ddd800ac35619c6c588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIG_STRING_TYPE</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>adc5e3ce0d7e60138c92de142a612abdeacbfd06249781b3a9e0c0cf01e5dc5d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a6cab28293fcad02fc36ba26f3003186e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ab4c6935b216a72e4af1033585815aa45</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a0dd9c81be0854c92cd12359898302b2e</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a844f8fbbf8ad8a8ddd1cefa3721a4c26</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ac3d5235c079764a687740d2e315cad3f</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a4b06b33ac31ad20e6f3744e6ecd38782</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>acf56de694a93eb58ed443f87be19b744</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a15eaffd7bbd9dd86d490a7de5d790613</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ad39b739ab0c0a245e96a0c3d0867b48b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ac8182e8abc70391915c5831111c7b0c2</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a5ad82a0bf6a3e6b5146df07e31f0331b</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a952c1a4a0fccdd0702323f9051ac0c87</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a8f7fe8c8054c2a84f2e66e5162557448</anchor>
      <arglist>(const decaf::util::List&lt; PrimitiveValueNode &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a145c4675e62214bb4d6df7bf51ada643</anchor>
      <arglist>(const decaf::util::Map&lt; std::string, PrimitiveValueNode &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a50e4b738c30a7f0b3c4909d4095157d3</anchor>
      <arglist>(const PrimitiveValueNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PrimitiveValueNode</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a3039a8f3a1c88c5c8b8f6a5cff3764f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PrimitiveValueNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a7602ba909aa1220e9ced041b925838ba</anchor>
      <arglist>(const PrimitiveValueNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ae55cd6fa1a6a94992f6352deaa5473ae</anchor>
      <arglist>(const PrimitiveValueNode &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveType</type>
      <name>getType</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a128bc06a84847b6bde4e4fb40b658ac4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PrimitiveValue</type>
      <name>getValue</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ab47e7a7f50b28d73b359bb3ea7e2611c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a208ed168c36c1d1e1b7a8b41fe8c1b24</anchor>
      <arglist>(const PrimitiveValue &amp;value, PrimitiveType valueType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a455df0b373e692e59a729da8497c7e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBool</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a962d218d7ac5930d7fca2ac677b8afed</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBool</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a30921e79c4f049a8609108aee67dc69b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByte</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ac26026e404a83ef2d2c04d2287aa094a</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getByte</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a892c41050dfaf355df6949c1ab07416e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChar</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>aca15e2421e648953ec6efeb4413834df</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getChar</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a632d5ec1051d06a9fe125ff65a2fccdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShort</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a30e679302979e8c4afe14213fa994dc7</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getShort</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a69316a7b2e4148e5a8e69f1dcdc6dae3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInt</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a10fa25f6565fb608360665df7be2674c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInt</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>aad40a945f39c837f9431b5e2d3721db6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLong</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a09a04732e404ac87ae1e99c3d5ed65ba</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getLong</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a77581a5c5f468b7f99a9eb2c0bf8909d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFloat</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a987fa4a4186542c561e353291fa26c82</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloat</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a181a53db6e3c683c5ef878c30f7a0323</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDouble</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ad4cf2058e3f5fa883de4740af71943b0</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a13dcd1a92e3d8d2ff550cc4e46a43385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ab79ccbcec6e379feedecce2ea1657205</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>aef2adc9aedf3feecac1ab2ff7721bcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteArray</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a44b2a21627df88ebe116999448c5092b</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>getByteArray</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ae4b778dd1254d7d329f6f8cc9dae9618</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setList</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ab2aeae0d5aa65de28514f0b9c419a72f</anchor>
      <arglist>(const decaf::util::List&lt; PrimitiveValueNode &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const decaf::util::List&lt; PrimitiveValueNode &gt; &amp;</type>
      <name>getList</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a5553607eb12c57a021c5e800cc86820b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMap</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a24656c04b5061cc6539266b1e2030896</anchor>
      <arglist>(const decaf::util::Map&lt; std::string, PrimitiveValueNode &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const decaf::util::Map&lt; std::string, PrimitiveValueNode &gt; &amp;</type>
      <name>getMap</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>ab3ed22d7e42d1cc116f10af7241db361</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1util_1_1_primitive_value_node.html</anchorfile>
      <anchor>a2ce2e9a454b5583dd6b3ceb9deda63a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>activemq::util::PrimitiveValueNode::PrimitiveValue</name>
    <filename>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a8cbb6784d8c2218149d064837eababb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>byteValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>ab3860c1f5bbe226284a0949ad3ccf529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>charValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a214dc68b0bc11ae257ad3cb94ddb9f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>shortValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>ab5e850b027f73ad766252758b7c64a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>intValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a76b1ac3754922959d30ad7055e84ec18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long long</type>
      <name>longValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a6246982d87fd747e497d627a7ef8c265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a46dfde6fde97946a264fec86a2b2044c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>floatValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>adb01ba1de36ae760d1faaf742eeb1191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>stringValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a5c44bc6487a414e117bb42dd86c2bc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned char &gt; *</type>
      <name>byteArrayValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>aa62a4c2d114f0ca611a9725c26018a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>decaf::util::List&lt; PrimitiveValueNode &gt; *</type>
      <name>listValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>a5ee5a4c1334d0d966028604319165def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>decaf::util::Map&lt; std::string, PrimitiveValueNode &gt; *</type>
      <name>mapValue</name>
      <anchorfile>unionactivemq_1_1util_1_1_primitive_value_node_1_1_primitive_value.html</anchorfile>
      <anchor>adbdb0c02a4959bd3bad95097559dcde4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::Service</name>
    <filename>classactivemq_1_1util_1_1_service.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Service</name>
      <anchorfile>classactivemq_1_1util_1_1_service.html</anchorfile>
      <anchor>a8eb2092cb668d1ab6536305f88d448d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1util_1_1_service.html</anchorfile>
      <anchor>aef41a0fd6491a1f46bf925b244f3b4c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1util_1_1_service.html</anchorfile>
      <anchor>ab6f4f379628eae5ab5f3a8d11f585322</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::ServiceListener</name>
    <filename>classactivemq_1_1util_1_1_service_listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ServiceListener</name>
      <anchorfile>classactivemq_1_1util_1_1_service_listener.html</anchorfile>
      <anchor>a21d09ceaa34401875aca9832404b3e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>started</name>
      <anchorfile>classactivemq_1_1util_1_1_service_listener.html</anchorfile>
      <anchor>aa36ea6208c107b9bdbe32e1511bc40bd</anchor>
      <arglist>(const Service *target)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopped</name>
      <anchorfile>classactivemq_1_1util_1_1_service_listener.html</anchorfile>
      <anchor>a3f5634740a90c9be01ee62ac8592d2e4</anchor>
      <arglist>(const Service *target)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::ServiceStopper</name>
    <filename>classactivemq_1_1util_1_1_service_stopper.html</filename>
    <member kind="function">
      <type></type>
      <name>ServiceStopper</name>
      <anchorfile>classactivemq_1_1util_1_1_service_stopper.html</anchorfile>
      <anchor>a22dca12b47990dcddd112de6d8fc72e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ServiceStopper</name>
      <anchorfile>classactivemq_1_1util_1_1_service_stopper.html</anchorfile>
      <anchor>a7443aaa1671769a39510df0a3ea14f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1util_1_1_service_stopper.html</anchorfile>
      <anchor>a7680796e1a2b001d895a0b57e4244f44</anchor>
      <arglist>(Service *service)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>throwFirstException</name>
      <anchorfile>classactivemq_1_1util_1_1_service_stopper.html</anchorfile>
      <anchor>a4d9f9b8170bb500e681a4398cd679974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classactivemq_1_1util_1_1_service_stopper.html</anchorfile>
      <anchor>a417c49fbf4b4bdd3036b3820a8bfbd41</anchor>
      <arglist>(Service *service, decaf::lang::Exception &amp;ex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::ServiceSupport</name>
    <filename>classactivemq_1_1util_1_1_service_support.html</filename>
    <base>activemq::util::Service</base>
    <member kind="function">
      <type></type>
      <name>ServiceSupport</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a151473d082b37390021b5f46b29d7d71</anchor>
      <arglist>(const ServiceSupport &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ServiceSupport &amp;</type>
      <name>operator=</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a222b5c3719fd4d90bb74c9446da71d41</anchor>
      <arglist>(const ServiceSupport &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServiceSupport</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a27903e690551bccb005768a62886f9b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ServiceSupport</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a41d4bee7c31db8b53d99f703c65192e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a22523fe105eaaef387d20571ce8f2779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>ab4424feb892c559b5ad1f007f5f1588c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStarted</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>af70d28e3148ad27aa0680f9391bd1e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopping</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>addda028b36cfb9a6b474eff371550ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>ac7d917392269dfcf664f8b2d89d6a479</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addServiceListener</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a5d0fb17ea5af9a5beb1e0450a64eb794</anchor>
      <arglist>(ServiceListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeServiceListener</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a0c048debc23785a5daa4625a4c030623</anchor>
      <arglist>(ServiceListener *llistener)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dispose</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>a20e4128a1c708d09d9e6c8c6a9072540</anchor>
      <arglist>(Service *service)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doStop</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>aafcd87f6a2b8fe9a56237a4483fe740b</anchor>
      <arglist>(ServiceStopper *stopper)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doStart</name>
      <anchorfile>classactivemq_1_1util_1_1_service_support.html</anchorfile>
      <anchor>ad5af208fabc70d516c629e812495d273</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::URISupport</name>
    <filename>classactivemq_1_1util_1_1_u_r_i_support.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>parseURL</name>
      <anchorfile>classactivemq_1_1util_1_1_u_r_i_support.html</anchorfile>
      <anchor>ab06280c8d226e6e9d594c34ab2d9beca</anchor>
      <arglist>(const std::string &amp;URI, decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompositeData</type>
      <name>parseComposite</name>
      <anchorfile>classactivemq_1_1util_1_1_u_r_i_support.html</anchorfile>
      <anchor>a31ff79b2a30755d1cb73aa590148b87a</anchor>
      <arglist>(const URI &amp;uri)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::util::Properties</type>
      <name>parseQuery</name>
      <anchorfile>classactivemq_1_1util_1_1_u_r_i_support.html</anchorfile>
      <anchor>ade09fa7b01f320a58cf386c14c0fa04f</anchor>
      <arglist>(std::string query)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>parseQuery</name>
      <anchorfile>classactivemq_1_1util_1_1_u_r_i_support.html</anchorfile>
      <anchor>a8d7d0d3c6142999771ef836dd027eba1</anchor>
      <arglist>(std::string query, decaf::util::Properties *properties)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>createQueryString</name>
      <anchorfile>classactivemq_1_1util_1_1_u_r_i_support.html</anchorfile>
      <anchor>a080964c77b733e562049e1ff435346fd</anchor>
      <arglist>(const Properties &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::util::Usage</name>
    <filename>classactivemq_1_1util_1_1_usage.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Usage</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>a82fe94d6424b40f5b7f6d8115f2c20c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>waitForSpace</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>a9acc2459460eeb0121296add80e62087</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>waitForSpace</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>a311dea87024ea2f5324c432720ad9e97</anchor>
      <arglist>(unsigned int timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enqueueUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>ad4c950fb5fbca102bc188441ce105396</anchor>
      <arglist>(unsigned long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>increaseUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>abaeb66188581530e51625c95c8983967</anchor>
      <arglist>(unsigned long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>decreaseUsage</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>a241c0ce875adc2f7d73fab901df6adbe</anchor>
      <arglist>(unsigned long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFull</name>
      <anchorfile>classactivemq_1_1util_1_1_usage.html</anchorfile>
      <anchor>a880b53e2079eba57e2beed36d881b331</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::wireformat</name>
    <filename>namespaceactivemq_1_1wireformat.html</filename>
    <namespace>activemq::wireformat::openwire</namespace>
    <namespace>activemq::wireformat::stomp</namespace>
    <class kind="class">activemq::wireformat::MarshalAware</class>
    <class kind="class">activemq::wireformat::WireFormat</class>
    <class kind="class">activemq::wireformat::WireFormatFactory</class>
    <class kind="class">activemq::wireformat::WireFormatNegotiator</class>
    <class kind="class">activemq::wireformat::WireFormatRegistry</class>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::MarshalAware</name>
    <filename>classactivemq_1_1wireformat_1_1_marshal_aware.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MarshalAware</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a571686d9593a176746966d97e94247af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isMarshalAware</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a51c4eba900766c6c7621c454b1e4e2e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beforeMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a97f8492a691191e6fbbdb4251ab84b9a</anchor>
      <arglist>(WireFormat *wireFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>afterMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a3bd1569add8b77d01810c3631fe55c4b</anchor>
      <arglist>(WireFormat *wireFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beforeUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a25d8ef1e29167419ddfcdac4ea623ea9</anchor>
      <arglist>(WireFormat *wireFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>afterUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>ad6750ec3a43b991be46a694a2086f003</anchor>
      <arglist>(WireFormat *wireFormat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMarshaledForm</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a5340651bd06870c5c126e06dbe599029</anchor>
      <arglist>(WireFormat *wireFormat, const std::vector&lt; char &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>getMarshaledForm</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_marshal_aware.html</anchorfile>
      <anchor>a9e274448bb5382d038ff21678a0789ee</anchor>
      <arglist>(WireFormat *wireFormat)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::WireFormat</name>
    <filename>classactivemq_1_1wireformat_1_1_wire_format.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>a45cb2960ef3803036b40389c1f8dab74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>a4b7cf29b597ba136f2ec3a034c941e06</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command, const activemq::transport::Transport *transport, decaf::io::DataOutputStream *out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; commands::Command &gt;</type>
      <name>unmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>a65751b699dec7e80741620feaa101d7c</anchor>
      <arglist>(const activemq::transport::Transport *transport, decaf::io::DataInputStream *in)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVersion</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>aef9b71f57b4e32a6648276837e5ef04e</anchor>
      <arglist>(int version)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>ae56fe3f1a286407cb67906785a492201</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>a6782607c148982f2695ec3ea81aea9bb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>inReceive</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>ae38e9c12572289fd242c94281fc679da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; transport::Transport &gt;</type>
      <name>createNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format.html</anchorfile>
      <anchor>ac3ba9f7d99bb87e189e6c677fe635ffb</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::WireFormatFactory</name>
    <filename>classactivemq_1_1wireformat_1_1_wire_format_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WireFormatFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_factory.html</anchorfile>
      <anchor>a56bee9797567328ede189f35da73aeca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; WireFormat &gt;</type>
      <name>createWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_factory.html</anchorfile>
      <anchor>a41f6897ed1a93f9de879862e5999fccd</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::WireFormatNegotiator</name>
    <filename>classactivemq_1_1wireformat_1_1_wire_format_negotiator.html</filename>
    <base>activemq::transport::TransportFilter</base>
    <member kind="function">
      <type></type>
      <name>WireFormatNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_negotiator.html</anchorfile>
      <anchor>ae946d6d5cebab6353604b9fd7c6402dc</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WireFormatNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_negotiator.html</anchorfile>
      <anchor>ae77b6c84ded33068a82340461df48eb3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::WireFormatRegistry</name>
    <filename>classactivemq_1_1wireformat_1_1_wire_format_registry.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WireFormatRegistry</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>abfbccdbe5b5d8e9bd28e452f6d5818dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WireFormatFactory *</type>
      <name>findFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>a2c57a1dc69bf8411c43024ff7e7433ff</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>accfe3a664c39c7afcb31930238175684</anchor>
      <arglist>(const std::string &amp;name, WireFormatFactory *factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>ac447ab5d3dddd210802b644ba0965cb8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterAllFactories</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>a60df23837d9f6d9aa17ec85cdc1f44b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getWireFormatNames</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>a8bd8d25f2789fb00368ec41af99e7c55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WireFormatRegistry &amp;</type>
      <name>getInstance</name>
      <anchorfile>classactivemq_1_1wireformat_1_1_wire_format_registry.html</anchorfile>
      <anchor>a51a974ed711114d94bbd2dc926c2fe96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::wireformat::openwire</name>
    <filename>namespaceactivemq_1_1wireformat_1_1openwire.html</filename>
    <namespace>activemq::wireformat::openwire::marshal</namespace>
    <namespace>activemq::wireformat::openwire::utils</namespace>
    <class kind="class">activemq::wireformat::openwire::OpenWireFormat</class>
    <class kind="class">activemq::wireformat::openwire::OpenWireFormatFactory</class>
    <class kind="class">activemq::wireformat::openwire::OpenWireFormatNegotiator</class>
    <class kind="class">activemq::wireformat::openwire::OpenWireResponseBuilder</class>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::OpenWireFormat</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</filename>
    <base>activemq::wireformat::WireFormat</base>
    <member kind="function">
      <type></type>
      <name>OpenWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>ae182d1d80f672c82a8e6a76797d92b04</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a0cd7c09addbecf0bf9fcb37e6fa410d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>aa8af2eb60bdde56e7f44dfad23454ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; transport::Transport &gt;</type>
      <name>createNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a12ac0a44c2608871e02e5f9576a81856</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a0ec638678d3e8c2b11d077afc2fb985b</anchor>
      <arglist>(marshal::DataStreamMarshaller *marshaler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a539b57f6b694f5c615b76d9ac91a11dc</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command, const activemq::transport::Transport *transport, decaf::io::DataOutputStream *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; commands::Command &gt;</type>
      <name>unmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a941d63607245a0fe358ee9454df4cf32</anchor>
      <arglist>(const activemq::transport::Transport *transport, decaf::io::DataInputStream *in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshalNestedObject1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a63401667af85c64980df39165ee93dd3</anchor>
      <arglist>(commands::DataStructure *object, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tightMarshalNestedObject2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>ab5c0b23df1c870da48bbca27b498ff46</anchor>
      <arglist>(commands::DataStructure *o, decaf::io::DataOutputStream *ds, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function">
      <type>commands::DataStructure *</type>
      <name>tightUnmarshalNestedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>ac3d181022024ad086d1cdc0d03a9b738</anchor>
      <arglist>(decaf::io::DataInputStream *dis, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function">
      <type>commands::DataStructure *</type>
      <name>looseUnmarshalNestedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a3d6d464a5c2739d660e4461d4f41a69f</anchor>
      <arglist>(decaf::io::DataInputStream *dis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>looseMarshalNestedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>adcee153acda29d809cd739fb87a562d4</anchor>
      <arglist>(commands::DataStructure *o, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renegotiateWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a2b120a7774e86f455646a88b981a5bd8</anchor>
      <arglist>(const commands::WireFormatInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreferedWireFormatInfo</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a036e6a04d8ed68ea68d23023ea030618</anchor>
      <arglist>(const Pointer&lt; commands::WireFormatInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>const Pointer&lt; commands::WireFormatInfo &gt; &amp;</type>
      <name>getPreferedWireFormatInfo</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a01f72cae781657e8da71b0bbf3e8594c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStackTraceEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a36d4839ab373f2110eafe1745e20558a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStackTraceEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>add8236c1f0c69669784d166fa56d5963</anchor>
      <arglist>(bool stackTraceEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTcpNoDelayEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a47c87d3a090d880889d7cfbb29cb9f68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTcpNoDelayEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a258011bcc8257ef78ad53f6cb930f174</anchor>
      <arglist>(bool tcpNoDelayEnabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVersion</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a390d721414be772798392a7c6b579980</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVersion</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a222923c7eefe4e1be21e9daa79640fc3</anchor>
      <arglist>(int version)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inReceive</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a58f42846fdf9c5edd231edcb64746d81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCacheEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a3786819ed86efff6f702616d89fc719d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a4b6a43caca2575bb32c55952a05b00cf</anchor>
      <arglist>(bool cacheEnabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCacheSize</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>aa5fc08c83e11f49104b70632fc1bc3b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheSize</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a5b3199fd1f019a0f334b2734c2a6b2c1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTightEncodingEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a0cb787b1b5107e6c28e23b244b5e4c68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTightEncodingEnabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a7d5996df3a158fcf5f48c2f43c3569a9</anchor>
      <arglist>(bool tightEncodingEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizePrefixDisabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>af347ac45b6f62cc6cf8115d93eca0645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizePrefixDisabled</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a0f6a598a6787fdeb817ec421caf89544</anchor>
      <arglist>(bool sizePrefixDisabled)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getMaxInactivityDuration</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>aa48340a079df67999a19e02ef879805a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxInactivityDuration</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>abb6382a1734375676121f429e4fec659</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getMaxInactivityDurationInitialDelay</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>aabb06a0eda1bb1eb6742041ef2528b49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxInactivityDurationInitialDelay</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a60cbc4ae11d0a1b35732b05033737d44</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>commands::DataStructure *</type>
      <name>doUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a57f4ab7f457b19cf59aaa423455076f0</anchor>
      <arglist>(decaf::io::DataInputStream *dis)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroyMarshalers</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a025d7078aaa8abe9ad77cf67579aff69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>NULL_TYPE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>aa955a29ed750d4dc591cfcd2af8b3845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>DEFAULT_VERSION</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a4a5f967e14c5ed5297071c47e43bf487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>MAX_SUPPORTED_VERSION</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format.html</anchorfile>
      <anchor>a374ae9c59f8780f8f8d676e131678c43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::OpenWireFormatFactory</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_factory.html</filename>
    <base>activemq::wireformat::WireFormatFactory</base>
    <member kind="function">
      <type></type>
      <name>OpenWireFormatFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_factory.html</anchorfile>
      <anchor>afec8292c5f9a777b7db6890afa6f6aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenWireFormatFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_factory.html</anchorfile>
      <anchor>a20cd85169c2b4f3915f64c7de6a66b97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; wireformat::WireFormat &gt;</type>
      <name>createWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_factory.html</anchorfile>
      <anchor>a1454f5ee91378c06354ebc1975c96fbe</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::OpenWireFormatNegotiator</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</filename>
    <base>activemq::wireformat::WireFormatNegotiator</base>
    <member kind="function">
      <type></type>
      <name>OpenWireFormatNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>abe439b9affa064809382ec4125f400d7</anchor>
      <arglist>(OpenWireFormat *wireFormat, const Pointer&lt; transport::Transport &gt; &amp;next)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenWireFormatNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>a848d701529b092646024d7eb3d798611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneway</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>a049ae9b3462e805aaaa7788f2818ec0d</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; commands::Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>a2ab196889e0c7f6258c23f79bfbcc3d4</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; commands::Response &gt;</type>
      <name>request</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>a81c4f3b8e0c9b3d3f5ba2f8a76d49b15</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command, unsigned int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCommand</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>ab3ab77d50e61286880cf97744749911c</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onTransportException</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>a5fd90966efcfb4faea06e93db7a094dd</anchor>
      <arglist>(transport::Transport *source, const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>ac8e106eab6b8a1ad196202bf71448e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_format_negotiator.html</anchorfile>
      <anchor>a5fe632f4e16d041216c5fc9701d70eae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::OpenWireResponseBuilder</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_response_builder.html</filename>
    <base>activemq::transport::mock::ResponseBuilder</base>
    <member kind="function">
      <type></type>
      <name>OpenWireResponseBuilder</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_response_builder.html</anchorfile>
      <anchor>a8a4feacd7a15bd9dfcdfae8a166dba6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenWireResponseBuilder</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_response_builder.html</anchorfile>
      <anchor>a1559f6e5a278b2e511164faa77d468be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; commands::Response &gt;</type>
      <name>buildResponse</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_response_builder.html</anchorfile>
      <anchor>af8a9d1ea4b655c8de9964a69fd5d96fc</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>buildIncomingCommands</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1_open_wire_response_builder.html</anchorfile>
      <anchor>a7116c24f786672535eb3ba7d5e294d6c</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command, decaf::util::LinkedList&lt; Pointer&lt; commands::Command &gt; &gt; &amp;queue)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::wireformat::openwire::marshal</name>
    <filename>namespaceactivemq_1_1wireformat_1_1openwire_1_1marshal.html</filename>
    <namespace>activemq::wireformat::openwire::marshal::generated</namespace>
    <class kind="class">activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::DataStreamMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::PrimitiveTypesMarshaller</class>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::DataStreamMarshaller</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseDataStreamMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>aad6f6cb750c645e15f4f1ac63f166a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a08989db8ef9553cab5d80067ab55b60e</anchor>
      <arglist>(OpenWireFormat *format AMQCPP_UNUSED, commands::DataStructure *command AMQCPP_UNUSED, utils::BooleanStream *bs AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ac91f4babbfcc404d77a1aef39cf59c32</anchor>
      <arglist>(OpenWireFormat *format AMQCPP_UNUSED, commands::DataStructure *command AMQCPP_UNUSED, decaf::io::DataOutputStream *ds AMQCPP_UNUSED, utils::BooleanStream *bs AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a0d216236f058df926ce4843ea0b4a252</anchor>
      <arglist>(OpenWireFormat *format AMQCPP_UNUSED, commands::DataStructure *command AMQCPP_UNUSED, decaf::io::DataInputStream *dis AMQCPP_UNUSED, utils::BooleanStream *bs AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>aaf214d611e82f0375d5ab3cf290f3a87</anchor>
      <arglist>(OpenWireFormat *format AMQCPP_UNUSED, commands::DataStructure *command AMQCPP_UNUSED, decaf::io::DataOutputStream *ds AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ad5efc69a2c64027b89e0ca46e7df0bf9</anchor>
      <arglist>(OpenWireFormat *format AMQCPP_UNUSED, commands::DataStructure *command AMQCPP_UNUSED, decaf::io::DataInputStream *dis AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a57aea644bbd38a8ccade8a4f0ff4495b</anchor>
      <arglist>(const commands::MessageId *id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ad36030bdd800f1d6eeddbcae47a34621</anchor>
      <arglist>(const commands::ProducerId *id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a772de278e837853b49969a8df40a2003</anchor>
      <arglist>(const commands::TransactionId *txnId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toHexFromBytes</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>aeb397aa808abcc0b6ffacb26c747a5f4</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>tightUnmarshalCachedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a1bd7c4599a40c6954649b3df03204409</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshalCachedObject1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a852a5be7b4a9dda6ca7bce3adbfef7e6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *data, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshalCachedObject2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>acd96a1afb337d3ea938a55e2b858e89c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *data, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshalCachedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>acd06800219ea4cb70d4aacde28ed28f5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *data, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>looseUnmarshalCachedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ad8eba09223cb03f0083674cc7cafc860</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshalNestedObject1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a5567bc7154117d8d82d8518d366d247a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *object, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshalNestedObject2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ad47954adaffd577ad426977e90cc9e9a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *object, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>tightUnmarshalNestedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a0769abd26a630a4c8e9c713161ca1059</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>looseUnmarshalNestedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ab04441acb1fc187230c2c2a36e947eaa</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshalNestedObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>af7f22122d338e88013b444986c7815c7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *object, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>tightUnmarshalString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a6b8d9e5fec6ce71fa9ee6cda6a0d14e1</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshalString1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a1b139294f0a7dd263ddf3b0afaf7b8e2</anchor>
      <arglist>(const std::string &amp;value, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshalString2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ab0da37532ef90c631f05cfff39872c7d</anchor>
      <arglist>(const std::string &amp;value, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshalString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>ac4f8845f552fa114b0fa691862ddc83d</anchor>
      <arglist>(const std::string value, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>looseUnmarshalString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a5a44a44d90f636ce53e34ed76e30ea6e</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshalLong1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a345e5ee50d8d6fc81e5165006250e799</anchor>
      <arglist>(OpenWireFormat *wireFormat, long long value, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshalLong2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a773594c1caa62c6d8c50734ee0b68bf6</anchor>
      <arglist>(OpenWireFormat *wireFormat, long long value, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual long long</type>
      <name>tightUnmarshalLong</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a32971b18dc91755e68e33548f00da80d</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshalLong</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>aaccb249e5c29460f67e8f1168292eeda</anchor>
      <arglist>(OpenWireFormat *wireFormat, long long value, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual long long</type>
      <name>looseUnmarshalLong</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>aed139076b018e87a84362963c9ab9f0c</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>tightUnmarshalByteArray</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a9fafc6bd3d36bfa2b6278ff49963c216</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>looseUnmarshalByteArray</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a5dda7d95f43bc0503ebea996fb96ebfc</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>tightUnmarshalConstByteArray</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a218b256b566b2d864059afc5c76b0161</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>looseUnmarshalConstByteArray</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>aca3f8039c17b2a79dbf31c82023124f6</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>tightUnmarshalBrokerError</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a5a6b655f9228bd7a6b6316799b23a11f</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshalBrokerError1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a7986cc99f8f0bc8b41684c3d3713bf14</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *data, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshalBrokerError2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a81cbef8a911e3b68fb295f48a476cff5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *data, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>looseUnmarshalBrokerError</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a7bfd554107d38a35217ea83369f3d582</anchor>
      <arglist>(OpenWireFormat *wireFormat, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshalBrokerError</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a8b8a1c499ef21d5f4701c67cbb57ce00</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *data, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>tightMarshalObjectArray1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a1952572627907bce4afbe0fef677ebe7</anchor>
      <arglist>(OpenWireFormat *wireFormat, std::vector&lt; T &gt; objects, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tightMarshalObjectArray2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a073152c012d33ef260e0222f3df251af</anchor>
      <arglist>(OpenWireFormat *wireFormat, std::vector&lt; T &gt; objects, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>looseMarshalObjectArray</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a85efee5fa07f2de09434ca01cfb3af91</anchor>
      <arglist>(OpenWireFormat *wireFormat, std::vector&lt; T &gt; objects, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readAsciiString</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_base_data_stream_marshaller.html</anchorfile>
      <anchor>a2739d11f31541c192ec9421ee77ac311</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::DataStreamMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataStreamMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>a7ebe49a8f228ef92554afb076835414c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>aa83fa4686412dc7e6479ed1d4c1f100c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>a7457c904c81cb8e02a4c8464c83d91de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>a1c3006277d81ad9c4ddc9ed8e8562618</anchor>
      <arglist>(OpenWireFormat *format, commands::DataStructure *command, utils::BooleanStream *bs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>a24dab7a64051b372268d6b5babc41c9d</anchor>
      <arglist>(OpenWireFormat *format, commands::DataStructure *command, decaf::io::DataOutputStream *ds, utils::BooleanStream *bs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>adfabafb0ac66e3b1d21f65c962b76397</anchor>
      <arglist>(OpenWireFormat *format, commands::DataStructure *command, decaf::io::DataInputStream *dis, utils::BooleanStream *bs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>a2de55202faba2c079768861fbae47b13</anchor>
      <arglist>(OpenWireFormat *format, commands::DataStructure *command, decaf::io::DataOutputStream *ds)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_data_stream_marshaller.html</anchorfile>
      <anchor>a1289baca6d8bda544c1498b3198d53cf</anchor>
      <arglist>(OpenWireFormat *format, commands::DataStructure *command, decaf::io::DataInputStream *dis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::PrimitiveTypesMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</filename>
    <member kind="function">
      <type></type>
      <name>PrimitiveTypesMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>afb132261d67fe8e90d0f1c09671c0ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrimitiveTypesMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a6195a7d8b0cc5e8bdf89d6fa8829eced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>aa8a1a1a61c40430533854446b7788e58</anchor>
      <arglist>(const util::PrimitiveMap *map, std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>aa2079b6d69c43481ccf433dbe3bf7a84</anchor>
      <arglist>(util::PrimitiveMap *map, const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a6735fee540ace3788f90e326d50ef547</anchor>
      <arglist>(const util::PrimitiveList *list, std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>aa389797fffd2d2e87139daa76d76795a</anchor>
      <arglist>(util::PrimitiveList *list, const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>marshalMap</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>aa249dd37c7200028fa9b92f201a29b89</anchor>
      <arglist>(const util::PrimitiveMap *map, decaf::io::DataOutputStream &amp;dataOut)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static util::PrimitiveMap *</type>
      <name>unmarshalMap</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a6470920d9aedc080bd14e1161d073529</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>marshalList</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>aa828a3d4419fc90d7502d0f8d562eb9c</anchor>
      <arglist>(const util::PrimitiveList *list, decaf::io::DataOutputStream &amp;dataOut)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static util::PrimitiveList *</type>
      <name>unmarshalList</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>abd54c0def1e62352ebbe61731a8fa0ec</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>marshalPrimitiveMap</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a2b301e12de92f8a481e124012e5e7125</anchor>
      <arglist>(decaf::io::DataOutputStream &amp;dataOut, const decaf::util::Map&lt; std::string, util::PrimitiveValueNode &gt; &amp;map)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>marshalPrimitiveList</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a5cb13d39ed79570120d606fcb0f4a399</anchor>
      <arglist>(decaf::io::DataOutputStream &amp;dataOut, const decaf::util::List&lt; util::PrimitiveValueNode &gt; &amp;list)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>marshalPrimitive</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a866c95ea29a47032d329820c12e9af51</anchor>
      <arglist>(decaf::io::DataOutputStream &amp;dataOut, const util::PrimitiveValueNode &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>unmarshalPrimitiveMap</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>ae0e9095e43f29314a126588a8565f69f</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn, util::PrimitiveMap &amp;map)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>unmarshalPrimitiveList</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a12ec7a1437fa6f24e03d378efa273db1</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn, decaf::util::LinkedList&lt; util::PrimitiveValueNode &gt; &amp;list)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static util::PrimitiveValueNode</type>
      <name>unmarshalPrimitive</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1_primitive_types_marshaller.html</anchorfile>
      <anchor>a2bed58e1fdd3c8d6574d4d2aa4dc5161</anchor>
      <arglist>(decaf::io::DataInputStream &amp;dataIn)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::wireformat::openwire::marshal::generated</name>
    <filename>namespaceactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated.html</filename>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQBlobMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQBytesMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQDestinationMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQMapMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQObjectMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQQueueMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQStreamMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTempDestinationMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTempQueueMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTempTopicMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTextMessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ActiveMQTopicMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::BrokerIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::BrokerInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionControlMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionErrorMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConnectionInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConsumerControlMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConsumerIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ConsumerInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ControlCommandMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DataArrayResponseMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DataResponseMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DestinationInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::DiscoveryEventMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ExceptionResponseMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::FlushCommandMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::IntegerResponseMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalQueueAckMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalTopicAckMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalTraceMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::JournalTransactionMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::KeepAliveInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::LastPartialCommandMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::LocalTransactionIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MarshallerFactory</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageAckMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageDispatchMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageDispatchNotificationMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessageMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::MessagePullMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::NetworkBridgeFilterMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::PartialCommandMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ProducerAckMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ProducerIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ProducerInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::RemoveInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::RemoveSubscriptionInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ReplayCommandMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::SessionIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::SessionInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::ShutdownInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::SubscriptionInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::TransactionIdMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::TransactionInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::WireFormatInfoMarshaller</class>
    <class kind="class">activemq::wireformat::openwire::marshal::generated::XATransactionIdMarshaller</class>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQBlobMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQBlobMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>a0d2658fe13409b21b32a4312b9161f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQBlobMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>adf325df4a6b26237991d5b07444f3ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>a1478ab4e786c898d8e17b3b9da97d0b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>ab2ec92947b07a51047810c8889169cef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>aeb47228f8268f69b43855070e26b4869</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>aaa67d576365eb32107a8a7da8c5bb051</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>aede7ad0b92cab09e56d255d8df276d22</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>a86d41f7ced3fdb20c5d7d337f81abad7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_blob_message_marshaller.html</anchorfile>
      <anchor>a14ab3a6e4ac5c8c820c7ce9b9ae2c25c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQBytesMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQBytesMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a953e8bbcd6e5ab611aad85324f096605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQBytesMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>adbb28f1b76b1abf89cc41f7fba1b80b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a88e1ce877e2ef938fd0e34f41dec5bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a9ac29f060f2e1ea02a08ea985eb22b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a719a3c822d1143d01c11fdcfde03c17c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a222e986404b2c3c0df74ef404c73b61d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a6e0a42d30528cf95970c9fd09c0ab0f6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>adf8b3554aad127c3dd007f8424a7d700</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_bytes_message_marshaller.html</anchorfile>
      <anchor>a6a2c165263ed46ab7d7aee5d3ae665f1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQDestinationMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQDestinationMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>ab1880503d581d0ff66a5165e76c7cf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQDestinationMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>a5c6c4ea67af91cbb229e0a135d25049f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>a76e0ff453da87c848278f7bf8ae51563</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>a726d26327178c9adf1327862f2639717</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>affe2b50d77c4c4ce659fce3aae83889c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>a463219d48a77cd6778f2c5f84b16fb8a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_destination_marshaller.html</anchorfile>
      <anchor>aaf0dbb422ddd133ffedbcc2fc2ef1568</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQMapMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQMapMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a4e3bb793670aa91fbf45c268a41ec9b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQMapMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a4b903f453616e81391e1af3803a6d1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>aa1ed38f0fa5b1afc556251dac66982e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>adaf9fa5593643124f15279a62f2b6e4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a79864ebbce69a427d088ea7ca5547f3e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a953c6c5201b883a67e8c576337de8de5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a8c8ec7853d583748abe3537383f95fba</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a1b87b9597df48e110e840a78a95426fa</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_map_message_marshaller.html</anchorfile>
      <anchor>a7514595673d5b70d1b3476891eae05fd</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>a3134ef48031074d1ac4a85cfd28a1edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>a9285c637f39082afe741aeec3f083e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>ac0a64476c1bd140a401681ee15c90e52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>a1dc5323062068f4afb5eba49abac39bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>a362f124e14594ed30ed5c121d5d92841</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>aa0de56feae178173b05dcd20ce9aa460</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>af6aacba0b5892d6a8ccad0d921a2297f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>a66f6c8c7feb4a780f243fc0adbce4884</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_message_marshaller.html</anchorfile>
      <anchor>ae684bcb08b7cc3de3b07909279e04f54</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQObjectMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQObjectMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>ad4645a8a79f9a8e8c972b450e9791f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQObjectMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>ad79a5bc23559a9f0d8a7ee2f4f92599d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>ab86db2ea92e0b0ddd167ce22b996aeff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>af3e4bf31985d06c6f4d19edd7a9b5e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>afd0087b02f2bff6f20855088dbf8a1a5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>a7776ac87451359376c46486a8ec48a32</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>a635de132e53a3344a35bf5586024cf66</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>a8004710ed9d01f77d55c6d5e225d3175</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_object_message_marshaller.html</anchorfile>
      <anchor>ab0084590f2b4a53d5ea3dd0ffcbe15cd</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQQueueMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ActiveMQDestinationMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQQueueMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>ad541c54cc7899de676212d24f80a99db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQQueueMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>a23c4210b3d807f1df7c4de259b4ed6e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>a27c8cd9bff549eec98b16a718f7495f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>aa0006262e662aa525a86f49deb787ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>a4c424967b09365f168f97abe60489e00</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>a1d8c8dbf6cf053016b8f786bd60b83d5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>acb5e99f0d365b715c38d750ea80634bd</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>aafd7dba1352cbe616381a66f525d871c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_queue_marshaller.html</anchorfile>
      <anchor>ae2aef325e3774709cd1314116e576c04</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQStreamMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQStreamMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>a169a21a254e0081d1ae388c12fd1ec3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQStreamMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>a6655d9f7b4e0d0308eb7a6b9898bc2fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>a7921d754b7e2dc77453da846b38c58bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>ad8a21aa89d0ca5a3cbcb9ed16170e823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>aed0b49bf2cf2bcc680d00ab6ede25da7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>a28aeb0337bcce3cd872f87790185f020</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>ac91d2f0184079e21a03d52c383ab66c1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>aeccbd8f05720f5051268f21a80b617ad</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_stream_message_marshaller.html</anchorfile>
      <anchor>a7b234e0cd833093eaf55ae7a35e6bd67</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQTempDestinationMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ActiveMQDestinationMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempDestinationMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>aa18bd363913749d92ac86909cbe9ff9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTempDestinationMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>a10e57d3acb26398742e7568cb4620f27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>a2dcca0a0813eda73b90d1857ec56387d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>a0dbe10a52d85424ad76343558d97db44</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>a8fc8d431f919efecf57afdaa552f1f61</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>a5dccaae48d7e5cd8722847fcd23b1ff9</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_destination_marshaller.html</anchorfile>
      <anchor>abd1cd5712d4c762a007a1eb5b00f5989</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQTempQueueMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ActiveMQTempDestinationMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempQueueMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>a6219794a9903487eb5ee89b026540bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTempQueueMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>acacc4a3e16ca75265bed84ea66c5e039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>a63fbaeb4eacf00e11688bbbf22bad241</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>aac898d389f15699def39d29bb14beb16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>abdaac20611aa7157ef1870126c5506b5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>a7d7e36bdc1cd41865270722201447dbb</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>a7a27781457be1e7c94ca844ba1c6344f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>a25c540aa8f60aca24844fb843f8fc73e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_queue_marshaller.html</anchorfile>
      <anchor>ac082bb99dabf4a4c72115576ad714a73</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQTempTopicMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ActiveMQTempDestinationMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTempTopicMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>a75f004d62fbd60dad7da09ff4a716b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTempTopicMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>a27d629af05debcacb25a026dcc0fa73c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>a3dee7d67c59ed1e9c5ee4c046d0bd259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>ac92a4e824fe9340e1c8e410d994b4aca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>a03ffe0c6d7e90637dbade0da7566ab4d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>a7fae4695199f210c7119a85ac3d64ba9</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>adb98e65e04a858f02ae9c2cb24b53313</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>a9f5a8c603ab02cf7f1a923aba81200c1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_temp_topic_marshaller.html</anchorfile>
      <anchor>ad1657995e4dc1e144f1d1999b9a84890</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQTextMessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTextMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>a92ab394720acc8e17ccfb3f2e48d1c01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTextMessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>a67de2822f5faabbb63de8a9551804869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>a033b57234daae2abf405760dbc88033c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>a4ecce70b1890b8f894628e8d91e2a18f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>a0f92a2b102d5202c5743375c6602b19a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>aa534408243ef4eb998f14d4faced9753</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>aff528b211e3eb091169d25d717bdc38b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>ad9d574629e9a10d05e6c0b8164f9e3d8</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_text_message_marshaller.html</anchorfile>
      <anchor>a1dcab15b35ba12310ec4a52e70a9da65</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ActiveMQTopicMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ActiveMQDestinationMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ActiveMQTopicMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>aec590884f157e082ad3690622a63757d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActiveMQTopicMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>a911315961b9e5393b57e62b7d220d854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>aa89a3b7fc27fc379b1cf3f0e9dff472f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>a237b4e748e22278eede0f2e5f696741f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>ab34f0ec4ab3cbb7c9cd640b6b6e5b4f6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>ad967fcbd497525316ee5433a379a9949</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>a884110cb46fe86cbc421387f96d05c57</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>aaf31c824a86a8c8ec25704ca05de218f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_active_m_q_topic_marshaller.html</anchorfile>
      <anchor>af6a3c9e1d1a471a659e1af40566c054c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>BaseCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>a4ebdc1516eb56c0ec7f7f6a97677f369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>aec0296168391f2292778a9e7dab7fa0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>af9f3cb5cda78e99ef4bcff1e3e08d4ec</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>a6e9f037ed85fe3446c3f4ee585d1930c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>a0d9ec3b01606ef40daf099ff2a743e29</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>a7b91b1d0f23e9c77190d4362d77c5164</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_base_command_marshaller.html</anchorfile>
      <anchor>aec934300c0f624e90ca2439a2e388c6e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::BrokerIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>BrokerIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>a220dafa3591bc65c74b679be04c61dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokerIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>af73be181defc3b1e0f3aa0e00614e2fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>a6ed1cad0ada54acfa88cb9659f5ddac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>a7b0f217eb80d401112b195efc4415403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>aee36b69a8b8c4b82b21f159a040e737d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>af7cb2ec394f28cf44814aac7b071ce47</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>a2ac4d9b6c344d217b64ca24c5c6e285b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>a8d4784e78f32e51499a9334c996f11ca</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_id_marshaller.html</anchorfile>
      <anchor>a0033a3f006ce9e357e4b08f7b12a5f66</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::BrokerInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>BrokerInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>a5b31bceecc1e2fd4ce41cfba115a388d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokerInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>aa4339fc27c7971d1905a991076224eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>af7c071b1279488fea9de0c7a29760694</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>afcd3bbdc1dad35f05570de90ae5b05be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>ada0995da46ec5b7d9857a71b11faf681</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>ab69ef83a4ae7dcc223677f697023add7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>acf8cff1291d6dba3bf40c4a0c6db47df</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>ae942d72757c1c688f93a1ecb57c737cc</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_broker_info_marshaller.html</anchorfile>
      <anchor>a1f542225cf852c6b0d699997fcb974b7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConnectionControlMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConnectionControlMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>aa65cb77941b4f08c08d95e220652284d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionControlMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>abbc0fc06f781e25033dde31774b919cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>a53f44ff121ed8e6b7da4fba063fb13f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>acd2ba4cdb6bd64c6cf7cf3ad8c2db712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>a9e0da7bff8c6b4d23e3c65afde920f5b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>af019a9f9c8bfd0c1d9ebaf6e000b99e3</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>a24b15fc2d08cea0fe8954d5829eeb813</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>a1767d6ee425790071c45c68a30c3c6f2</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_control_marshaller.html</anchorfile>
      <anchor>a9db92c9c3b928b9149a590fd205c43e5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConnectionErrorMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConnectionErrorMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a348cfb72eb0d2481c0d58cf7edc06deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionErrorMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>afeb8d197612fbf48329bc31a7556e87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a5cc5b24d6ab007e3a510e5d9dea6b9b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a53184f690619773c049cc029b2376cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>adb54f366a6f003c54e8720048a56621e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a2c93fd73bc612968a1098dc9d83f9a2d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a9ebec223e5cff729358e319bfbcd0ffc</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a70829178728bd20b77c943a946bc68f0</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_error_marshaller.html</anchorfile>
      <anchor>a87667ab42391e2596e73a7b87da82b2b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConnectionIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConnectionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>ac7facf134a4ab60863c03348db27193e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>aa24f521c5173906a9f29976e5927b43f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>a3d7ca4c55d64b015bcc0c3dacc7aa07b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>ad540b50b976ab02d17aefd96f797b970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>a0fbf70ed052efbef9c76716d8fa0cd48</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>a1f38e92f040bd8bba1098015f5671610</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>a49e09bae84294991b7bfe2abee30cd07</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>a2c6ead39789dd64db11a9d636570f56b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_id_marshaller.html</anchorfile>
      <anchor>a43a18887373cac5c5a3876fb65a99b7c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConnectionInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConnectionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>a332a3ac79efc476866aa9abe8fb9577a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>ad3dbfd87989f0fba3aba92c256b15d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>af7586bf15e34b88691485c67d4ab7bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>aa7dfef2478866dea420a39528794e9e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>a31c5d34d0c2c6e0a038d2377ad88e072</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>a43376c61d131b46689dc463ea4677341</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>a480de32092128ab9280b7f0dec26c875</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>af8ef7cc5098b553fc6c23409b99b6366</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_connection_info_marshaller.html</anchorfile>
      <anchor>a594bdca379db9478feac3b523c37b085</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConsumerControlMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConsumerControlMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>a6e5e50954a1fecdb239732b7b9ad1651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerControlMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>ad25be75f127430741ed05fffe5f2e22f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>a0eb48508db9e262e788ca41ca4cb2522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>a13a8e9197f93ed126cb996a777543ace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>a093b02e5086ad9ae9246ce5d8e9dfdaa</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>aa602decf23f264c26aa8c5df2b624024</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>a75e918c52873f1c8105a1f3eac77e5f7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>aadcd77d3443d437ff9f94c11796af4c8</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_control_marshaller.html</anchorfile>
      <anchor>a4a217fc09dd428b63d62441a49770fea</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConsumerIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConsumerIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>aa34f0424be28cc6381dffaaf16a3f574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>ab1c08d21142493887a79911acb972057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>accbcb16120d14f7f37ad1aed3fb97c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>a0258d61739c0973ef4d6a16c606a6c53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>a0f3a297502e311bb917ebec1c7ee931b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>a50c87cc91c4e69175acb0aa7de723940</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>a51d61bdaaf78719a5b5a97fdf23b2b94</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>ad8d284670cb0ef089122b406ec3b2a4d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_id_marshaller.html</anchorfile>
      <anchor>a5a86def0dcd59d856f7c206267a44496</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ConsumerInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ConsumerInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>af7fbb65ecdabd1f48cf518b00544f11d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsumerInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>a411ecc44927e85063f910878a0291011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>af8f8ff66c9418bb836111defd54446dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>a79303b2c3f996254861bcfe36ccc9fd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>a5d87519e0febe5c3cb25cacfa53f857c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>a6fce719fc7927e616d6a158815116609</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>a3a0e2202db0c2cee745b6cc05c06b2ab</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>aa69ce935eed11e02310ce4e0cc35721d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_consumer_info_marshaller.html</anchorfile>
      <anchor>a1c5d9d146525178bfa869828630944bb</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ControlCommandMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ControlCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>aaaaf11783cebd33425d2988fb7e61560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ControlCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>a0320422673952a8ac4b5a751d79168c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>ae155b103a676567d80bf794a40094ff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>ad27a0d39aff4fec213b39fe808334006</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>a758d720b3621b1d73953cf4ae1a39722</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>a8a930ee602cefb04a1d6efdc3b9aa217</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>acc6327b7a39be9b6730d2d736b0d553f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>a14cfc0ed41c7b8b104e2fe043e3f4dfe</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_control_command_marshaller.html</anchorfile>
      <anchor>acea7d718bace84522a4e5ad63f3deb5c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::DataArrayResponseMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</base>
    <member kind="function">
      <type></type>
      <name>DataArrayResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a63f95537a743c797996005e4f292a5be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataArrayResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>ac7576e22fa87be1c8edac68f263f68b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a093def0b3b332199ed9deadcb014241e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a228f8d5325fa1234c4008cac29aa8097</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a07ee982ee571ec747360bef139aaab60</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a79944d21a800949a5e188f86362658d1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>ace7e1e9b494ccb3ae9d724de3514d43b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a093ee6958e06e54774aebf6d381fc5a4</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_array_response_marshaller.html</anchorfile>
      <anchor>a95f6f934ab9b59d93cc5a60d14c6a86f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::DataResponseMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</base>
    <member kind="function">
      <type></type>
      <name>DataResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>ac1cc78a35b62a139b210731fa64f4ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>a63003c9de41f504a4241fc62707b5ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>aa690b51cd8c9d1544c1b3fda57d891ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>ae8afa748b2dd2d91fe078f0bdec60499</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>a200bab4e4c98ddc27424e6599a7c3e48</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>abf69a3a463cf839b838e03d326963301</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>a8b74412ec5bc768a262a88a1ea6341b6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>a7e1ae7fd4795cc8aca33c5a3078b2758</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_data_response_marshaller.html</anchorfile>
      <anchor>aa556baaebbe4ddfebc30c477a7fc8091</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::DestinationInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>DestinationInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>a96293c52d30ba1b15e38e55ecd8aacac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DestinationInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>a9fbbf53a03ba8d11a56aa0b3813957ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>ac99954716d84497e0f487e2ea1658a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>aa93d143c1f4170655b03b5106838e560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>ace6813c8ad148a8bdad19708818b0b94</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>ad015c6f55a1aa313cc5827ae15b1af4b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>a243f111aa3bca8fa7da100b87bce0303</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>aa07fd0838bac773b1afacdbcc60db214</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_destination_info_marshaller.html</anchorfile>
      <anchor>aee4a9d9d99eae356b6bd111ef1791ece</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::DiscoveryEventMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>DiscoveryEventMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a5a30e12c1da3ca2e1c3dedb503611150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscoveryEventMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>ac75b2f3a64320375ffae3bde10af67d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>ac9cab7808959f517e542ff6dcda90a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a284f03b1a9b0d0ca6706c3db5c2a3acf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a1d2c21fc066040111074ad956732bd4d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a7ec9c7eb5024b377bd6b6edb608b2e2f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a73584a9cd6b9d8318a206282d662ff66</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a9ceb7fcee3326d2acb7b814bfa27f5eb</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_discovery_event_marshaller.html</anchorfile>
      <anchor>a19ba720079f5a6395686067ddf36e3e9</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ExceptionResponseMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ExceptionResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a02070e701248a7fd3d283ac61261f4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExceptionResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a96793d05a4bc38d9167cc54faef3fd5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a1a16aa6290c750419abe9ca398b80fc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a59bad2f1a755180e287109b1faec5b98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>afe285d511a312dc43deec3f4fa4652a6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a3872e141476b53ba88e176c6d1cd3852</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a681c26190d32686a96c0a70cf54578ee</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>a32446f18648f06201adc7d27be47c31b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_exception_response_marshaller.html</anchorfile>
      <anchor>af000f028ca61b2f5b81ada88a7e69dd2</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::FlushCommandMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>FlushCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>abd5b9756e5fce699965ba6da792ba651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FlushCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>a6b629f559d2b5ceea292e14a16b972f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>a548c7171f2db638883fa6353e0a5a98a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>a39aff65f588f25c663a7ef851c925c60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>ad2a25d78f4bb95420a6d7730758a142f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>a3e0d4a9e43b58d81ea33f1f8ec4ca157</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>a6a9d5c1a819b610d14d763c7fa302d06</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>a6bbb97b98be5e8aaf57758044db16b63</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_flush_command_marshaller.html</anchorfile>
      <anchor>ac65a47c9cbe309d6985077b76d2c905f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::IntegerResponseMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</base>
    <member kind="function">
      <type></type>
      <name>IntegerResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>a067d8057db869978972e68ea0f134f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntegerResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>a2c976d93f34e42123d09f764b1878329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>a2ee7b01148ef66b98be923bb1353eece</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>aea82d687da022b53be3a693dd8a3f5b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>ad51816e8ee0f94eca873791dfe9e3190</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>a695dd7a528f8f7147797f42349239a86</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>ab3a892ece401360cb06ebf313e0d1898</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>a520602c83a4d637f0587c77249a40a13</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_integer_response_marshaller.html</anchorfile>
      <anchor>aafe801564836056f7897834c7bb2afd5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::JournalQueueAckMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>JournalQueueAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>ab8deed234e85432f28d5ba9432d29ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalQueueAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>aa707121aeaf8314ba65eaa466188875f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>ac7c3844ad471335c4901853179b38307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>a190077440355ce529472d7c280ce803a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>a2e344d879f688b1218090c77b7657b86</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>aef0b320c899786c8ce2e8e30e7ebea10</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>ac3cd2a9547fc723affdb68b285a5fca4</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>a9f4540bf2083168dd5b8ee91cb7cbd25</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_queue_ack_marshaller.html</anchorfile>
      <anchor>a3f465d3a16d8945274deaf0136ffb165</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::JournalTopicAckMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>JournalTopicAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>a63f318035bdf91debf4691b863bf22bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalTopicAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>aa2abea277b07870078d22555ac5386ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>a35c1df15523e4a7eaa1cb9333333fc6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>ac6a1444cc30dd5704296dac24c2e94c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>a02c5f51c5cc69819e44726c75139908b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>aa4f9be73d11eb93a6036a7df6b057878</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>a03afa130dc871ed62af2ee5b45286c04</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>a9a08d4f98eaa494ed0f95cefeb82bfad</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_topic_ack_marshaller.html</anchorfile>
      <anchor>af9a824171efb9dffb747d3d580530350</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::JournalTraceMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>JournalTraceMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>acf25aeb5785b7875ee31149588cb8655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalTraceMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>a09360f34e9327d5f8bf7bf0ea9c8cfa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>a2cab00243d638cdeb9e6b003e925898f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>a7031cdbec372aa1ef367552ae5db7dd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>a5cea74386f53dab4447ae9efa0bdfbc5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>a56c6e08c0a250ea5a57f8ee8119aeae7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>aed6ef519269ca371b551df9c990a2a14</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>afa9ec01cb67e0b8379303f16730e0005</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_trace_marshaller.html</anchorfile>
      <anchor>a0b199bdbcb0b23c8c818cf597ec5e3d2</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::JournalTransactionMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>JournalTransactionMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a4519879091137051c69d5b52a4775c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JournalTransactionMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a68d374976bc0350dd8ab7e8b96a4a26b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>ae6779c45b0c5d86097fc1ba554d9a667</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a7521a64cfe4946bace5f8d4ff2374d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a3290ef0e34cec3a64fc5c52e5ebd6edc</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a6a15fe220d9aab187f9a137f93704f7a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a2c55f8c51a85d142821dee0959131a33</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a897fce1200b543ffaa713e9edaae0eb3</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_journal_transaction_marshaller.html</anchorfile>
      <anchor>a0f0ae3520697bb756c930fd0b477f260</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::KeepAliveInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>KeepAliveInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>aee47fdd9c276cbb1d723820b67c57561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeepAliveInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>a5bcd4341f67b9657a02f25b39705c0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>aee319914339ebcb97ff1af663777b8fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>aa40c08c42337bcaa8c491bafba0365b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>a05341e97b86bae3be228a2f86c4641e0</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>a574ed7e0a9044e29fe1da0740b1a683a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>a33ec24520b7a3593844888a47b844701</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>acc5159d944383355992d4c3529ff1c1a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_keep_alive_info_marshaller.html</anchorfile>
      <anchor>a449eb0e1ae358996d5ebcb70567d0bf6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::LastPartialCommandMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::PartialCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>LastPartialCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>a7f5fab9bbb0fa7eb567479a67f513a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LastPartialCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>ad032a3a3811ef253df255df5e5f7682c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>a0767e90d1bf0603afe153a0afa4bd904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>aa6b9ca5b884ae0da672f5a2a445d3034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>a249878983d3b97ee0ba948abaa10607e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>ad961a242f03f7fa948d23af805fbdebe</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>a38b5c93de8acb86c79a9ce84af78b0be</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>ae6a65b50409dc4bcd7e9bd58ca6911fd</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_last_partial_command_marshaller.html</anchorfile>
      <anchor>a4898e7acd7213622b8c3e484ab9eef44</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::LocalTransactionIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::TransactionIdMarshaller</base>
    <member kind="function">
      <type></type>
      <name>LocalTransactionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>af3f47411f610332673671b03964b919f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalTransactionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a942fdbff3ba033770b9f0d6f875ff4d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a8a7edc57f2c6cc68c7cbfb545e33f6cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a5d32e90d5a4981cd703bf195cb36d63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a93ccacc4e27ff7152344654f0610ff7d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a3be9925f2c354bf80dd64cd441d8f5d4</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a9ede1e9ab5ac72e08763cf50987f9fb0</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a142421483b079cd3841c11f978542e7a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_local_transaction_id_marshaller.html</anchorfile>
      <anchor>a23fba483af9b37fbc722085b2e64afc1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MarshallerFactory</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_marshaller_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MarshallerFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_marshaller_factory.html</anchorfile>
      <anchor>ae9ac37b17dc820e2b0011f3fa5b98a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_marshaller_factory.html</anchorfile>
      <anchor>a8acfb742618792a9b87c0bba2cebb2c1</anchor>
      <arglist>(OpenWireFormat *format)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MessageAckMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>MessageAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a1b52a0c306dd3afcaa2a71389576569a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a1662e0288df4213c020f4bbbd756c1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>ad4c428767a5339ca6d7d0ebf3f037f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a5b26797bc0cb26cd523bbefeb371de86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a53decfb6967bbd43364b8ac6686efe19</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a3c7521ba6a9c0bea304e8694d1250a3e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a8eb5fb9bb133ecf29fbd593efddbe39e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a431cc7adb9a9c4250386d236d6a97722</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_ack_marshaller.html</anchorfile>
      <anchor>a460671437afa0c15bfd8e4c38df1f367</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MessageDispatchMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>MessageDispatchMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>af665128273a5ed2b183eaa896ad5b044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDispatchMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>aa59cc9c3a81ba56c0bb7ed6ee65a8042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>a79a9138d0fa57bb42b1d14b3f229ba82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>ab17b03f7a86cf654fe62ec96378fc004</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>a634c11e55d7ec482056473194b7f2c53</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>a47ff24bb32e7ee4ca1f7dd685cb5f586</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>a1509bced7d1dbb5d997cff6262a1faea</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>ad8e5c16cf34b44d3e9129ed4d3e003b9</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_marshaller.html</anchorfile>
      <anchor>aee0196546e3d79b70e5c26ab99e57151</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MessageDispatchNotificationMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>MessageDispatchNotificationMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>a4bad8a648d7e85d7fd034144320bfd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDispatchNotificationMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>aab6ed24c8a54b91ea23558ec8a677ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>a31275ab94e87f10126c5321a2e6df518</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>ad3a5a3fea06bd5d8e4126c192204a8ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>a53670bf31fd1bacc9b77da8027be3c87</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>a7e55e84d1028b4ecb5360bb0e90b73de</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>af5202a59f4f9e9ea4a70f7396cac3c36</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>aa89b905ae0c83d3e4655aa4153d44659</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_dispatch_notification_marshaller.html</anchorfile>
      <anchor>aa8472396a0fbb9bbd60b921424b01c43</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MessageIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>MessageIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>af2d04bf0ceec9ce5ef608944427dfed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>a227acec8ef137e9e07569a28e976bcbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>ae38827ea4a656f917d2b49f7c44d2aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>af0a6753a9aef8848d9aa17b41ee20186</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>a58f326609baf8d6ec7fb79b9cb909848</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>a4c8deeb13b681b92ea49187b570af123</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>a06455b11fa858ce000020687b7e42108</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>a2a1ef5d3500593105d59777bc3444f4c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_id_marshaller.html</anchorfile>
      <anchor>ac680f85e04e6b9b7ec8b09baaf34a02a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MessageMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>MessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>aadb3ecc3a89590c5c3879f5234fb3105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>a27e79bdd4a5742efeaafbcb7a24706a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>a4b8dacf01ae8b3f21aaa8b7265668b2f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>a084afab9bcd7f2a1aaef20b8d747b972</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>abd3e8bde66b741bff0de848006af3cce</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>a156c0a7e40ef6acaeb84137bd91db5af</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_marshaller.html</anchorfile>
      <anchor>a90c12449bd82c6ca33c84bcd8bc34649</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::MessagePullMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>MessagePullMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a7b49241baec48ec804417dc115052665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessagePullMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a829337ae6c08f065ebaa4a297e8e8984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a4ecb9b60113562ace716af17d33bf504</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a25977cf92c922fd7fa84f71dbdf58d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a2eef3502f3fcc946a8255bd940ecc42b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>ad579bffbaf6916e070befde75be84934</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a6a5fa471f11760eb5e0faf09c3ff8f1a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>a8764cc9f8a2ad60b99a344c38edf26a1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_message_pull_marshaller.html</anchorfile>
      <anchor>ab75302b9904bc03ba02c3572571b2dfe</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::NetworkBridgeFilterMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>NetworkBridgeFilterMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a889b61d03899f6e54363efc28f44fcb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkBridgeFilterMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a4799de4a54b01e72d4d2d503590ebef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a0add8bc9eeda577990bcfea5a6e19317</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a8aeffa848ae7e2a162ad3dbbcc80371f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a804517aaf6001c70572735b92cb9dd85</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a0fdc7f933425807eab9ab03350c9f74d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a3ae712ce5a2478cc1311b02a5c5fe2e6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a4f44e176789fc825d85c3f3957915c10</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_network_bridge_filter_marshaller.html</anchorfile>
      <anchor>a63265fd2d5fa02fa616f0b004c0c3310</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::PartialCommandMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>PartialCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>a0d8301d738a045f7d754e74c4b3e71aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>af6967a753492556107778bd787ac7515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>a8c218a2dedebeda5bcf8cfdd60b2b248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>a9ddb683b1ee4e9066aff44b6fbcb47e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>ac4e3c8865dbd234805be823532233724</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>af2af1a8bd1372d2b38a2068369d7a20d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>a1ecf2d767e0b208f7fcbbb3f74d4d131</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>a89ca3cd36dd388e9705f541a436f4c50</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_partial_command_marshaller.html</anchorfile>
      <anchor>af984b8c77b6433bce9b8d1158b8e87b7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ProducerAckMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ProducerAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>af7eea739432fd4a98af4408a7b09b9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerAckMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>a5fd9449528206366934c0a46036b89d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>a5639eacf97de8b439dcbaa4190c09ae5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>ac282e0a0ae87f2e1bd1e94379e333302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>a32fd5d4c1b776dd2ccfa1a7acf9f20aa</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>a6000a1560e48ea3dddef3730a89e8f31</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>a333a28f202e1ce3ba8783273849b8cc1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>ac1563e189b8169822ebbb318d06b4634</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_ack_marshaller.html</anchorfile>
      <anchor>adc5af4e14b0d0fb1037f3207b6a5727f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ProducerIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ProducerIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>a18e7dae70b49dba6314333cdf03737dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>aa9461ad448149d0a589635feba14e8a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>ac95da9938ba717acf2671b2fa4f860e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>aeced3b423c7ecd70d691644a356b4109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>a3d3c3591eb0700a9d012f720fb3746b4</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>a7587b546ef6bb573b909a31f39b3b3c5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>a118fbc8214601ea0dc7c01446b1ec397</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>acce4b2597243cdda15b5d60e59614597</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_id_marshaller.html</anchorfile>
      <anchor>a4c1b2ca344f4b5f4f397d160ef40f429</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ProducerInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ProducerInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>a77a2d1d684b1e5c608ca88c7257ce0de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProducerInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>ac8732fb4ac86d96da02b5993c7f618dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>ae8b1fa665269ee5999fce03123f1f8fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>a25fce9dbca799ce6135efd42185eeac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>a5f63c6607f189a76c308f44226aaa54d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>a6034916eaec529a95f894ea2e614816c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>adf912eeb55b7abfaa4c23281d877762c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>a17ab95d75e234272fffb0eeca989cc6b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_producer_info_marshaller.html</anchorfile>
      <anchor>aa891f277799de3b04fdda3708b91206a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::RemoveInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>RemoveInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a9b35f2964472dcdd58ce4a8ccf8f431b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoveInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a08f010e6bcc3de5277beb21f25d17a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a7db1136f28362c3a9285b82f3b5b2b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a1637bd45f61fd9dcbaf5d597f5d0a5d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a23e36f1044d732d5d9216563f0cc62b0</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a87bf75e6441cca65d0aa82f98b64d037</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>ad157cbd052601a39900250a985f8dac4</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a654553ff8713b9089a5fde5b369a8035</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_info_marshaller.html</anchorfile>
      <anchor>a6afaa08329737faa285dcd6a523ebea3</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::RemoveSubscriptionInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>RemoveSubscriptionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>ae452d86db8512a424d3e314a98546600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoveSubscriptionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>a43db62659fdeb1066a9b1316e2310a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>af0dc9dbc5cecb1dddb047c84faf2f9dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>ab0f8395082b53bb9faa8144956e58e1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>a94a77784251a0709103c568152aafe52</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>a0e6d3515b3a07ea7c5aa11171c88d2a0</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>af4f90e929e5e5ec498dd861c814c7c4c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>a07955a4e937713e88fdf14007d9b1476</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_remove_subscription_info_marshaller.html</anchorfile>
      <anchor>a412d827b152051a7a2dff28fd7566d5e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ReplayCommandMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ReplayCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>ad1e7478066810d9685c0d5d6ccf2a333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReplayCommandMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>a229d387c8e7a4139e13bf95da35dfcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>aaa85f43ae331228cf4968c1abb2c29b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>a4c56508c318ef3e592683bfbcc3f0a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>a2b3a96d1040abc0907dba144b6b6bacb</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>a8855183b0a5ce3906dc74b0f58064fff</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>a9a5eca66b883cd3cbb7bdef07156fe07</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>abe013ba2be7e6ac2ad2a71a74795787f</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_replay_command_marshaller.html</anchorfile>
      <anchor>a816584e783b35b15399b011e3268d24d</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ResponseMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>aa5787168eb4c7ae77e1017819fcd742f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResponseMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>a46fe0f8811f6b0a8f255de903f3878f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>a5aae13badbf5cf2fba07792c8466a5ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>ac42c18a8468750bb505094a016e7c3b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>aa9419ac6724e5d5a779350663f2d1fac</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>a699f2f096dfde5cc209bca27a3bd6665</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>a603ea1c4094a0125d47cd187b7cffbb6</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>a15fc0a76ac839b56688eafb5ea41fd01</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_response_marshaller.html</anchorfile>
      <anchor>a740af886e788fb3c238912b3dda6c01b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::SessionIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>SessionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a57feaad8770799eac781a06dd1833dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a67bdd2b54c7cb05cff0b5af7ced9a11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a0774ba7f2bc01dee926cf0c275085160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>aa16a2e3a8ecff2956df73b404af4538d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a3b6605d1767a7ed1537f3fb52f30dae0</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a5fb738e62c6e666e415fc30123332ef2</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a05fa70825a581ce008fc4626239331af</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a2b1143b6bda7961d8b8008e56b6a2347</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_id_marshaller.html</anchorfile>
      <anchor>a7cd212ad529240161cda2c7d447a867b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::SessionInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>SessionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>a0ae853a32da2c8e7db24d8360f17c3fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>a47866e4fbebb9e297f6d5b7d1619b65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>a9a00bc992810f3217c531244820e2ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>a38b4a7040eae5e947621a5923567060b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>ac3543fad4d3f88f53692b7b7f1b96fff</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>ac5049fa93b5213bd6d042d6e2e9d7769</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>a1db6c5eb0ae9e261239847dfb993a39a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>a3cc64f107b5f2a6cb111d81271164cff</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_session_info_marshaller.html</anchorfile>
      <anchor>ae5c1bed293b88dd80406a2c17784ec09</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::ShutdownInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>ShutdownInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>abd52156dfd4470b74eb73ff7282ddc80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShutdownInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>ad9cd12f33753c6b15df0eafbf7908f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>acc47b6487420f86d96f7b3f0ad40f14b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>a8b1e86d4e8da7a209cff4eedd095755a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>a828a16daf1df2c850261279475446284</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>a0444bb7c76253850670d853544ee5180</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>a57b7e63f43e6c95a56319025527d5de8</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>af6e6b5d9479d1777fececf808a618c2a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_shutdown_info_marshaller.html</anchorfile>
      <anchor>a0e339a48229cbfaf80afd00c4e3920c7</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::SubscriptionInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>SubscriptionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>ab2ca5bfd49ef44baa3e36e7250fb0729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubscriptionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>a1b3e0c4837ede6524f45cf9fbcd3e3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>a116ec4bdb952ca5f37f0b42d937a5113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>ac1c5d19b0231f82d942c6303ef946b3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>a41175b3ec19cc7cad38adbd63d7a702b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>a5171bdcaaf84c8f0e7619697cb29e760</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>ac7c87b5266690c550c079285782cab5e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>a1c25e91c8c0f61877ae989111259c814</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_subscription_info_marshaller.html</anchorfile>
      <anchor>af0b37bfff5d3e08131c463b57514c63b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::TransactionIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>TransactionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>a0cb8531b88df733049b3397477d4a1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>aee5e1393923bef2e0691992444e3dd77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>ab8ee477d4da571511444197dad6ef9ab</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>a5f45e3a4c10d3163d3369149a7b268e1</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>acd01dfbd53cc391853c08f2e743b62cd</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>a4c01fc2ccba0e6e6f5843cc6e64fd68a</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_id_marshaller.html</anchorfile>
      <anchor>acfeb132983665a0a0c7a226a55b7aa64</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::TransactionInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::BaseCommandMarshaller</base>
    <member kind="function">
      <type></type>
      <name>TransactionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>abd4c57b4272712cd4dd46c6c51611040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>a21479b606be225b0083ebe3b4b52a37b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>ac82a42849488bbac8f349d1449013f7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>abbe8e5860e838510d2df109fc3fe049a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>aee78b0cd8bb06c22b70909d4eb7aaed5</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>ab0833d16752c74dbfcc47ea672e7dd37</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>ae52e8a8131dd93fef366c2e3fee0f18c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>a5a162ca3830607a1430c0e0fd4511c7e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_transaction_info_marshaller.html</anchorfile>
      <anchor>ae731f635d732bf6800cb7068392028b2</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::WireFormatInfoMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::BaseDataStreamMarshaller</base>
    <member kind="function">
      <type></type>
      <name>WireFormatInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>a9affeb8d34366e3d882ca7838ef526dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WireFormatInfoMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>acd3aeb067adf90844422a89fc43bfb1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>ad99bc3043d4936f1a17f10c081a896b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>a40eb03b8e4645866bfe001b246ca86ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>a4f352b1891fd1d5dd0d85fcfa66b564b</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>a0f263721f12e4e1f735f435f19f69cd3</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>a1afb8bffa9c6af3ae395165ae3a9da08</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>ac841f28c561c151438ea7bfe9c6ff822</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_wire_format_info_marshaller.html</anchorfile>
      <anchor>a82009be7a3c19e89e6e5ca2fd18f2463</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::marshal::generated::XATransactionIdMarshaller</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</filename>
    <base>activemq::wireformat::openwire::marshal::generated::TransactionIdMarshaller</base>
    <member kind="function">
      <type></type>
      <name>XATransactionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>ae21983170cd552ce38dbdd890799513d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XATransactionIdMarshaller</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>a1d55e41f2d87b434ac2702cfb400e666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual commands::DataStructure *</type>
      <name>createObject</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>a8ecdccd65d26c149ef2eaa241eb48b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getDataStructureType</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>a896cb5b3101aea5c1fe76a0b7eb64df0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>a3844f4431bd49ec3bc91b9f8195f56fb</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>tightMarshal1</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>aebd9800d8317db1aa483bd6e7df0cc02</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tightMarshal2</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>af3ee11330fbd12abd07bdb7b18bd852e</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut, utils::BooleanStream *bs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseUnmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>aef06020d948940da9f2dfd5cc47289f9</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>looseMarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1marshal_1_1generated_1_1_x_a_transaction_id_marshaller.html</anchorfile>
      <anchor>a086446b585fa5d3bf9f594778398fe8c</anchor>
      <arglist>(OpenWireFormat *wireFormat, commands::DataStructure *dataStructure, decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::wireformat::openwire::utils</name>
    <filename>namespaceactivemq_1_1wireformat_1_1openwire_1_1utils.html</filename>
    <class kind="class">activemq::wireformat::openwire::utils::BooleanStream</class>
    <class kind="class">activemq::wireformat::openwire::utils::HexTable</class>
    <class kind="class">activemq::wireformat::openwire::utils::MessagePropertyInterceptor</class>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::utils::BooleanStream</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</filename>
    <member kind="function">
      <type></type>
      <name>BooleanStream</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>a89db8a14a87f92626943069ded8cab87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BooleanStream</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>a51ad82799ac096acc861135e98203170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBoolean</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>a07dbebc44f4808d60c124738286a0195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBoolean</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>a0552ff61615fe5a1168879a5449a406b</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>aa49fbe2b06c85158a668dd63dc3dc72e</anchor>
      <arglist>(decaf::io::DataOutputStream *dataOut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>af14c1287ed5a6be6358175b1892c3a63</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;dataOut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>a60826195fdd6e4f252f6eb3fc46aa329</anchor>
      <arglist>(decaf::io::DataInputStream *dataIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>a0389ea8707a256b8e936dc93e60bb5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>marshalledSize</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_boolean_stream.html</anchorfile>
      <anchor>ad9af395b7f413b2c6260e47f5344646f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::utils::HexTable</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_hex_table.html</filename>
    <member kind="function">
      <type></type>
      <name>HexTable</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_hex_table.html</anchorfile>
      <anchor>a802211988a5d98d2113202faf6a44730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HexTable</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_hex_table.html</anchorfile>
      <anchor>a06a0829536e890dffeee4b11e909cfba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>operator[]</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_hex_table.html</anchorfile>
      <anchor>a40672620fc0cbd35af2127ab87b3a063</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>operator[]</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_hex_table.html</anchorfile>
      <anchor>ab8380933a23ac9ec2c70b882e13e8992</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_hex_table.html</anchorfile>
      <anchor>a4d5f86f4543641f418a7db85fc109f1f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::openwire::utils::MessagePropertyInterceptor</name>
    <filename>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</filename>
    <member kind="function">
      <type></type>
      <name>MessagePropertyInterceptor</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a7f8bde663cf50338ad8b35dfdb55bee5</anchor>
      <arglist>(commands::Message *message, util::PrimitiveMap *properties)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessagePropertyInterceptor</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>af7c109335a5842f5e978e3d5d71dfc58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBooleanProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a5bf99e5221fba30d581f6099ef921c9f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getByteProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a26053658b8c3011028120f62daaff049</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>aa9030ac68cfcec57955fc86cf61a69ad</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a8956932677add16d66ed5a38164fbe83</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>acf29689341871567f781e7cb3ee0140a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLongProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a619b99dce3d8c91b9624c9a51aa245ce</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShortProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a2dfaa395847e762d7f2193fd31a1f5da</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStringProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a08347a7464f68f65261c25613b59ac41</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBooleanProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>aecdda31bd125cb31a45e49ff288342ff</anchor>
      <arglist>(const std::string &amp;name, bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>ae52177b06f8a7b4e5fada164b6c997d4</anchor>
      <arglist>(const std::string &amp;name, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a5d36cd8280f5eff83c0482bf7c292550</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFloatProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a954b6d8a0722db13819dbb21c329ded0</anchor>
      <arglist>(const std::string &amp;name, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>aa084165299ed08f5b524a3a60ef6335f</anchor>
      <arglist>(const std::string &amp;name, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a43fa0193fa844ead25a6b4da9bcf9496</anchor>
      <arglist>(const std::string &amp;name, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setShortProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a4c16ed6df7543eca1249963edff20e8f</anchor>
      <arglist>(const std::string &amp;name, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1openwire_1_1utils_1_1_message_property_interceptor.html</anchorfile>
      <anchor>a6cf2307a1dd13251eed2f41500cee8c5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>activemq::wireformat::stomp</name>
    <filename>namespaceactivemq_1_1wireformat_1_1stomp.html</filename>
    <class kind="class">activemq::wireformat::stomp::StompCommandConstants</class>
    <class kind="class">activemq::wireformat::stomp::StompFrame</class>
    <class kind="class">activemq::wireformat::stomp::StompHelper</class>
    <class kind="class">activemq::wireformat::stomp::StompWireFormat</class>
    <class kind="class">activemq::wireformat::stomp::StompWireFormatFactory</class>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::stomp::StompCommandConstants</name>
    <filename>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>CONNECT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ac2ff7a993345a9c3d23a4a928e9d8ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>CONNECTED</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a48a31f00536f0ae8e97a0839cca5d892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>DISCONNECT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a095b1eaa4a4171382c89b098c8966a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>SUBSCRIBE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a327a8702d7eb4b496cca8990e80bfe20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>UNSUBSCRIBE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aae89bad9cbf16c94acdae9c72c3dddb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>MESSAGE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a986dbced4cd54a3124f7a653a751b8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>SEND</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a2267f8ab751762c350d1fe36a281b5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>BEGIN</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af866e5f13a0df6ec4fc2a03c582a2d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>COMMIT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aa28445cc8791230dd9c04fd54d4c4b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ABORT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aafc3c8bfb204a3875748d18a7b59b2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ACK</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a33d6fcaca3c39d88e9f152d4b641e100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ERROR_CMD</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aa253ff6e6c23999672f04301eb2226e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>RECEIPT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>abe309baaaa888179d89ea2ed5a216d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_DESTINATION</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af09a9b5a0bce2da1c2388dbb47bd5e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_TRANSACTIONID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a7f49fb720882ce1d5fe65d9fe8b1ed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_CONTENTLENGTH</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a63566daa68013d94fcc2f8c7f6c99026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_SESSIONID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af3ed90d4f5efd376f1298ad678b432fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_RECEIPT_REQUIRED</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aac2b71145713e618265b7306d2dd68cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_RECEIPTID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>abf75367632b6884d3495e124e1a3dd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_MESSAGEID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ab35e2f59314a630c2ddba1d1fb42a75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_ACK</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a4e77839c3b5db8264d878f3517e80a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_LOGIN</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a63854e9f5b2a420f952b1f97affa769c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_PASSWORD</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a7156d7e0e1d1ca60c61295496cc28333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_CLIENT_ID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a16a34cea0848dcc456ed0c53cc592048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_MESSAGE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a0b9c0a137b4ffd9a02298ace61300afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_CORRELATIONID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a7e4cc41871c47af5ac9b30d58803acfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_REQUESTID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ab1745c95cd05d928b12e38c6032d5e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_RESPONSEID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aadbf64a99cdf69efea100311fe5dbc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_EXPIRES</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af7de7f55e1a3fb7befd5679224a94d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_PERSISTENT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af5fa0c135df6ba9e35898f59fb02c0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_REPLYTO</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a767da2af897c85cdb40457bd176c3929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_TYPE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a36271a7bfd8cc7fb0f12f89f915b6338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_DISPATCH_ASYNC</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ad547b809f2a3fffce30270f4eb4040a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_EXCLUSIVE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>adb132d50e18d49383ccb1d8c46d31b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_MAXPENDINGMSGLIMIT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a6eda48702800b6a2e8553116b84be008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_NOLOCAL</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a081ecbaec9abca108c2b0f6f62aa2ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_PREFETCHSIZE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ae368d5d289f2a232c85a23554941c56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_JMSPRIORITY</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a6560a5aa602406b39e35375793e05b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_CONSUMERPRIORITY</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af3903fc542eb9271436cfa8e2a64e5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_RETROACTIVE</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ab6c485ff29d9b7c4bff99754547dd67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_SUBSCRIPTIONNAME</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a49461cf87cb3b9859415f948af6c5f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_OLDSUBSCRIPTIONNAME</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a4c418a9083bb824650e7e56b00cf2360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_TIMESTAMP</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ac8612b2ed90378d6b74761ac4631adf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_REDELIVERED</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a7c925195f8b1f023aaa977032b7011ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_REDELIVERYCOUNT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>aff5c1b774a5075922d8ad5efeb9fb6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_SELECTOR</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a99587632502b547c7c1420dcc87aebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_ID</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a1f81d6cf21e61188e9b225cfc1ce6281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_SUBSCRIPTION</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a4590ce3443b4221d0146febdcf065dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_TRANSFORMATION</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>af8901307c4bc0efb1f6ebb42ba8e14a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>HEADER_TRANSFORMATION_ERROR</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a62799b77dcc42e8d18fddc6f6db659d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ACK_CLIENT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>afc74c077dfaee4056eb1d2beed5aa7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ACK_AUTO</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a9cbe291272784159c1fa8a5607d1d0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>ACK_INDIVIDUAL</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a605750f7923dcc00fe122e907bd803b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>TEXT</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a6a07eec7691626e402d81d7210f3cd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>BYTES</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a82b93c986ccb44328359a4b1ceaef3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>QUEUE_PREFIX</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>ada8ed82e848c808170eb445121723787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>TOPIC_PREFIX</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a91d74f782cb8656c6e34a189e885928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>TEMPQUEUE_PREFIX</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a9f7a64888a560e8d4c3f4d8d6664df64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>TEMPTOPIC_PREFIX</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_command_constants.html</anchorfile>
      <anchor>a108eb21af45b32a1e5d82dbc302698d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::stomp::StompFrame</name>
    <filename>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>StompFrame</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a4fbc1f151b8e3fc75cdf03b003f7a11a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StompFrame</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>af46b827452c7a97c8db11afa3758a173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StompFrame *</type>
      <name>clone</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>aabc1388ff9626c545bba957fd2ea5436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a818fd1a5f4836953aef2402cd2254a40</anchor>
      <arglist>(const StompFrame *src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommand</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a2f9ef581664f5d1d262e0efd0cecb1e7</anchor>
      <arglist>(const std::string &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getCommand</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a54ef48d2d710e804537947a7c98a8730</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a2d0f720c8f179671158c05af0903c92e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a1e1d55e0a2df5db431e782ee010304c2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;fallback=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a267b182b5a85fd87bd3c324901907470</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProperty</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a1ca2013459c804b036fd0799847080bf</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>decaf::util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a621759df1b8b077f6ede71221e6e91b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const decaf::util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>aac1d9dbac36cbcbdcb838e5fd0650da8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getBody</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a7b7fb43d8e8dfdb8a412658a9a140efb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned char &gt; &amp;</type>
      <name>getBody</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>aeeaf115c50da24918faf1d83bbbcf096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBodyLength</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a19347fe053952c7d199f6d77a7931283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a5cf1d9d63106096be9a72fd38faab1cc</anchor>
      <arglist>(const unsigned char *bytes, std::size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toStream</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a4f24722d9bb84f9e9e661f712c3059e9</anchor>
      <arglist>(decaf::io::DataOutputStream *stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromStream</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_frame.html</anchorfile>
      <anchor>a5c6fb97d35d3476af1c1f33872d118b0</anchor>
      <arglist>(decaf::io::DataInputStream *stream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::stomp::StompHelper</name>
    <filename>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</filename>
    <member kind="function">
      <type></type>
      <name>StompHelper</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>afd795dded9a7fb009efea7a7d836b509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StompHelper</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>af79a2f97e0291dfeade1ca38d6e5c89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertProperties</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>ae6329a0ebbcbbbcc04c7896589ae19fe</anchor>
      <arglist>(const Pointer&lt; StompFrame &gt; &amp;frame, const Pointer&lt; Message &gt; &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertProperties</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a77e5acea00ed2251b5027900bbeba32c</anchor>
      <arglist>(const Pointer&lt; Message &gt; &amp;message, const Pointer&lt; StompFrame &gt; &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ActiveMQDestination &gt;</type>
      <name>convertDestination</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a0c86f698c76c94b0bfa30e35049b01b6</anchor>
      <arglist>(const std::string &amp;destination)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertDestination</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a38309a89f117e78e2f3cf8751dcdbf3c</anchor>
      <arglist>(const Pointer&lt; ActiveMQDestination &gt; &amp;destination)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertMessageId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a08f8688fbc52bd04772a8eca8226bf89</anchor>
      <arglist>(const Pointer&lt; MessageId &gt; &amp;messageId)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; MessageId &gt;</type>
      <name>convertMessageId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a7525e2c0e1a66676d1a340ccc2f83d5d</anchor>
      <arglist>(const std::string &amp;messageId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertConsumerId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a4e077c8a645242b79d0d1af52b204f38</anchor>
      <arglist>(const Pointer&lt; ConsumerId &gt; &amp;consumerId)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ConsumerId &gt;</type>
      <name>convertConsumerId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a16bf5d6fb879c4f84001ce6d750051dc</anchor>
      <arglist>(const std::string &amp;consumerId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertProducerId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a760f6cb5b5e90c1064c3931b4da31d50</anchor>
      <arglist>(const Pointer&lt; ProducerId &gt; &amp;producerId)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; ProducerId &gt;</type>
      <name>convertProducerId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>a861019a51c48375d63b416af49d7c2d0</anchor>
      <arglist>(const std::string &amp;producerId)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertTransactionId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>aad8d2647dd05a678cf59c8169c81fab5</anchor>
      <arglist>(const Pointer&lt; TransactionId &gt; &amp;transactionId)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TransactionId &gt;</type>
      <name>convertTransactionId</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_helper.html</anchorfile>
      <anchor>aa844acac6a13c7c0e910f49976fa2226</anchor>
      <arglist>(const std::string &amp;transactionId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::stomp::StompWireFormat</name>
    <filename>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</filename>
    <base>activemq::wireformat::WireFormat</base>
    <member kind="function">
      <type></type>
      <name>StompWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>a9d06b4036cf782c9fa63d2ec16fca16f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StompWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>a0ffca38bbff0e1868fbbd9674b16d50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>marshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>ae21b1ed317a69818624c974d3c9124fa</anchor>
      <arglist>(const Pointer&lt; commands::Command &gt; &amp;command, const activemq::transport::Transport *transport, decaf::io::DataOutputStream *out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; commands::Command &gt;</type>
      <name>unmarshal</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>a4eb5a9b860450cbdcc88f91d77a67951</anchor>
      <arglist>(const activemq::transport::Transport *transport, decaf::io::DataInputStream *in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVersion</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>af395f62e4637a383be98f1a0440c74cb</anchor>
      <arglist>(int version AMQCPP_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>a7231cef602203f77e36c44e2a3cb23f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inReceive</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>a7ccf33b22275046293bcf1cfacfc8556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>ab155755473c3b4448736480a338b11bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; transport::Transport &gt;</type>
      <name>createNegotiator</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format.html</anchorfile>
      <anchor>a0edab73130fa88aa8543cdcc6a7d8796</anchor>
      <arglist>(const Pointer&lt; transport::Transport &gt; &amp;transport)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>activemq::wireformat::stomp::StompWireFormatFactory</name>
    <filename>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format_factory.html</filename>
    <base>activemq::wireformat::WireFormatFactory</base>
    <member kind="function">
      <type></type>
      <name>StompWireFormatFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format_factory.html</anchorfile>
      <anchor>a29a7cec5bb3f02a743bf9e12939088da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StompWireFormatFactory</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format_factory.html</anchorfile>
      <anchor>aed79e470c7818c30eb40ae8b44ca41c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; WireFormat &gt;</type>
      <name>createWireFormat</name>
      <anchorfile>classactivemq_1_1wireformat_1_1stomp_1_1_stomp_wire_format_factory.html</anchorfile>
      <anchor>ae828b71585401631388cc51804032881</anchor>
      <arglist>(const decaf::util::Properties &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cms</name>
    <filename>namespacecms.html</filename>
    <class kind="class">cms::BytesMessage</class>
    <class kind="class">cms::Closeable</class>
    <class kind="class">cms::CMSException</class>
    <class kind="class">cms::CMSProperties</class>
    <class kind="class">cms::CMSSecurityException</class>
    <class kind="class">cms::Connection</class>
    <class kind="class">cms::ConnectionFactory</class>
    <class kind="class">cms::ConnectionMetaData</class>
    <class kind="class">cms::DeliveryMode</class>
    <class kind="class">cms::Destination</class>
    <class kind="class">cms::ExceptionListener</class>
    <class kind="class">cms::IllegalStateException</class>
    <class kind="class">cms::InvalidClientIdException</class>
    <class kind="class">cms::InvalidDestinationException</class>
    <class kind="class">cms::InvalidSelectorException</class>
    <class kind="class">cms::MapMessage</class>
    <class kind="class">cms::Message</class>
    <class kind="class">cms::MessageConsumer</class>
    <class kind="class">cms::MessageEnumeration</class>
    <class kind="class">cms::MessageEOFException</class>
    <class kind="class">cms::MessageFormatException</class>
    <class kind="class">cms::MessageListener</class>
    <class kind="class">cms::MessageNotReadableException</class>
    <class kind="class">cms::MessageNotWriteableException</class>
    <class kind="class">cms::MessageProducer</class>
    <class kind="class">cms::ObjectMessage</class>
    <class kind="class">cms::Queue</class>
    <class kind="class">cms::QueueBrowser</class>
    <class kind="class">cms::Session</class>
    <class kind="class">cms::Startable</class>
    <class kind="class">cms::Stoppable</class>
    <class kind="class">cms::StreamMessage</class>
    <class kind="class">cms::TemporaryQueue</class>
    <class kind="class">cms::TemporaryTopic</class>
    <class kind="class">cms::TextMessage</class>
    <class kind="class">cms::Topic</class>
    <class kind="class">cms::TransactionInProgressException</class>
    <class kind="class">cms::TransactionRolledBackException</class>
    <class kind="class">cms::UnsupportedOperationException</class>
    <class kind="class">cms::XAConnection</class>
    <class kind="class">cms::XAConnectionFactory</class>
    <class kind="class">cms::XAException</class>
    <class kind="class">cms::XAResource</class>
    <class kind="class">cms::XASession</class>
    <class kind="class">cms::Xid</class>
  </compound>
  <compound kind="class">
    <name>cms::BytesMessage</name>
    <filename>classcms_1_1_bytes_message.html</filename>
    <base>cms::Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BytesMessage</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>adf6f3d1ee1aca37ef367ddc1aed312fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBodyBytes</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>aa1efea60a777d943272f01aac84ac948</anchor>
      <arglist>(const unsigned char *buffer, int numBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char *</type>
      <name>getBodyBytes</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>adf4cf12e5f608dd5e60fa160427760e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBodyLength</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>ac9d43912ed9b5ce91228294fa5c7e958</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a9230a1efb169af23e7eff13652c2f558</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readBoolean</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a01499b69fcd7d1a8c6ca844822d154ba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBoolean</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>ac721ce4de15053702a01ae82885b1503</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>readByte</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a7d649bacd58f9ca7638c656d7328c4e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a73f6c85df062acbb9f03d0be901a8137</anchor>
      <arglist>(unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a906e19036f6c4852bf00b82330e98934</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>aedfdaf9a742f1fb7f44e4441d89b2d86</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a200a6c5d7e40ebeb7773fc8c5d25158c</anchor>
      <arglist>(unsigned char *buffer, int length) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a79fd4e08f5725540ee01cb0e5a73d50e</anchor>
      <arglist>(const unsigned char *value, int offset, int length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>readChar</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a74d25cd840a3d1f19a088be496eee58c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeChar</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a8de731e18814d61fffc36ccbe648fb68</anchor>
      <arglist>(char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a00e50778c519b8588cd5e160dc5cfff2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a83ddaa72d739e32003d5d4476b106517</anchor>
      <arglist>(float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a0367faf8fee9c3853657e6545c5bdaae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a0e4db2d4834cbfe6449cfd759d0f7099</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>aca09a8b910d4b9b2ae16a6be8abcf0b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a0cef4cfefcfd46f7821e179441e62274</anchor>
      <arglist>(short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned short</type>
      <name>readUnsignedShort</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>ab2108de9e869fbaa6836918afcbdf53d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>aa41e74935242073ff190596d13255256</anchor>
      <arglist>(unsigned short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>ab6bf5f995f0740de37e0ce710d3fb93c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a8de92537983945bead4394ecca728d45</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>readLong</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a1e401450e35a725fcb9eeb1dbe18aabe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeLong</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>aca747f242a2e5814453d21190261f246</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>readString</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>ac6c91de22a08b08c09943c67f430c2b2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>acb90c8ab210d1b49f8de9d6fe78e789c</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>readUTF</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a8a6999f56a42dafea2c7baf6e51c0f26</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeUTF</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a5c30c722519a4472539a088b23dcf999</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BytesMessage *</type>
      <name>clone</name>
      <anchorfile>classcms_1_1_bytes_message.html</anchorfile>
      <anchor>a09e52d232e00f6a5f34f11f037f4c77b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Closeable</name>
    <filename>classcms_1_1_closeable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Closeable</name>
      <anchorfile>classcms_1_1_closeable.html</anchorfile>
      <anchor>afde5b702946c942aa45e697e7e8872ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classcms_1_1_closeable.html</anchorfile>
      <anchor>a7780c263c5dbacaab5226e9c7343b778</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::CMSException</name>
    <filename>classcms_1_1_c_m_s_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>CMSException</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a3bc943dfe9a498128ec36e144d9171b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSException</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>adb8ae795fc6dc974da1c346f2ce184a3</anchor>
      <arglist>(const CMSException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSException</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a6446e73575ca83ff6ae627f14af7e70d</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSException</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>abd33c4e001aa08f5705427171651da58</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSException</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a54d50f6b73d9b2461958164313f8deb1</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CMSException</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a474fba2a2bd9c682ed8705f40fc3e0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMessage</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a6bd8f6089376583750dbcb77a65b8fe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::exception *</type>
      <name>getCause</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a73002326520fc220cc366975f7c13a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::pair&lt; std::string, int &gt; &gt;</type>
      <name>getStackTrace</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a654b82cf0001f0082981648d02790ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMark</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a7643819e29c9d6fce5531e7380712cf6</anchor>
      <arglist>(const char *file, const int lineNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printStackTrace</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>abfc35411fbb2d5fdeca229bac7861f39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printStackTrace</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a9ba4563f474714f25be1edad847c12dc</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStackTraceString</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>a319f91d1d457671665ea23620a03d42c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcms_1_1_c_m_s_exception.html</anchorfile>
      <anchor>abc2a9b467f04a26d4a1322e00ad2229b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::CMSProperties</name>
    <filename>classcms_1_1_c_m_s_properties.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CMSProperties</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a3a23d997da236f50f762b6c61f208d5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a91b9022256780ef284282b747c4186d3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>affaca180b6fbb0fc25036c376f8f0896</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a72ebfa0554e38ca06ba4e1967fbb1505</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getProperty</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a5c15a43673373f22afc5d892ebd6f1f2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;defaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setProperty</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>ab4664771fda7edf52c053ab4a4abd87a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasProperty</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a170847a276519e1df8e94113bf9b420b</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>remove</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a897ccad920c3cfdbc9c8e66237961f75</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>propertyNames</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a637aa43b3c961f20d4473c5e3203ca09</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>toArray</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>af002c0509b84a86430f4fec78336a740</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a03a8d68e1f37af697d8dbfc9d05e2b83</anchor>
      <arglist>(const CMSProperties *source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CMSProperties *</type>
      <name>clone</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>ac587a83f2f8e628881ffe835b75545e2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a9181576f92bd5107b38b6bd569de193a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classcms_1_1_c_m_s_properties.html</anchorfile>
      <anchor>a1c54de7a27994dae3440b82af033e7cd</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::CMSSecurityException</name>
    <filename>classcms_1_1_c_m_s_security_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>CMSSecurityException</name>
      <anchorfile>classcms_1_1_c_m_s_security_exception.html</anchorfile>
      <anchor>ad210b6d99464a547d99ad38156d1753a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSSecurityException</name>
      <anchorfile>classcms_1_1_c_m_s_security_exception.html</anchorfile>
      <anchor>a8aac3d66170054bd8a4e5509995a212e</anchor>
      <arglist>(const CMSSecurityException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSSecurityException</name>
      <anchorfile>classcms_1_1_c_m_s_security_exception.html</anchorfile>
      <anchor>a2438d434cddc6b4a7b4d1946b9c89ad9</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSSecurityException</name>
      <anchorfile>classcms_1_1_c_m_s_security_exception.html</anchorfile>
      <anchor>acdb345a1b96467829e7f421c9a11d01b</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CMSSecurityException</name>
      <anchorfile>classcms_1_1_c_m_s_security_exception.html</anchorfile>
      <anchor>a5c2a62dcf37b33ac4f044d1f7d3d7b84</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CMSSecurityException</name>
      <anchorfile>classcms_1_1_c_m_s_security_exception.html</anchorfile>
      <anchor>af0fe079b15d6597f25f7b1f17a336c0a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Connection</name>
    <filename>classcms_1_1_connection.html</filename>
    <base>cms::Startable</base>
    <base>cms::Stoppable</base>
    <base>cms::Closeable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Connection</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>a91dbbe184df4ebc78091788d7ace4562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>a0350ba08f42f9f90f7662b47a90d753c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ConnectionMetaData *</type>
      <name>getMetaData</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>aa3c7abb2b37ae5f2c5339c2ad8103b80</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Session *</type>
      <name>createSession</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>aacd3bff8cfc7aaa6a117afac8d225209</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Session *</type>
      <name>createSession</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>a34e4ee09142e4f79ddd365a345e56661</anchor>
      <arglist>(Session::AcknowledgeMode ackMode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClientID</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>a52378ac4fbe35df331a3bcf5071146ce</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setClientID</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>a1b5d17ce18474353314d70921689b718</anchor>
      <arglist>(const std::string &amp;clientID)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ExceptionListener *</type>
      <name>getExceptionListener</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>a004a7dc66f114ec7fdda8dadcb206deb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setExceptionListener</name>
      <anchorfile>classcms_1_1_connection.html</anchorfile>
      <anchor>adfe5ecc913687ce0fa1453730b3fc5bb</anchor>
      <arglist>(ExceptionListener *listener)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::ConnectionFactory</name>
    <filename>classcms_1_1_connection_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionFactory</name>
      <anchorfile>classcms_1_1_connection_factory.html</anchorfile>
      <anchor>a7542c26690783c9b9bf54d02d3e8eb47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Connection *</type>
      <name>createConnection</name>
      <anchorfile>classcms_1_1_connection_factory.html</anchorfile>
      <anchor>a1bedd693ce8d373fd9c3692d0bb0add4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classcms_1_1_connection_factory.html</anchorfile>
      <anchor>aa319f06079e2b43441bde453a9fe6770</anchor>
      <arglist>(const std::string &amp;username, const std::string &amp;password)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Connection *</type>
      <name>createConnection</name>
      <anchorfile>classcms_1_1_connection_factory.html</anchorfile>
      <anchor>aff59ded6edfef72395e773339d488221</anchor>
      <arglist>(const std::string &amp;username, const std::string &amp;password, const std::string &amp;clientId)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConnectionFactory *</type>
      <name>createCMSConnectionFactory</name>
      <anchorfile>classcms_1_1_connection_factory.html</anchorfile>
      <anchor>aee5e9464e6899ba6de0ec4a0d1201d6f</anchor>
      <arglist>(const std::string &amp;brokerURI)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::ConnectionMetaData</name>
    <filename>classcms_1_1_connection_meta_data.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionMetaData</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>a0de85a6597bdc24ee0a6494a4dd6e9e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getCMSVersion</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>af69d7d7fad7bcdba2d1eadf21ceb90d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCMSMajorVersion</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>ad6433027252414d2c3c9dba4ddc2c40c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCMSMinorVersion</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>aed236e7741c518091f7da14f0a7f61f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getCMSProviderName</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>a0df0f858f9d4ef06b0f060301c3bb193</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getProviderVersion</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>a93f1953017280667abc4b1120971d2bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProviderMajorVersion</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>a428c3ad42914ce97a00b5aa726fddbab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProviderMinorVersion</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>a4755ed4b01d04ccdb4add5dca83bb919</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getCMSXPropertyNames</name>
      <anchorfile>classcms_1_1_connection_meta_data.html</anchorfile>
      <anchor>add6417163c4973ab6c9b1ec5fcc5459d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::DeliveryMode</name>
    <filename>classcms_1_1_delivery_mode.html</filename>
    <member kind="enumeration">
      <name>DELIVERY_MODE</name>
      <anchorfile>classcms_1_1_delivery_mode.html</anchorfile>
      <anchor>a77535a87bf2bb730a38272fa056e1a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERSISTENT</name>
      <anchorfile>classcms_1_1_delivery_mode.html</anchorfile>
      <anchor>a77535a87bf2bb730a38272fa056e1a60a649c6d31baac10336e540fa4ec5e29a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NON_PERSISTENT</name>
      <anchorfile>classcms_1_1_delivery_mode.html</anchorfile>
      <anchor>a77535a87bf2bb730a38272fa056e1a60abdc3fb454176548d84305a78c932336e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeliveryMode</name>
      <anchorfile>classcms_1_1_delivery_mode.html</anchorfile>
      <anchor>ab62b3f94d665def8b81af6aa54bab9db</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Destination</name>
    <filename>classcms_1_1_destination.html</filename>
    <member kind="enumeration">
      <name>DestinationType</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a1e302dd4e947a6c6ec6c4353ee2d40fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOPIC</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a1e302dd4e947a6c6ec6c4353ee2d40fca9694f931ca2c0c55dc946fd8da55c3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUEUE</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a1e302dd4e947a6c6ec6c4353ee2d40fcaee6c558d6feafc84fccb91eb9e8678b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY_TOPIC</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a1e302dd4e947a6c6ec6c4353ee2d40fca27d91815c1a7ae8d58bf5cc3532a1adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY_QUEUE</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a1e302dd4e947a6c6ec6c4353ee2d40fcad98d0d50f9595a3e52eb079f47dee0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Destination</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>ab2b069f817ea8caa5ac7922696c745b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DestinationType</type>
      <name>getDestinationType</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a12f195f92b8be4d5af7cd220116f8201</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Destination *</type>
      <name>clone</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a3ee228f31f300c3b0eb2d0cb9dc527d5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>af9084254bb2fb190aa4d7b6f765d82c4</anchor>
      <arglist>(const cms::Destination &amp;source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>a8dcb498d58c51a55714a8f79edc9a4b8</anchor>
      <arglist>(const cms::Destination &amp;other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const CMSProperties &amp;</type>
      <name>getCMSProperties</name>
      <anchorfile>classcms_1_1_destination.html</anchorfile>
      <anchor>ac35546efc00c69b97b772993ffc6b88f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::ExceptionListener</name>
    <filename>classcms_1_1_exception_listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExceptionListener</name>
      <anchorfile>classcms_1_1_exception_listener.html</anchorfile>
      <anchor>a6a1b140f67e8529403d7c4fa30fa715b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onException</name>
      <anchorfile>classcms_1_1_exception_listener.html</anchorfile>
      <anchor>a08730aaccc4c5a59f1bfb7def9fa52de</anchor>
      <arglist>(const cms::CMSException &amp;ex)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::IllegalStateException</name>
    <filename>classcms_1_1_illegal_state_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classcms_1_1_illegal_state_exception.html</anchorfile>
      <anchor>aebfccfc780800c2e8526297485398dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classcms_1_1_illegal_state_exception.html</anchorfile>
      <anchor>add50dd2d0b9d86aeae309c5f7da3cfa6</anchor>
      <arglist>(const IllegalStateException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classcms_1_1_illegal_state_exception.html</anchorfile>
      <anchor>ae74dd963259aec3f20eb3e7342e895c2</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classcms_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a3016a148c0c23a3add0d4ebc649691f9</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classcms_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a880284496bc52889f30cd0fde260ac06</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IllegalStateException</name>
      <anchorfile>classcms_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a60520a0fa3d98cd3cdae51ed0ff21fa4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::InvalidClientIdException</name>
    <filename>classcms_1_1_invalid_client_id_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>InvalidClientIdException</name>
      <anchorfile>classcms_1_1_invalid_client_id_exception.html</anchorfile>
      <anchor>a4d432e5754658cfd354551c179484f0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidClientIdException</name>
      <anchorfile>classcms_1_1_invalid_client_id_exception.html</anchorfile>
      <anchor>a93cbf3cc6c36056f9ba999f9c6a9f740</anchor>
      <arglist>(const InvalidClientIdException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidClientIdException</name>
      <anchorfile>classcms_1_1_invalid_client_id_exception.html</anchorfile>
      <anchor>a213d307d71f32e5565aeb829d55db40f</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidClientIdException</name>
      <anchorfile>classcms_1_1_invalid_client_id_exception.html</anchorfile>
      <anchor>a0144f5bf9c350b59e965b90906cfcab0</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidClientIdException</name>
      <anchorfile>classcms_1_1_invalid_client_id_exception.html</anchorfile>
      <anchor>a68b93514c553befb196a6bcd1bbf68d9</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvalidClientIdException</name>
      <anchorfile>classcms_1_1_invalid_client_id_exception.html</anchorfile>
      <anchor>a12dc564437ef2034b8132617fa0c953c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::InvalidDestinationException</name>
    <filename>classcms_1_1_invalid_destination_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>InvalidDestinationException</name>
      <anchorfile>classcms_1_1_invalid_destination_exception.html</anchorfile>
      <anchor>af9673fcb093dcac1b60b13448785d5c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidDestinationException</name>
      <anchorfile>classcms_1_1_invalid_destination_exception.html</anchorfile>
      <anchor>a1fcc1c8ff174cf2df513b5202481dd2b</anchor>
      <arglist>(const InvalidDestinationException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidDestinationException</name>
      <anchorfile>classcms_1_1_invalid_destination_exception.html</anchorfile>
      <anchor>a5f4ca507b4096a2c11d1c76267823ea5</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidDestinationException</name>
      <anchorfile>classcms_1_1_invalid_destination_exception.html</anchorfile>
      <anchor>a7eecfa9e40dee0a271ca5e2d3f0c2823</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidDestinationException</name>
      <anchorfile>classcms_1_1_invalid_destination_exception.html</anchorfile>
      <anchor>ab4632aee76373ea6d105dd8bd5d43a57</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvalidDestinationException</name>
      <anchorfile>classcms_1_1_invalid_destination_exception.html</anchorfile>
      <anchor>afac22d52f96547754fc824af5f98173c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::InvalidSelectorException</name>
    <filename>classcms_1_1_invalid_selector_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>InvalidSelectorException</name>
      <anchorfile>classcms_1_1_invalid_selector_exception.html</anchorfile>
      <anchor>a3cfd1ea7a85273473db21f6c16ba8cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidSelectorException</name>
      <anchorfile>classcms_1_1_invalid_selector_exception.html</anchorfile>
      <anchor>adce022cf135e265d94ff000e947e5068</anchor>
      <arglist>(const InvalidSelectorException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidSelectorException</name>
      <anchorfile>classcms_1_1_invalid_selector_exception.html</anchorfile>
      <anchor>aa03452dceb16a67a2393aa779bde9b12</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidSelectorException</name>
      <anchorfile>classcms_1_1_invalid_selector_exception.html</anchorfile>
      <anchor>ad99714eb3c5d10100bd24674324a9724</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidSelectorException</name>
      <anchorfile>classcms_1_1_invalid_selector_exception.html</anchorfile>
      <anchor>a058a6ddf4ce4ad745b1d0fc83d4f97ed</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvalidSelectorException</name>
      <anchorfile>classcms_1_1_invalid_selector_exception.html</anchorfile>
      <anchor>a9ada8c18a11f7f6107870abf20726cdf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MapMessage</name>
    <filename>classcms_1_1_map_message.html</filename>
    <base>cms::Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MapMessage</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a6642a5594c97b049e6422390f87e048f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a9284a9e7b184317136ce5d944057abba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getMapNames</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a08fd81cfffd46a114e29c3875018df4c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>itemExists</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a37d31fa244cb29e07039b2a5be8085b5</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getBoolean</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>aa20ffc12477f41a1471a5b21284dcbb3</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBoolean</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a0d600be3f3d18b60a9470e58ffa73e54</anchor>
      <arglist>(const std::string &amp;name, bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getByte</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a50f0111931445aa4dfb139f8aa38c8be</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setByte</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a3942e286f5ae3a5bc0f39e673d731bf8</anchor>
      <arglist>(const std::string &amp;name, unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; unsigned char &gt;</type>
      <name>getBytes</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a578edf5f4a313f5ecf7a761b061b4de2</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBytes</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a0c5f5e6843f62bff2c5cc961c6aded61</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; unsigned char &gt; &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a7a864529fbaf720f28282ed8ad5ca7ef</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setChar</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>ae6f1df83443e2e31c488fe60a3d8e88b</anchor>
      <arglist>(const std::string &amp;name, char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a2deafa26fe286b056ac127571e48b99d</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDouble</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>abfa9aca113c9bc42db424834a243fe96</anchor>
      <arglist>(const std::string &amp;name, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a56d5997f310241d5eb35e0e15674e86b</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFloat</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a65602041fb569187599e4ed00ec048fd</anchor>
      <arglist>(const std::string &amp;name, float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a9ed18911bdac09878654c239c1dd09ed</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInt</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a95ccf65d13c8b5edc1923678086260aa</anchor>
      <arglist>(const std::string &amp;name, int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a0db7c14396ce7ee7d38509772095242b</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLong</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a9e8588f6a074cca6fc7995118c8ecfb0</anchor>
      <arglist>(const std::string &amp;name, long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a4fe3f17ff520c2490b89b22d21dd2514</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setShort</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a964169479168b9ff4ebbba097fd186d1</anchor>
      <arglist>(const std::string &amp;name, short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getString</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a329602050614f86c4fa6fdf7ff0d0a28</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setString</name>
      <anchorfile>classcms_1_1_map_message.html</anchorfile>
      <anchor>a5f4e721b9148250e6334433238eeed3b</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Message</name>
    <filename>classcms_1_1_message.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Message</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a9c0b1d1d14583c4c5a3a3d109853c2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Message *</type>
      <name>clone</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a27e056dffbf536d18928d848dca82953</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>acknowledge</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a2e3242a68fd7d2ffc3f9c2924a654263</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearBody</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a04e4f73af7a3c5569a3625662c68d431</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearProperties</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a8fcededee152c7ce85c91e80cdecf6c2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getPropertyNames</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>ac4fa3d9eb25239800724a0de367aa1f9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>propertyExists</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a9f10723fd869bda2289fdd288e5cc544</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getBooleanProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a73e131cd0ebb3b2f619e2bc9cccd3756</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getByteProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a154bd6379307169b5b3520f03fd6b974</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDoubleProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>ae4d049a3136795bacdd8a6f68bd32970</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFloatProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a4ed7ec55a9979500f9015f29eadba69b</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getIntProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>afae12148d6bd76d81a00bf6e1fb6ab4a</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getLongProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>abcdfd69b07d299531158d8c5ce65ccce</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>getShortProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a5102ee69808ed58fcdd9c8abd2762d64</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getStringProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a5c74eccc1da96f9b622a3bbf0cebe030</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBooleanProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>abb342e872f856261ca0647d5493393f3</anchor>
      <arglist>(const std::string &amp;name, bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setByteProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>ae82027f68c632639bb344d50b0cfe5bf</anchor>
      <arglist>(const std::string &amp;name, unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDoubleProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>af1aac7ff1532f24e3c3a421fdeab0b0b</anchor>
      <arglist>(const std::string &amp;name, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFloatProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a2bcccc6a7cde980a653ea606f1c5158b</anchor>
      <arglist>(const std::string &amp;name, float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIntProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a261453f2144748e3cb0c4f89df4f9d80</anchor>
      <arglist>(const std::string &amp;name, int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLongProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>abf099908a66a68b4057f232d1db8afaf</anchor>
      <arglist>(const std::string &amp;name, long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setShortProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a5eaafd753fc6153c54545100858a3de8</anchor>
      <arglist>(const std::string &amp;name, short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStringProperty</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a644f94bd530b95d8d686eb0ac39ae5a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getCMSCorrelationID</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>af479bb7387d214a3515f7b42e5b89872</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSCorrelationID</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a20c029b487305892be99a01c661a1529</anchor>
      <arglist>(const std::string &amp;correlationId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCMSDeliveryMode</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a9cd8975195186401467b1558f65f2237</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSDeliveryMode</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>add15f00872857c5421bdd2fc69319ed8</anchor>
      <arglist>(int mode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Destination *</type>
      <name>getCMSDestination</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a61b1a335c155fc010d8bca7a8298fc47</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSDestination</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a5b52ab2cc0c275907f307a6ce2b5f80d</anchor>
      <arglist>(const Destination *destination)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getCMSExpiration</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>aeb49096478c90d814101e628c1cf2149</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSExpiration</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a0b7fa3b6a178088f3d825079aaa8757a</anchor>
      <arglist>(long long expireTime)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getCMSMessageID</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a9c1abf38cb96e53cd1f3a25d453a08d1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSMessageID</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a27bac8e87618ce18d10acb02f97cebda</anchor>
      <arglist>(const std::string &amp;id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCMSPriority</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a63cec0bd85387c781bc1088fdd8e5984</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSPriority</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a7b1a99d25df1c7e3833a65ed5603bee4</anchor>
      <arglist>(int priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getCMSRedelivered</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a71402f73e6e1de88819f978bf7fde383</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSRedelivered</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a71c59a1124b205bbb61007b2286d9c7f</anchor>
      <arglist>(bool redelivered)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const cms::Destination *</type>
      <name>getCMSReplyTo</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a2a9102bf73f20bd661fca2a8e8f9fd50</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSReplyTo</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a752d21b6ed922f77c1f8939177684226</anchor>
      <arglist>(const cms::Destination *destination)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getCMSTimestamp</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a9cc0dddd5c888b58884cf474a26c4ed9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSTimestamp</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a6303add3ec9a9990d06b6fe7e9aecec1</anchor>
      <arglist>(long long timeStamp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getCMSType</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>ac36c6ddaf42cdda9ffc6beeaf98a16ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCMSType</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>add46aa85e4d42c9069c4c6cdc8b2156c</anchor>
      <arglist>(const std::string &amp;type)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEFAULT_DELIVERY_MODE</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a292929132d1b6be9852eb35cc58cdde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEFAULT_MSG_PRIORITY</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a897957f1ca60a9f00866a0f1d294a8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>DEFAULT_TIME_TO_LIVE</name>
      <anchorfile>classcms_1_1_message.html</anchorfile>
      <anchor>a3190df6a95a408ef392e0d11aa213dba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageConsumer</name>
    <filename>classcms_1_1_message_consumer.html</filename>
    <base>cms::Closeable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageConsumer</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>a0225880155f3f5394d3e2b66e36605d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Message *</type>
      <name>receive</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>aa9d6e92af7bed15fd34be9ea6a112fa2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Message *</type>
      <name>receive</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>aabeac07739217f9545e4fb9f37bee8b9</anchor>
      <arglist>(int millisecs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Message *</type>
      <name>receiveNoWait</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>a5c9647012d2bc88eb82b047f97c385c8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMessageListener</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>a7707800d2fcf156f5e196d437dd95a6c</anchor>
      <arglist>(MessageListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MessageListener *</type>
      <name>getMessageListener</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>ad609df96f36137858da7a5e7af6c4d3d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getMessageSelector</name>
      <anchorfile>classcms_1_1_message_consumer.html</anchorfile>
      <anchor>ab2caf649299f2a67c22e0199ccb1bfdf</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageEnumeration</name>
    <filename>classcms_1_1_message_enumeration.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageEnumeration</name>
      <anchorfile>classcms_1_1_message_enumeration.html</anchorfile>
      <anchor>a840228253b9857657d9505496ba7c183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasMoreMessages</name>
      <anchorfile>classcms_1_1_message_enumeration.html</anchorfile>
      <anchor>a45940dd7c8c11fd142f787e509b4c765</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::Message *</type>
      <name>nextMessage</name>
      <anchorfile>classcms_1_1_message_enumeration.html</anchorfile>
      <anchor>a7ea3c70de55792890b1135d3684ca044</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageEOFException</name>
    <filename>classcms_1_1_message_e_o_f_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>MessageEOFException</name>
      <anchorfile>classcms_1_1_message_e_o_f_exception.html</anchorfile>
      <anchor>aa7071d437df64fdba73a76fb77114854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageEOFException</name>
      <anchorfile>classcms_1_1_message_e_o_f_exception.html</anchorfile>
      <anchor>a90ff70bea2ba61af091e6863c7e5d98b</anchor>
      <arglist>(const MessageEOFException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageEOFException</name>
      <anchorfile>classcms_1_1_message_e_o_f_exception.html</anchorfile>
      <anchor>a75aa2f2b8779489612650cbf8be5b758</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageEOFException</name>
      <anchorfile>classcms_1_1_message_e_o_f_exception.html</anchorfile>
      <anchor>a75cdbb7faec5356aee7d941e6903b0c8</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageEOFException</name>
      <anchorfile>classcms_1_1_message_e_o_f_exception.html</anchorfile>
      <anchor>a650084da7584a82cc1c35e6d85538cdb</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageEOFException</name>
      <anchorfile>classcms_1_1_message_e_o_f_exception.html</anchorfile>
      <anchor>a65144cc03f6c1f008071d4c2faccfa54</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageFormatException</name>
    <filename>classcms_1_1_message_format_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>MessageFormatException</name>
      <anchorfile>classcms_1_1_message_format_exception.html</anchorfile>
      <anchor>aa7f77e20731b9191e9b37f87da5e793a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormatException</name>
      <anchorfile>classcms_1_1_message_format_exception.html</anchorfile>
      <anchor>a969ff170ee85ad52454e40fd651ac5cf</anchor>
      <arglist>(const MessageFormatException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormatException</name>
      <anchorfile>classcms_1_1_message_format_exception.html</anchorfile>
      <anchor>a3dd3db63e2cb5a4d1697c94fff2253cb</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormatException</name>
      <anchorfile>classcms_1_1_message_format_exception.html</anchorfile>
      <anchor>a1931dec5debd409379ea9e743f7a3140</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormatException</name>
      <anchorfile>classcms_1_1_message_format_exception.html</anchorfile>
      <anchor>a2d97d477c60323ad22f7b33f71e5beda</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageFormatException</name>
      <anchorfile>classcms_1_1_message_format_exception.html</anchorfile>
      <anchor>a4c3abf548e76161e0b880e9e0168813c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageListener</name>
    <filename>classcms_1_1_message_listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageListener</name>
      <anchorfile>classcms_1_1_message_listener.html</anchorfile>
      <anchor>ae2a2529c8270b171fdd1002cc9862fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onMessage</name>
      <anchorfile>classcms_1_1_message_listener.html</anchorfile>
      <anchor>ae7169fac530611ae1527397d01b37327</anchor>
      <arglist>(const Message *message)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageNotReadableException</name>
    <filename>classcms_1_1_message_not_readable_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>MessageNotReadableException</name>
      <anchorfile>classcms_1_1_message_not_readable_exception.html</anchorfile>
      <anchor>a697280380c59242b7dab40d7c7bbfa8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotReadableException</name>
      <anchorfile>classcms_1_1_message_not_readable_exception.html</anchorfile>
      <anchor>afd6244fb3c442773917c47ac2888f4f4</anchor>
      <arglist>(const MessageNotReadableException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotReadableException</name>
      <anchorfile>classcms_1_1_message_not_readable_exception.html</anchorfile>
      <anchor>afc2d28883b8eff3e7b1c4747942d4e1d</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotReadableException</name>
      <anchorfile>classcms_1_1_message_not_readable_exception.html</anchorfile>
      <anchor>a344c5c9a56a666d37411329f752b774a</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotReadableException</name>
      <anchorfile>classcms_1_1_message_not_readable_exception.html</anchorfile>
      <anchor>aa157f7179a4e15e55a54a55103a1da7f</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageNotReadableException</name>
      <anchorfile>classcms_1_1_message_not_readable_exception.html</anchorfile>
      <anchor>ad755734f4e8158cee888b160cdd49e15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageNotWriteableException</name>
    <filename>classcms_1_1_message_not_writeable_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>MessageNotWriteableException</name>
      <anchorfile>classcms_1_1_message_not_writeable_exception.html</anchorfile>
      <anchor>ae08d7d6af35d3a3e737a502c809d9b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotWriteableException</name>
      <anchorfile>classcms_1_1_message_not_writeable_exception.html</anchorfile>
      <anchor>a47a05ea28c6f1ea25d2451ce7ebea434</anchor>
      <arglist>(const MessageNotWriteableException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotWriteableException</name>
      <anchorfile>classcms_1_1_message_not_writeable_exception.html</anchorfile>
      <anchor>af032d104149ae70c28b8768259254746</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotWriteableException</name>
      <anchorfile>classcms_1_1_message_not_writeable_exception.html</anchorfile>
      <anchor>a1728d21a1eab2b2975894b4a92658542</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNotWriteableException</name>
      <anchorfile>classcms_1_1_message_not_writeable_exception.html</anchorfile>
      <anchor>a32cb5b173d6f23f7c08f198c03497097</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageNotWriteableException</name>
      <anchorfile>classcms_1_1_message_not_writeable_exception.html</anchorfile>
      <anchor>a9f0360a6e499a32d02fab8523d17990e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::MessageProducer</name>
    <filename>classcms_1_1_message_producer.html</filename>
    <base>cms::Closeable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageProducer</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a9a6f8b91f372ba65a7aa5594392fb1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a64c4f1e81c86ece6ae402376ffd92230</anchor>
      <arglist>(Message *message)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>ac60e04438d132a77ad4b4102eda20fc3</anchor>
      <arglist>(Message *message, int deliveryMode, int priority, long long timeToLive)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a4ec5402ed14367771ed62a1295f13d6e</anchor>
      <arglist>(const Destination *destination, Message *message)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a4856c44098509ecb757b1bd4e12a9c8e</anchor>
      <arglist>(const Destination *destination, Message *message, int deliveryMode, int priority, long long timeToLive)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDeliveryMode</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a9afed1db93ab603f109c90848012269a</anchor>
      <arglist>(int mode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDeliveryMode</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>ae6ccfe75569bd15e4cfb41f6e4f41a7f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDisableMessageID</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a26f400e35124ebf966b5f024490e724d</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getDisableMessageID</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>ac5b6653874bc9d7ef0fe194d892ca0cf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDisableMessageTimeStamp</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a88db2aa1035ca0a03bdbaeaa8da2fc47</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getDisableMessageTimeStamp</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>ab068ec07a1817c43c9c132d804966db8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPriority</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a68b7cc09ab655d6473ad74940f35c4e8</anchor>
      <arglist>(int priority)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getPriority</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a3c37790bd0e8c4f1bb7053dc0b2b5614</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTimeToLive</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a66d44d56bc747961eded36468d3c005c</anchor>
      <arglist>(long long time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getTimeToLive</name>
      <anchorfile>classcms_1_1_message_producer.html</anchorfile>
      <anchor>a55b7f2bb64ec4b8acdd828c5dd9befcc</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::ObjectMessage</name>
    <filename>classcms_1_1_object_message.html</filename>
    <base>cms::Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectMessage</name>
      <anchorfile>classcms_1_1_object_message.html</anchorfile>
      <anchor>a17d550fbc35849dcad397ac0e6727183</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Queue</name>
    <filename>classcms_1_1_queue.html</filename>
    <base>cms::Destination</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Queue</name>
      <anchorfile>classcms_1_1_queue.html</anchorfile>
      <anchor>a614380d06be6384dad9cef8d75d116c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getQueueName</name>
      <anchorfile>classcms_1_1_queue.html</anchorfile>
      <anchor>ac8493852ba6f564436ea1b7478b12375</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::QueueBrowser</name>
    <filename>classcms_1_1_queue_browser.html</filename>
    <base>cms::Closeable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QueueBrowser</name>
      <anchorfile>classcms_1_1_queue_browser.html</anchorfile>
      <anchor>a86dac6b8583bbefde8e7ef7e711519bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Queue *</type>
      <name>getQueue</name>
      <anchorfile>classcms_1_1_queue_browser.html</anchorfile>
      <anchor>addc7edc65adf3506f6a6a647bc94a7dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getMessageSelector</name>
      <anchorfile>classcms_1_1_queue_browser.html</anchorfile>
      <anchor>a143e45480df282268d8a5cd9a2bf6925</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cms::MessageEnumeration *</type>
      <name>getEnumeration</name>
      <anchorfile>classcms_1_1_queue_browser.html</anchorfile>
      <anchor>ace610a8ff3235b9209e45a3c6464cf50</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Session</name>
    <filename>classcms_1_1_session.html</filename>
    <base>cms::Closeable</base>
    <member kind="enumeration">
      <name>AcknowledgeMode</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae2fd7b8b76928b465727760c78522185</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTO_ACKNOWLEDGE</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae2fd7b8b76928b465727760c78522185a7b7e3a3f19b48d7a48f5b1ce0396bf74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUPS_OK_ACKNOWLEDGE</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae2fd7b8b76928b465727760c78522185a7ebcc0a26bfeaeb0b2f89fb6ef868d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLIENT_ACKNOWLEDGE</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae2fd7b8b76928b465727760c78522185aad6c98099a50a183bc9817c9480a4429</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SESSION_TRANSACTED</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae2fd7b8b76928b465727760c78522185a17a19a271db0053d22939cc8d187b349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDIVIDUAL_ACKNOWLEDGE</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae2fd7b8b76928b465727760c78522185a27fe5fbbf75ca610fdcaaa6b0a0ba6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Session</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ae0fbde72a65fba5ef1781b2e8ad051c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ac7e43cd77c8250e75da9b92a0e5e9ef0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a625a500d10a2a4421c4c1541674aef64</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a25767cf0d85fa20c6639fd70b0301afa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recover</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a64c3419771c38b86aaea85fc7be5ae95</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a42e6391ec5738e2d5ed523d493ccdcb7</anchor>
      <arglist>(const Destination *destination)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a1a342184f514d4bdafd153380e206cce</anchor>
      <arglist>(const Destination *destination, const std::string &amp;selector)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MessageConsumer *</type>
      <name>createConsumer</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>af9f33e820aa8e06dc9d7e6c77f80e1a9</anchor>
      <arglist>(const Destination *destination, const std::string &amp;selector, bool noLocal)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MessageConsumer *</type>
      <name>createDurableConsumer</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ad6569edb337efe44ff487105442055be</anchor>
      <arglist>(const Topic *destination, const std::string &amp;name, const std::string &amp;selector, bool noLocal=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MessageProducer *</type>
      <name>createProducer</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a724667acd027967edf16952623baa7e0</anchor>
      <arglist>(const Destination *destination=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual QueueBrowser *</type>
      <name>createBrowser</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a9934882565018d0d3506719b9b95a120</anchor>
      <arglist>(const cms::Queue *queue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual QueueBrowser *</type>
      <name>createBrowser</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ab88aa7fc210258c11c6c4e5f94a2ce0f</anchor>
      <arglist>(const cms::Queue *queue, const std::string &amp;selector)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Queue *</type>
      <name>createQueue</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ac4b49b86efe152da816f913a9adc8ef4</anchor>
      <arglist>(const std::string &amp;queueName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Topic *</type>
      <name>createTopic</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a2046d8340225e38af2b0931dae0b9b58</anchor>
      <arglist>(const std::string &amp;topicName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TemporaryQueue *</type>
      <name>createTemporaryQueue</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a083663cee372ae4bd7554e7c8dbf518a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TemporaryTopic *</type>
      <name>createTemporaryTopic</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>aba682bb11582785968b7c772e99eed22</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Message *</type>
      <name>createMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a9e5ec4c52d8e38ccf9de2c56a2f599af</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BytesMessage *</type>
      <name>createBytesMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ad6dcc324a92d5772423d28d77dcefa48</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BytesMessage *</type>
      <name>createBytesMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a2ef22c91df610826398a749da532e730</anchor>
      <arglist>(const unsigned char *bytes, int bytesSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StreamMessage *</type>
      <name>createStreamMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>ad1114ecfe5c88b7df802beb4f7b6875b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TextMessage *</type>
      <name>createTextMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>aeaa0ab1e454d8bf93f866e4511b2c931</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TextMessage *</type>
      <name>createTextMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a9d9b16fef1140f5c781f5ca5096525dd</anchor>
      <arglist>(const std::string &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MapMessage *</type>
      <name>createMapMessage</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a0cd95c8a62d8ca09793d67370b130085</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AcknowledgeMode</type>
      <name>getAcknowledgeMode</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a373e7f70db09a28346ca01d8bd440f79</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransacted</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a4a08ab1ee5077808a9213b221b805b3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classcms_1_1_session.html</anchorfile>
      <anchor>a9802c106d3598044f3d775e673294926</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Startable</name>
    <filename>classcms_1_1_startable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Startable</name>
      <anchorfile>classcms_1_1_startable.html</anchorfile>
      <anchor>ae03f518728b99c8731c1c6c966b6b503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcms_1_1_startable.html</anchorfile>
      <anchor>ad40903c18cca87ceee9aa5ae176ac811</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Stoppable</name>
    <filename>classcms_1_1_stoppable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Stoppable</name>
      <anchorfile>classcms_1_1_stoppable.html</anchorfile>
      <anchor>ae691c53be711eb0e5ee7718044925ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcms_1_1_stoppable.html</anchorfile>
      <anchor>a3ac01c725ee82734189e9f82d5b076d3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::StreamMessage</name>
    <filename>classcms_1_1_stream_message.html</filename>
    <base>cms::Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StreamMessage</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a84610f9ac6d6066cd58b3d68426c680d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readBoolean</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a9af2ef2537f25f068d8ca3ffce297a42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBoolean</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ab5a5b54a669e7b84626e99567de1b4e0</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>readByte</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a8450e79960c0cf57e131d92202c46e97</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a73c39296fb78d99278ccead3c034820d</anchor>
      <arglist>(unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ad76f163f9ffc04e5c00e11ab87db57a8</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a20b32d976e0c1c113412c8d0af092491</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readBytes</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>aed9cafb756a316199fc73b1a9cdcb7e3</anchor>
      <arglist>(unsigned char *buffer, int length) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a868d9ba8c822bfcd9fb3e518e6a5c711</anchor>
      <arglist>(const unsigned char *value, int offset, int length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>readChar</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a8488c07ae4276209704adfc6533505e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeChar</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a78f63571c30489a3b452c4e2ca6a2f89</anchor>
      <arglist>(char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ac6e7d337daf2472aaedca72ebe84522d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ae599ee795e79758cd0ca72768897d0f0</anchor>
      <arglist>(float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a339dcfb6a496ddd6a53880a95fce5deb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a881e5accf8fd97fb6a6f94958ea24bff</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a9edbf66d6f8c65e290b5b64d9a96199f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a1a483b56438068b50b901f6c72ad9a37</anchor>
      <arglist>(short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned short</type>
      <name>readUnsignedShort</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>af1a95ca7150361e861128bbe5fe74305</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ad707b0e76ffd914820a99bdea9a0f411</anchor>
      <arglist>(unsigned short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a76a007b378aae6d85508dbe955be3a2e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ae734ee6d926b8920ee25ec8735babd96</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>readLong</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a600e85a2b69134ce48be1c385fc096b8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeLong</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a6314e6598f454c4ddb3351ce4f87915f</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>readString</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>ab502828f458c4ef116897c453a8c4d49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classcms_1_1_stream_message.html</anchorfile>
      <anchor>a9e12bd8657c7ed046ce3c3a164ed03fd</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::TemporaryQueue</name>
    <filename>classcms_1_1_temporary_queue.html</filename>
    <base>cms::Destination</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TemporaryQueue</name>
      <anchorfile>classcms_1_1_temporary_queue.html</anchorfile>
      <anchor>a8f43d7996897926e91c98109879f8b01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getQueueName</name>
      <anchorfile>classcms_1_1_temporary_queue.html</anchorfile>
      <anchor>a3ebc0a3a21f1b2dde5327ccd510189c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classcms_1_1_temporary_queue.html</anchorfile>
      <anchor>a2b75d2baaa7fde0539233a9eab85a2fd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::TemporaryTopic</name>
    <filename>classcms_1_1_temporary_topic.html</filename>
    <base>cms::Destination</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TemporaryTopic</name>
      <anchorfile>classcms_1_1_temporary_topic.html</anchorfile>
      <anchor>a128d7c5da25ebb9ca73fb2216b64218b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getTopicName</name>
      <anchorfile>classcms_1_1_temporary_topic.html</anchorfile>
      <anchor>a039aa64335193923253c720b7ba548a6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classcms_1_1_temporary_topic.html</anchorfile>
      <anchor>ac3593d2e2e603455a2325d759b53dae8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::TextMessage</name>
    <filename>classcms_1_1_text_message.html</filename>
    <base>cms::Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextMessage</name>
      <anchorfile>classcms_1_1_text_message.html</anchorfile>
      <anchor>a4667376a65e2052327d594a140607b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getText</name>
      <anchorfile>classcms_1_1_text_message.html</anchorfile>
      <anchor>a501fa5c279426419f6e7ea4d7323b4ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classcms_1_1_text_message.html</anchorfile>
      <anchor>af7f7bd7904a74eb896a33021c6e3b365</anchor>
      <arglist>(const char *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classcms_1_1_text_message.html</anchorfile>
      <anchor>aae3b47e70ebdffa485cf4e291bcf751c</anchor>
      <arglist>(const std::string &amp;msg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Topic</name>
    <filename>classcms_1_1_topic.html</filename>
    <base>cms::Destination</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Topic</name>
      <anchorfile>classcms_1_1_topic.html</anchorfile>
      <anchor>a452cb2bb664c51d1eb66c558f19d804f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getTopicName</name>
      <anchorfile>classcms_1_1_topic.html</anchorfile>
      <anchor>a048fb49ccefc52aaba299a31aa188e29</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::TransactionInProgressException</name>
    <filename>classcms_1_1_transaction_in_progress_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>TransactionInProgressException</name>
      <anchorfile>classcms_1_1_transaction_in_progress_exception.html</anchorfile>
      <anchor>a2a788c5f7cec8d9d38c6c8d030b86287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionInProgressException</name>
      <anchorfile>classcms_1_1_transaction_in_progress_exception.html</anchorfile>
      <anchor>a45ba349ec380696cf23dbaf839eb258b</anchor>
      <arglist>(const TransactionInProgressException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionInProgressException</name>
      <anchorfile>classcms_1_1_transaction_in_progress_exception.html</anchorfile>
      <anchor>a93635e1c76cea5182abc841fd30d98ba</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionInProgressException</name>
      <anchorfile>classcms_1_1_transaction_in_progress_exception.html</anchorfile>
      <anchor>a37bddd35c16fb0c4a28a501d8cb5c630</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionInProgressException</name>
      <anchorfile>classcms_1_1_transaction_in_progress_exception.html</anchorfile>
      <anchor>a8739714a1a33ff2a0a2f242858326c1e</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionInProgressException</name>
      <anchorfile>classcms_1_1_transaction_in_progress_exception.html</anchorfile>
      <anchor>a5e41cb90443136f89d855b4cfeff35eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::TransactionRolledBackException</name>
    <filename>classcms_1_1_transaction_rolled_back_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>TransactionRolledBackException</name>
      <anchorfile>classcms_1_1_transaction_rolled_back_exception.html</anchorfile>
      <anchor>a3fe68d5257f1eed9cafc56ec398d1bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionRolledBackException</name>
      <anchorfile>classcms_1_1_transaction_rolled_back_exception.html</anchorfile>
      <anchor>abdd2249151ee8f68713ba08b97b658b4</anchor>
      <arglist>(const TransactionRolledBackException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionRolledBackException</name>
      <anchorfile>classcms_1_1_transaction_rolled_back_exception.html</anchorfile>
      <anchor>ac8193777f247452d806a7627c33d5f7d</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionRolledBackException</name>
      <anchorfile>classcms_1_1_transaction_rolled_back_exception.html</anchorfile>
      <anchor>a89d59f9aa1278d905571402de6a21255</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransactionRolledBackException</name>
      <anchorfile>classcms_1_1_transaction_rolled_back_exception.html</anchorfile>
      <anchor>ae78c9e4def830be05cdef060b4e18b91</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransactionRolledBackException</name>
      <anchorfile>classcms_1_1_transaction_rolled_back_exception.html</anchorfile>
      <anchor>ab6d5a0959e0355717f69b211a529ed20</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::UnsupportedOperationException</name>
    <filename>classcms_1_1_unsupported_operation_exception.html</filename>
    <base>cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classcms_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>ae5d94658d29f34df5f6adacb93be8741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classcms_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>a7ed70479e28ff841d17c8048153048a5</anchor>
      <arglist>(const UnsupportedOperationException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classcms_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>aa28fb4a3ecdfc91116c7216d760dcde1</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classcms_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>a2f94f5dc39e108537a5510452d30e93f</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classcms_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>abe30273912d540b792acb665fd6edd94</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnsupportedOperationException</name>
      <anchorfile>classcms_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>aa50311994af4e026f30b0cf0d68fe34b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::XAConnection</name>
    <filename>classcms_1_1_x_a_connection.html</filename>
    <base virtualness="virtual">cms::Connection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XAConnection</name>
      <anchorfile>classcms_1_1_x_a_connection.html</anchorfile>
      <anchor>a46a2c5dad2f4d32409468c9abf3f41a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual XASession *</type>
      <name>createXASession</name>
      <anchorfile>classcms_1_1_x_a_connection.html</anchorfile>
      <anchor>ad0c5e9ad3f0a88289e8a4dc8020c6d31</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::XAConnectionFactory</name>
    <filename>classcms_1_1_x_a_connection_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XAConnectionFactory</name>
      <anchorfile>classcms_1_1_x_a_connection_factory.html</anchorfile>
      <anchor>a0dff0517ecf510885db585c2b124d54e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual XAConnection *</type>
      <name>createXAConnection</name>
      <anchorfile>classcms_1_1_x_a_connection_factory.html</anchorfile>
      <anchor>a60a75bdce8c364764d4ecd6aec89d20f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual XAConnection *</type>
      <name>createXAConnection</name>
      <anchorfile>classcms_1_1_x_a_connection_factory.html</anchorfile>
      <anchor>a66c70cf426ae870471e5199e5c0d33ba</anchor>
      <arglist>(const std::string &amp;userName, const std::string &amp;password)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XAConnectionFactory *</type>
      <name>createCMSXAConnectionFactory</name>
      <anchorfile>classcms_1_1_x_a_connection_factory.html</anchorfile>
      <anchor>abeadd732d4baed2916ae0da7f6bb017d</anchor>
      <arglist>(const std::string &amp;brokerURI)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::XAException</name>
    <filename>classcms_1_1_x_a_exception.html</filename>
    <base protection="private">cms::CMSException</base>
    <member kind="function">
      <type></type>
      <name>XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a59c6ea0aae2421e1365e1e36d9947250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a2c37e6ca61719c20200969216caa909b</anchor>
      <arglist>(int errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a90e7fd50af7b3b87d12276a3e7a482d6</anchor>
      <arglist>(const XAException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a9fb2185d20190f91d61a6e3c9a65232d</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>abf7b3841a5ceb8b12718f3d215f26b37</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>aa2a42a655e3769ba4ce58297ea26d916</anchor>
      <arglist>(const std::string &amp;message, const std::exception *cause, const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;stackTrace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XAException</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a376b5d2100256f29e350d034b81f80bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorCode</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a44622e836c61572896b78dc6fb731234</anchor>
      <arglist>(int errorCode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getErrorCode</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>afe8c4d9b3680349cacd08b919518dcad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBBASE</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a17eed4799c0896db50f01a7748877412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBROLLBACK</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a78ec1c4fca015b211ddd91ce147631d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBCOMMFAIL</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>ac4722cfa9cda8ab98df416f1ab5fb1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBDEADLOCK</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>ad22e000dee6ac2c6c30122c0a960aacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBINTEGRITY</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>ab30a2e83a0a03fbbfdf21fe67ce8b460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBOTHER</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a88d0b0ca8fbbcf594fc347b75656c3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBPROTO</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a4a9ae5c8bfb80b7b1946991b3b8b14b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBTIMEOUT</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a5e348f99c7662abfcba4a4f20d6f1643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBTRANSIENT</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a7e66243f95becf2e6c6b30ae0be41e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RBEND</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>ab3b095c49af1483896c48f27b1ebec6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_NOMIGRATE</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a6af7ed07f35c3b7080306b2bc1521d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_HEURHAZ</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a5c88176085f7566eee9ac2b81bae71e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_HEURCOM</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a4c0765a37250a44738e7803101c50b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_HEURRB</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a7b028908b8adcb13f605e097c5e88628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_HEURMIX</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a8d665cd105afe737837a548b1da906b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RETRY</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>adba1a72c26e46ed16662b233b5775d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RDONLY</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>ae76eb7e9c29fd2e5a9ebdb69e26fa5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_ASYNC</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a4a7d6543ddf34aed98a7e3f5ebbbb122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_RMERR</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a084b5affe91c8c4d20f0ee15a28b3c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_NOTA</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>abe7e87ec67e525882bef4d7ad4d0cce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_INVAL</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>aba4bcc93735a487239ef1df4e217131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_PROTO</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>aa9510354356a716a27a38cc4ecb403ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_RMFAIL</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a27eeaee0c0c50c3027b9e9fa2c8e22ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_DUPID</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a3271e558ea9e397db558068aeb337fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XAER_OUTSIDE</name>
      <anchorfile>classcms_1_1_x_a_exception.html</anchorfile>
      <anchor>a062bc5a05012729b4b8112d4ead3c9a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::XAResource</name>
    <filename>classcms_1_1_x_a_resource.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XAResource</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>ad6a1fcc9fa9b759653540a7f1ce05acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commit</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>ae52536f123d2eb3d2ad813f4a87cc877</anchor>
      <arglist>(const Xid *xid, bool onePhase)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a9dd11c9f2f0c66fc5978ee224b90c0b6</anchor>
      <arglist>(const Xid *xid, int flags)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forget</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>aed4a352da4e57b39237596465c846302</anchor>
      <arglist>(const Xid *xid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTransactionTimeout</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a97605ca8f12df606ce1354b7887811c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSameRM</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>ae277d9cdb092fefa979b9c73d312d0ab</anchor>
      <arglist>(const XAResource *theXAResource)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>prepare</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a3540a731b294cc2ea4bcc580072bd09f</anchor>
      <arglist>(const Xid *xid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>recover</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a03895d28f59daed8c9d2ffa937462378</anchor>
      <arglist>(int flag, Xid **recovered)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rollback</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a2e88cbccff7fa6a336806414c2daeb5a</anchor>
      <arglist>(const Xid *xid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setTransactionTimeout</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>ae0eaac2bc4fd3fb8c807f7bdeac8c2a6</anchor>
      <arglist>(int seconds)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a90850ed5d77e2f3f4c349888e847874c</anchor>
      <arglist>(const Xid *xid, int flags)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMENDRSCAN</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a4aa5b8d9bd2424e48076ddaea40ce274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMFAIL</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a92e94b3fa7bd8058738a1ca3e29468f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMJOIN</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a16f4402ee1138466a1505252650bb60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMNOFLAGS</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a8081b653382c3fe6d12535cf6ac72873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMONEPHASE</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>ad22c9b16915bdbf704c290ed24489851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMRESUME</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a541a68170f8bacaf38bea6773e4ae3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMSTARTRSCAN</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>af22d6de56e354ca8ce375ec416018fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMSUCCESS</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a32edce9fd105897b28cc4de27890f035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TMSUSPEND</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a10c05f2b7cfe650bdeef33248dffba32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_RDONLY</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a2d611f5d517e3ce692418e44f9e48a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>XA_OK</name>
      <anchorfile>classcms_1_1_x_a_resource.html</anchorfile>
      <anchor>a9d05280cd12f1bb19495cae6dd4aa721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::XASession</name>
    <filename>classcms_1_1_x_a_session.html</filename>
    <base virtualness="virtual">cms::Session</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XASession</name>
      <anchorfile>classcms_1_1_x_a_session.html</anchorfile>
      <anchor>a5f29e7c85208111f4330a9a091ef0a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual XAResource *</type>
      <name>getXAResource</name>
      <anchorfile>classcms_1_1_x_a_session.html</anchorfile>
      <anchor>a4e0759c7cece2b9fe612a5159d2d88ec</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cms::Xid</name>
    <filename>classcms_1_1_xid.html</filename>
    <member kind="function">
      <type></type>
      <name>Xid</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>ad99cf18830a3698580451689b5c9daca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Xid</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>aea3ecd8401be459f4065169419976a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Xid *</type>
      <name>clone</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>aee017620f5ea891325b9e529ac82d91b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>a68382bc48a0659056de8eb54ed6782e1</anchor>
      <arglist>(const Xid *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBranchQualifier</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>a980d26632707a9dbc8927c85048288b0</anchor>
      <arglist>(unsigned char *buffer, int size) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFormatId</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>a2f5a917d011d25171b177797b01ba3e0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getGlobalTransactionId</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>af0e8136540a30f6c97604348d4563efb</anchor>
      <arglist>(unsigned char *buffer, int size) const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXGTRIDSIZE</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>af227386bfed4fe31193ce67dadc9399d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXBQUALSIZE</name>
      <anchorfile>classcms_1_1_xid.html</anchorfile>
      <anchor>a469b4e43f40514d22fedb5f1f42621f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf</name>
    <filename>namespacedecaf.html</filename>
    <namespace>decaf::internal</namespace>
    <namespace>decaf::io</namespace>
    <namespace>decaf::lang</namespace>
    <namespace>decaf::net</namespace>
    <namespace>decaf::nio</namespace>
    <namespace>decaf::security</namespace>
    <namespace>decaf::util</namespace>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal</name>
    <filename>namespacedecaf_1_1internal.html</filename>
    <namespace>decaf::internal::io</namespace>
    <namespace>decaf::internal::net</namespace>
    <namespace>decaf::internal::nio</namespace>
    <namespace>decaf::internal::security</namespace>
    <namespace>decaf::internal::util</namespace>
    <class kind="class">decaf::internal::AprPool</class>
    <class kind="class">decaf::internal::DecafRuntime</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::AprPool</name>
    <filename>classdecaf_1_1internal_1_1_apr_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>AprPool</name>
      <anchorfile>classdecaf_1_1internal_1_1_apr_pool.html</anchorfile>
      <anchor>a30dbd1c6bfbe9f38b966617b9761f029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AprPool</name>
      <anchorfile>classdecaf_1_1internal_1_1_apr_pool.html</anchorfile>
      <anchor>a2da6fc2ffc50903b850ff125dd61a98a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_pool_t *</type>
      <name>getAprPool</name>
      <anchorfile>classdecaf_1_1internal_1_1_apr_pool.html</anchorfile>
      <anchor>ad0ebcfd1283a329e29c2b30c790ca1cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classdecaf_1_1internal_1_1_apr_pool.html</anchorfile>
      <anchor>a361ca496b8f1fda0390a675c3c8f7b77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static apr_pool_t *</type>
      <name>getGlobalPool</name>
      <anchorfile>classdecaf_1_1internal_1_1_apr_pool.html</anchorfile>
      <anchor>a7db1e2939c57a883201cf72320723967</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::DecafRuntime</name>
    <filename>classdecaf_1_1internal_1_1_decaf_runtime.html</filename>
    <base>decaf::lang::Runtime</base>
    <member kind="function">
      <type></type>
      <name>DecafRuntime</name>
      <anchorfile>classdecaf_1_1internal_1_1_decaf_runtime.html</anchorfile>
      <anchor>a7c6486b1fe7ce5088c218418c4b9e8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecafRuntime</name>
      <anchorfile>classdecaf_1_1internal_1_1_decaf_runtime.html</anchorfile>
      <anchor>a7a17727d3bd2bec7d5accbbdbbee3dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_pool_t *</type>
      <name>getGlobalPool</name>
      <anchorfile>classdecaf_1_1internal_1_1_decaf_runtime.html</anchorfile>
      <anchor>a66c3f14e273bacb0d39d87a4df706b08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>decaf::util::concurrent::Mutex *</type>
      <name>getGlobalLock</name>
      <anchorfile>classdecaf_1_1internal_1_1_decaf_runtime.html</anchorfile>
      <anchor>a6421a895f082100e9b2723b84bcaea08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::io</name>
    <filename>namespacedecaf_1_1internal_1_1io.html</filename>
    <class kind="class">decaf::internal::io::StandardErrorOutputStream</class>
    <class kind="class">decaf::internal::io::StandardInputStream</class>
    <class kind="class">decaf::internal::io::StandardOutputStream</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::io::StandardErrorOutputStream</name>
    <filename>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</filename>
    <base>decaf::io::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>StandardErrorOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</anchorfile>
      <anchor>a1123631ff987eb280c202bf192e1b742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardErrorOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</anchorfile>
      <anchor>ad7690c10b722cbe55304a72e809aab70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</anchorfile>
      <anchor>a8e9ddb397b23ceaf6c2210068571a065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</anchorfile>
      <anchor>ad900e2563517ba73a4944e2afa2e49ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</anchorfile>
      <anchor>a67bb88fbc5c6a6e0598a04e8be2d7906</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_error_output_stream.html</anchorfile>
      <anchor>ac02f05c63f447a6d83b46d7add78481c</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::io::StandardInputStream</name>
    <filename>classdecaf_1_1internal_1_1io_1_1_standard_input_stream.html</filename>
    <base>decaf::io::InputStream</base>
    <member kind="function">
      <type></type>
      <name>StandardInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_input_stream.html</anchorfile>
      <anchor>a2b105bef41d2850a233d4192e92d93a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_input_stream.html</anchorfile>
      <anchor>a53179fb6a7af8cd84c08db9fec65e4a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_input_stream.html</anchorfile>
      <anchor>aa651c4b093523de81ddb01d777e6c936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_input_stream.html</anchorfile>
      <anchor>af148402cabea22fbd5ccc6bf83bbe4c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::io::StandardOutputStream</name>
    <filename>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</filename>
    <base>decaf::io::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>StandardOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</anchorfile>
      <anchor>a0b92e9484ecf100afb51bf66580ab20b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</anchorfile>
      <anchor>a2e83b8599fd26b009057b637a051cd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</anchorfile>
      <anchor>a2157b39be20acf61d79265579d9cec39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</anchorfile>
      <anchor>a3ad51f97ead3be58972192a75139f3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</anchorfile>
      <anchor>a6da4f0276e2595c72a5fb59bcb5446da</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1internal_1_1io_1_1_standard_output_stream.html</anchorfile>
      <anchor>ab8bd35a7acc1582efd5a10d0554bc658</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::net</name>
    <filename>namespacedecaf_1_1internal_1_1net.html</filename>
    <namespace>decaf::internal::net::ssl</namespace>
    <namespace>decaf::internal::net::tcp</namespace>
    <class kind="class">decaf::internal::net::DefaultServerSocketFactory</class>
    <class kind="class">decaf::internal::net::DefaultSocketFactory</class>
    <class kind="class">decaf::internal::net::Network</class>
    <class kind="class">decaf::internal::net::SocketFileDescriptor</class>
    <class kind="class">decaf::internal::net::URIEncoderDecoder</class>
    <class kind="class">decaf::internal::net::URIHelper</class>
    <class kind="class">decaf::internal::net::URIType</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::DefaultServerSocketFactory</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</filename>
    <base>decaf::net::ServerSocketFactory</base>
    <member kind="function">
      <type></type>
      <name>DefaultServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</anchorfile>
      <anchor>a7a1dc1676f3530c88fd206d7e7cff933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</anchorfile>
      <anchor>ae5523cf3dc939d84c5020dcbc301d150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</anchorfile>
      <anchor>aa18303912c40a29febc20bfdc24f304c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</anchorfile>
      <anchor>a6063295fb1dda061687100c3b5a67bc0</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</anchorfile>
      <anchor>adee0b42143fb25107c4c65c7f72bcfe0</anchor>
      <arglist>(int port, int backlog)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_server_socket_factory.html</anchorfile>
      <anchor>a1b2c66b1e25db4d3e5fce3f50b29077a</anchor>
      <arglist>(int port, int backlog, const decaf::net::InetAddress *address)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::DefaultSocketFactory</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</filename>
    <base>decaf::net::SocketFactory</base>
    <member kind="function">
      <type></type>
      <name>DefaultSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>a40be1cb022b92448be38e27b8b61a396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>acf0796faac6243b21f9660f1a5a08b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>a5858fb22833d2403d77e9bd62bef32ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>a31c867aaf4f7c589a3ecf62e2c663c46</anchor>
      <arglist>(const decaf::net::InetAddress *host, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>a37bac785869274291ec740dbcc96e0f2</anchor>
      <arglist>(const decaf::net::InetAddress *host, int port, const decaf::net::InetAddress *ifAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>ad334e4a036b830e1e07ddddf13847abe</anchor>
      <arglist>(const std::string &amp;name, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_default_socket_factory.html</anchorfile>
      <anchor>a2883af24be82c2ab3f54cada733121f3</anchor>
      <arglist>(const std::string &amp;name, int port, const decaf::net::InetAddress *ifAddress, int localPort)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::Network</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_network.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Network</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a6f214bea452cb7a13e3eeaddc23cbcae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decaf::util::concurrent::Mutex *</type>
      <name>getRuntimeLock</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a93f99ecadb53605b83d22990a243603f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNetworkResource</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>ac1b874707814c17be8314c0d20bc84aa</anchor>
      <arglist>(decaf::internal::util::Resource *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAsResource</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a9f9ee48e29c8d0e16ca49b30d6c6b6f1</anchor>
      <arglist>(T *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShutdownTask</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a923b2a81e1647a2c766e23364b13930b</anchor>
      <arglist>(decaf::lang::Runnable *task)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Network *</type>
      <name>getNetworkRuntime</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a992a0903a76ed33c10158f56f954d098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeNetworking</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a2a9d461b2d6daf70717077c23212c18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdownNetworking</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>a41d070db80e5fe4343c49149325f41d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Network</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_network.html</anchorfile>
      <anchor>ae43f2fd282650fc339e1192870e21c62</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::SocketFileDescriptor</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_socket_file_descriptor.html</filename>
    <base>decaf::io::FileDescriptor</base>
    <member kind="function">
      <type></type>
      <name>SocketFileDescriptor</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_socket_file_descriptor.html</anchorfile>
      <anchor>acb0023d36975ad96da72f6710ed08b8b</anchor>
      <arglist>(long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketFileDescriptor</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_socket_file_descriptor.html</anchorfile>
      <anchor>a839b4077e260d4ae27dba93b076bbbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValue</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_socket_file_descriptor.html</anchorfile>
      <anchor>a3c93ff9c634d92869e22145fc8d14cde</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::URIEncoderDecoder</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</filename>
    <member kind="function">
      <type></type>
      <name>URIEncoderDecoder</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>a4381a14b13b9bb35d6d24a123938b282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URIEncoderDecoder</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>a70ecc60f1eeca6edeb10dfba38e6c4d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>validate</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>a55f9735b640782850c5f76039fe5c9b5</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;legal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>validateSimple</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>ac40b2c5ef2910a644170fe857da4d0dd</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;legal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>quoteIllegal</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>a282627187ade0856518df6798881cbb1</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;legal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>encodeOthers</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>ac89a4a6da994884a21d927e9c4257f1d</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>decode</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_encoder_decoder.html</anchorfile>
      <anchor>aab11b2fa81672c88ad0c9fa09869322a</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::URIHelper</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</filename>
    <member kind="function">
      <type></type>
      <name>URIHelper</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a90a1a7ca28572d6bb196f0df727d8c63</anchor>
      <arglist>(const std::string &amp;unreserved, const std::string &amp;punct, const std::string &amp;reserved, const std::string &amp;someLegal, const std::string &amp;allLegal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URIHelper</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a3adde0dca7312afa8249dc65b57be2c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URIHelper</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a6c09eb67a8f93d9cea9a506b1c741b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>URIType</type>
      <name>parseURI</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a57ae4dad49fd4f5f54b5ec882e5020bd</anchor>
      <arglist>(const std::string &amp;uri, bool forceServer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validateScheme</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a6014aeb3d050f1b322d442343d87dde3</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;scheme, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validateSsp</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a40f44660c42d166d0731484b89ff1647</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;ssp, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validateAuthority</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a095df71ea583bcf8635a8537988739b1</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;authority, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validatePath</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a08d9b97e4811c75a3eedd7e6621a04c9</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;path, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validateQuery</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>abcde7200345d6bd91dcaff9ddb6a6237</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;query, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validateFragment</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a49f20441435fb115210cdff062be72af</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;fragment, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>URIType</type>
      <name>parseAuthority</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>afd69f5eec9cc924411149cea8b5ac0a3</anchor>
      <arglist>(bool forceServer, const std::string &amp;authority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validateUserinfo</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a50ad85eb00f8118f1dda264e2b57b943</anchor>
      <arglist>(const std::string &amp;uri, const std::string &amp;userinfo, std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidHost</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>ae69a2f5c71ba35ae0e0a30a5c49a310f</anchor>
      <arglist>(bool forceServer, const std::string &amp;host)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidDomainName</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a2e5551e5b9a1360be5ff404e571c7110</anchor>
      <arglist>(const std::string &amp;host)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidIPv4Address</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a4984e1344d01c4b3b5adb6a4647d4eeb</anchor>
      <arglist>(const std::string &amp;host)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidIP6Address</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>ac72885843fce00f55fb5614b280eb791</anchor>
      <arglist>(const std::string &amp;ipAddress)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidIP4Word</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>a4db5d15b21e4f9656a1bda49f7dc9edc</anchor>
      <arglist>(const std::string &amp;word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidHexChar</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_helper.html</anchorfile>
      <anchor>aeaa366fa08ae16871df40a4457b91d62</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::URIType</name>
    <filename>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</filename>
    <member kind="function">
      <type></type>
      <name>URIType</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a5d999c55962eb6f9224312962a2abecf</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URIType</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a2413df177cd31296ef56fba2282e8351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URIType</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a6ffb52a77444c56ec5f1e22838e3fcf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSource</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>af4e011bbd4704cd5d89cf39b7c27ead7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a3ed99c2a957d81c83c396d44a2ad6f00</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getScheme</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>ad7f34fdd7ff4fa4eb3859415b2d8d6d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheme</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>ab9a48f5f52ff2876f4da3eec9a6b712f</anchor>
      <arglist>(const std::string &amp;scheme)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSchemeSpecificPart</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>ae017271d0f552afd62254de35d528de6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchemeSpecificPart</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a43db376b036508d65f439b10abd987ed</anchor>
      <arglist>(const std::string &amp;schemeSpecificPart)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAuthority</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a39174f384fad43d9c41f3acedbb3d460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAuthority</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>af6df87e18fe6adc4ecad3499f369102c</anchor>
      <arglist>(const std::string &amp;authority)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUserInfo</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a18d222e8ea10ce30cd453a5a457f4333</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserInfo</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a6c06e5ff8a8860a9b83ffcb2aaa1cb64</anchor>
      <arglist>(const std::string &amp;userinfo)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHost</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a7416c424f105dfb1eb805300676f6a63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHost</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a87ec979f41a660bb471b30d7beba1281</anchor>
      <arglist>(const std::string &amp;host)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a34d80b0b5172f4d3080258b2999971e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPort</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a275bd61656d80fcdf891bc1d511eedeb</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPath</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a5fd09786872ca6a9be715995e2704951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>afd355ca7ee0707665017eae970ebe12b</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getQuery</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a4fc87df10a1c0efab18aea221a5b19ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuery</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a5776ba3b69b4c99d03c4199b8a9155e1</anchor>
      <arglist>(const std::string &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFragment</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a48205f7a7b8c12fed8ceba402a9a2150</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFragment</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>ad5415782adb54363f1939d8e7073350a</anchor>
      <arglist>(const std::string &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a6a32532824f03150d02ea96528dc38ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpaque</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>af34c634d0f80f3afe483a3aa937600af</anchor>
      <arglist>(bool opaque)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAbsolute</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>aa259df965dc0e0b68be21951268a545a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsolute</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>ad9fd32db9b9767c7cdbfd0fea220a9cc</anchor>
      <arglist>(bool absolute)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isServerAuthority</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a9c6fbab085774ed94b24770eeab94991</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setServerAuthority</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a413fd505fb2f6867f9ea3111e73e7e6e</anchor>
      <arglist>(bool serverAuthority)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>ac0c0fc84415c88a9da2df4cb9682e726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValid</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1_u_r_i_type.html</anchorfile>
      <anchor>a784b540f5d98cddf8270e99090ddfa17</anchor>
      <arglist>(bool valid)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::net::ssl</name>
    <filename>namespacedecaf_1_1internal_1_1net_1_1ssl.html</filename>
    <namespace>decaf::internal::net::ssl::openssl</namespace>
    <class kind="class">decaf::internal::net::ssl::DefaultSSLContext</class>
    <class kind="class">decaf::internal::net::ssl::DefaultSSLServerSocketFactory</class>
    <class kind="class">decaf::internal::net::ssl::DefaultSSLSocketFactory</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::DefaultSSLContext</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_context.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultSSLContext</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_context.html</anchorfile>
      <anchor>a25117a4bd650ac9609eca83cd618d031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::net::ssl::SSLContext *</type>
      <name>getContext</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_context.html</anchorfile>
      <anchor>af48f85b65d57995b2fe67b0a1eb155a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DefaultSSLContext</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_context.html</anchorfile>
      <anchor>a045d65a486ff4ae8a05e70bdf677a9e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::DefaultSSLServerSocketFactory</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</filename>
    <base>decaf::net::ssl::SSLServerSocketFactory</base>
    <member kind="function">
      <type></type>
      <name>DefaultSSLServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>aa35317c7f23b9e7ae42debe6c8777d6d</anchor>
      <arglist>(const std::string &amp;errorMessage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultSSLServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>aef0daee15e999628f0795aa8af88a53e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a9e35cdcb21cb1f00a47417c408e596d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a19a991ba8a6f31ca706366ac4145097b</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a8c9d0f5f4666034a0321d66407f11b2d</anchor>
      <arglist>(int port, int backlog)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>adffa754cf6cea074f6abbc0eca456b6a</anchor>
      <arglist>(int port, int backlog, const decaf::net::InetAddress *address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getDefaultCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a329a2fa7dae37ff58621a5d733c1144b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>afc324c48dcb5dbcd96053a4e8456a0e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::DefaultSSLSocketFactory</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</filename>
    <base>decaf::net::ssl::SSLSocketFactory</base>
    <member kind="function">
      <type></type>
      <name>DefaultSSLSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>a7bc35833e359982b844437ce0a540a21</anchor>
      <arglist>(const std::string &amp;errorMessage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultSSLSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>aa69ac8441f4ba2fad75cc48c09629fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>a79626ec41dc78d214eb8720dcdb2a828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>a609e44de236c582ad7d6d7ce67626f0d</anchor>
      <arglist>(const decaf::net::InetAddress *host, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>a0b849c83fe43fd86b2ae6abbef9c1c62</anchor>
      <arglist>(const decaf::net::InetAddress *host, int port, const decaf::net::InetAddress *ifAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>a975f82c08e951aaf4bbeeeee77d8e66b</anchor>
      <arglist>(const std::string &amp;name, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>ae97b0ae7e6808201fc027b3ee136b72e</anchor>
      <arglist>(const std::string &amp;name, int port, const decaf::net::InetAddress *ifAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getDefaultCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>ad5fe5b35462ffadd324cd76d44600c74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>ae4d1b63729cc0c709a5cba355fe5a334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1_default_s_s_l_socket_factory.html</anchorfile>
      <anchor>a8faaf98fc6d5bbd3a9a7b8ccdfec8ceb</anchor>
      <arglist>(decaf::net::Socket *socket, std::string host, int port, bool autoClose)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::net::ssl::openssl</name>
    <filename>namespacedecaf_1_1internal_1_1net_1_1ssl_1_1openssl.html</filename>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLContextSpi</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLParameters</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLServerSocket</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLServerSocketFactory</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocket</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketException</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketFactory</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketInputStream</class>
    <class kind="class">decaf::internal::net::ssl::openssl::OpenSSLSocketOutputStream</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLContextSpi</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</filename>
    <base>decaf::net::ssl::SSLContextSpi</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLContextSpi</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>a1abe1b1b7469f4a53cbafa2cf55be39c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLContextSpi</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>a3e5397dfee56d1ec84662da31d9116d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>providerInit</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>a36311478722a184f6c379e6e67fd3747</anchor>
      <arglist>(security::SecureRandom *random)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::SocketFactory *</type>
      <name>providerGetSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>a43863cedc2fc1acedb06a66fd361ff92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocketFactory *</type>
      <name>providerGetServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>a494a1d886e40677e26f59c0e57ec7f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>abcb5a56a52d18c03429c699f30cd42de</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OpenSSLSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_context_spi.html</anchorfile>
      <anchor>a9e936a35f57f8fbb4df9387883af30d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLParameters</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLParameters</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>af402cff55cbd1cf2dc3c458403c835b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNeedClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>aa5fd52bdfab98745be1117de485d5bd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeedClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a5e5b1374a4e9f6f879b79fd672480b3e</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWantClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a4176969708445fe0a41cfb67d131e9d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWantClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a2e85f5317072344cf502564a9748bf6f</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseClientMode</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a912536e4dcbfde9e1d3fea593ce9fe6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseClientMode</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>aa0941db40f110dfb1dec9ad4818735cc</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>abe7f04e17b58346c6aaed53f59dc55e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getSupportedProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>aa97ad3c4c5bd6473b2a9bfff373a1614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a8aecb52be63abc7567ef8e5bcd2d67c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a2c2cc2c86c2135f1de536aca10157d3e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;suites)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getEnabledProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>abd9a82fb5d59b17f155a56ee4ee079bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabledProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>a16209cc644695576e489060211f86dcd</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;protocols)</arglist>
    </member>
    <member kind="function">
      <type>OpenSSLParameters *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_parameters.html</anchorfile>
      <anchor>acd91a1948fb39313a1e75dee79d9439b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLServerSocket</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</filename>
    <base>decaf::net::ssl::SSLServerSocket</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>aa04d93f255ae73e0588a0b41736c97b5</anchor>
      <arglist>(OpenSSLParameters *parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>ab5e43749871c98bf16943f50bd2e0335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>a3c27ff7e17f073fee47e33026156404c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>a3a4aaa5b894aeeb337930372c2ea6321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>ae62bbbfd88e6bbe48c6dde149d406d51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>af89d718d4028b64ff9765ef1fd504251</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;suites)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>ad77357bc245d6ee7451ccb0d40555930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabledProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>af9fb25daf2c2282824f614e9d1148b63</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;protocols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWantClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>ad4f4ec0e47216993d4ad14e276d43ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWantClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>a45d6d1e6dbb5e831ab1488844e2a9aef</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNeedClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>a2ad342fa1340a24da8821e2a6af861b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeedClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>aa60ec77a32a0ecada75b685c672b7a2d</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>accept</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket.html</anchorfile>
      <anchor>aff03b93ea3e03cd106205b123f30a2df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLServerSocketFactory</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</filename>
    <base>decaf::net::ssl::SSLServerSocketFactory</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a5a7d3593fc9ec778e1a834ed83b4f65b</anchor>
      <arglist>(OpenSSLContextSpi *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLServerSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>aa733eded28a41cf8d42f52fa8c639279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>af473c149d2c93d9931bcb6643bf7a0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a3d78491b1bcd0afecf1d11e4119e85c5</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a2abf98d1a6a57fde560a2931ad3ef4b7</anchor>
      <arglist>(int port, int backlog)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a7ebe74d7ee6457242b9d909a710ca1e9</anchor>
      <arglist>(int port, int backlog, const decaf::net::InetAddress *address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getDefaultCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a250862965d017ecf89628db268bf5dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a394bd53e657f63a512a4cc1fb8105fae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLSocket</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</filename>
    <base>decaf::net::ssl::SSLSocket</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a34750201d92b63947b20fb662c3065cd</anchor>
      <arglist>(OpenSSLParameters *parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>ac7176824faf99ae2f14a4585dbd8855a</anchor>
      <arglist>(OpenSSLParameters *parameters, const decaf::net::InetAddress *address, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>afe109277f3766a8562c505352a2e6187</anchor>
      <arglist>(OpenSSLParameters *parameters, const decaf::net::InetAddress *address, int port, const decaf::net::InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>ac8895af7450b75e3f34b4193318f207d</anchor>
      <arglist>(OpenSSLParameters *parameters, const std::string &amp;host, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>abecee7a3e252fc6740a7207bea0808b7</anchor>
      <arglist>(OpenSSLParameters *parameters, const std::string &amp;host, int port, const decaf::net::InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a0d28819988be4e7419bb0a6dd8b4c498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a270f74a706878f63a4e944e691f18e13</anchor>
      <arglist>(const std::string &amp;host, int port, int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a3d02b7d2155b48ea6d2838a3a62742e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::io::InputStream *</type>
      <name>getInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a5911158d2c7e8527b5fb1775fc30bd17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::io::OutputStream *</type>
      <name>getOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>adc961ba36ccd4f85c44985d3b3676e03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownInput</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a7a8f072bdf94500dfc381c22a75c0f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownOutput</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a88fb7e78c66cdc463d7116917cf7a19a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOOBInline</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a2396a0cd487555540f2b2cff86cf11d8</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUrgentData</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a613fc944a37386bb8edf1d28eb0b22bd</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>ad0412a3832fecbbddd42fd84551dbf6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a10023dbd1c514142f393dd02dfdd0b36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a0d44a8b74d9906d6b9714aa4f9449194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a6a1607e558358c8816814b22f518e4bb</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;suites)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>aee7c07351c1eaf2c467a73c091a231b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabledProtocols</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a2835627682c02d1c108a814a4328b294</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;protocols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startHandshake</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>ac56ebf60f6802a97a19c3b0682067bb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUseClientMode</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a86902a685c339d45e5f53fd2fa9edbe6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getUseClientMode</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>abcfa33b8361ee1770a8e3967466e7594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeedClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a6a24f429996ac595e86ced7ef48c0cf4</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNeedClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a9a5b9f5ab301e0afecd88ca678b6842c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWantClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a30217f3e25ec76259b16ec86a76bffb2</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWantClientAuth</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a95db3ea93d26cfb17f9022a44b4e03c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a639dba19df328182aca8ea5216cf3d9b</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a295696b1a309d1c3cc400100d6d75d76</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket.html</anchorfile>
      <anchor>a43631ff59771ac17d9dcfe4c8813257f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLSocketException</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</filename>
    <base>decaf::net::SocketException</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>ab93a60e3c8189eb7ff253694e8e7d208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>a7b800385527fa37cbea39d10e306fbcf</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>a30d5cf203723a481eadb2e65b4322fe1</anchor>
      <arglist>(const OpenSSLSocketException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>a493ee274246cd0639bffdcc36bb9d371</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>aaa4c19921e04054cce24cc16f0a0d2a8</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>acbd8640ba5ad7c52c1272682c477fce2</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>abe572baea29c2864f1f5dd1b81fa5820</anchor>
      <arglist>(const char *file, const int lineNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OpenSSLSocketException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>afdfe4d15a4e87756e7f3cef1c80bc05c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLSocketException</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>ad6c71376f88fb47ba5d033ffe256a0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getErrorString</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_exception.html</anchorfile>
      <anchor>a0c1a9a24f4ec6a1190cfea354e9af6e9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLSocketFactory</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</filename>
    <base>decaf::net::ssl::SSLSocketFactory</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>a258c6c9600c88b13d62f3911dc7ae112</anchor>
      <arglist>(OpenSSLContextSpi *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLSocketFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>af7b8da5564c2954c17c27708eea2c107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>af51ec7530de346a3b48fbd06be9be1b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>ac73912a5b0b8425d373decf0d96bff13</anchor>
      <arglist>(const decaf::net::InetAddress *host, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>ae19bf8389315c93d650a8fe1afa91e54</anchor>
      <arglist>(const decaf::net::InetAddress *host, int port, const decaf::net::InetAddress *ifAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>a743bd541c803ceeee00e9621f9106433</anchor>
      <arglist>(const std::string &amp;hostname, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>a8562cad3cc25976038699a765dc85c23</anchor>
      <arglist>(const std::string &amp;name, int port, const decaf::net::InetAddress *ifAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getDefaultCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>afc38f48f9eefb1967c2ee496af148619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>ade6bfc4fe09ecee78e5d026ffe16b00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::net::Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_factory.html</anchorfile>
      <anchor>a91cf221caf396591f9e70c08590be3db</anchor>
      <arglist>(decaf::net::Socket *socket, std::string host, int port, bool autoClose)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLSocketInputStream</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</filename>
    <base>decaf::io::InputStream</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>af03db7f47539b7c645e24e786bf67a18</anchor>
      <arglist>(OpenSSLSocket *socket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLSocketInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>a3d9f46a9af1bc82c2803ba445a6672b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>ab18181c30dea368520180260a4b588ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>aeca8acb2d6b65eeb0118d4cdfa8e0a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>a7f8329a30fc45559b8c3dccf11398258</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>af1923dac4aeba51c15348b563d5072bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_input_stream.html</anchorfile>
      <anchor>a276651d7cd44cfe4487dec94b95b49e1</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::ssl::openssl::OpenSSLSocketOutputStream</name>
    <filename>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_output_stream.html</filename>
    <base>decaf::io::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>OpenSSLSocketOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_output_stream.html</anchorfile>
      <anchor>a4d5294f5d54a8dcd89a726f8bcf99b8e</anchor>
      <arglist>(OpenSSLSocket *socket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OpenSSLSocketOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_output_stream.html</anchorfile>
      <anchor>a38e052265d523f1cbab62755c5540820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_output_stream.html</anchorfile>
      <anchor>adb8066092379416ad17aef6326464986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_output_stream.html</anchorfile>
      <anchor>a7dbee06ee5055e809ac33ccf3773cd28</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1ssl_1_1openssl_1_1_open_s_s_l_socket_output_stream.html</anchorfile>
      <anchor>a2d604473f2ed4f5a6cb83ba9f44818ef</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::net::tcp</name>
    <filename>namespacedecaf_1_1internal_1_1net_1_1tcp.html</filename>
    <class kind="class">decaf::internal::net::tcp::TcpSocket</class>
    <class kind="class">decaf::internal::net::tcp::TcpSocketInputStream</class>
    <class kind="class">decaf::internal::net::tcp::TcpSocketOutputStream</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::tcp::TcpSocket</name>
    <filename>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</filename>
    <base>decaf::net::SocketImpl</base>
    <member kind="function">
      <type></type>
      <name>TcpSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a4dd808def7ee1d97f793d3152bc67d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpSocket</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>ac80220394871f108bee73c7a2971b0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SocketHandle</type>
      <name>getSocketHandle</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a031ccfe29ea31233d04a142d6df75d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>aec9c4b81599223eab21ee49fa458176f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>aa595840c6f01efb2080c32c842ab19e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getLocalAddress</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a3063c22d2d7370706be834e97fc4f550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>create</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>ac11aeaafd5cdfaa1540540d437a612da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a83fbffdf34a80dd678e8dbf3dad24aa5</anchor>
      <arglist>(SocketImpl *socket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a22ee7ac65f9a0e6bd18cb1c2a6d41e5e</anchor>
      <arglist>(const std::string &amp;ipaddress, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>aa91038b28cdd1cda24ae0e40b94bd06c</anchor>
      <arglist>(const std::string &amp;hostname, int port, int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listen</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>aa42aea7d0b2d87aba6b5d3fc19f7fb62</anchor>
      <arglist>(int backlog)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::io::InputStream *</type>
      <name>getInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>aebc337f83604cae8c39ea65dcd823e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::io::OutputStream *</type>
      <name>getOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>adc824dacb54b6ff7a7b8bc2703015f98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a24ca7d17944572733a1dcfdd04b73954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>af22eb9b84201ec410bc1d24e1a0ae46a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownInput</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a4d6c4d2e6b986a7e5089fa4492bbf683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownOutput</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a362808bed470230db69afb150ef9b157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOption</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a113c48691c4e7a7951f4e9f7886f8980</anchor>
      <arglist>(int option) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOption</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a8aa0c6c7ce036bdcfc6a6993b6af2086</anchor>
      <arglist>(int option, int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a147f47830853e833df1497fd9b2130a1</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>aba325b328a4c16a13119d01e6ce54c4e</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkResult</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket.html</anchorfile>
      <anchor>a1deccf6c9bd8893dc58ccbf9448aef43</anchor>
      <arglist>(apr_status_t value) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::tcp::TcpSocketInputStream</name>
    <filename>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</filename>
    <base>decaf::io::InputStream</base>
    <member kind="function">
      <type></type>
      <name>TcpSocketInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>a173c20a0f339f1176c1578a097438a5b</anchor>
      <arglist>(TcpSocket *socket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpSocketInputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>ae7a0ef096dce75bcbacb732cecdc14f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>a50d89e53cf789b5aa88095525b8425a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>a30156d772ed70287f8a5090761107be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>acbd0f3d818ad3a8b801fbb99124a16dc</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>a3b38733932069744ad4ef8404cb957ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_input_stream.html</anchorfile>
      <anchor>a5f01efd33b5b686ff2c6f52e94ff457b</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::net::tcp::TcpSocketOutputStream</name>
    <filename>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_output_stream.html</filename>
    <base>decaf::io::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>TcpSocketOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_output_stream.html</anchorfile>
      <anchor>a13729b2e91c8d20cf8a4035a83fbea7b</anchor>
      <arglist>(TcpSocket *socket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpSocketOutputStream</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_output_stream.html</anchorfile>
      <anchor>ada9a8f15796371a2b682a3936acfcc8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_output_stream.html</anchorfile>
      <anchor>aaaea4675b6e8eace0c9b680e4235c2e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_output_stream.html</anchorfile>
      <anchor>a61d0025d6164080f2a628de5f0d39cd5</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1internal_1_1net_1_1tcp_1_1_tcp_socket_output_stream.html</anchorfile>
      <anchor>a414f18b2a531b6d06bc4df42aba2c969</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::nio</name>
    <filename>namespacedecaf_1_1internal_1_1nio.html</filename>
    <class kind="class">decaf::internal::nio::BufferFactory</class>
    <class kind="class">decaf::internal::nio::ByteArrayBuffer</class>
    <class kind="class">decaf::internal::nio::CharArrayBuffer</class>
    <class kind="class">decaf::internal::nio::DoubleArrayBuffer</class>
    <class kind="class">decaf::internal::nio::FloatArrayBuffer</class>
    <class kind="class">decaf::internal::nio::IntArrayBuffer</class>
    <class kind="class">decaf::internal::nio::LongArrayBuffer</class>
    <class kind="class">decaf::internal::nio::ShortArrayBuffer</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::BufferFactory</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferFactory</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a44589bb67396cb8f8b5938bdbd0bcd0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::ByteBuffer *</type>
      <name>createByteBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a81ca8266bd013b23e09253d53b3b0604</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::ByteBuffer *</type>
      <name>createByteBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>ac367fd1eaf75b62f48d81cdfa69ef38b</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::ByteBuffer *</type>
      <name>createByteBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>aa299eac2edbc5bc9039958439be8a2a5</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::CharBuffer *</type>
      <name>createCharBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a773d72f35d0ed7123c9e1776e61cfb4f</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::CharBuffer *</type>
      <name>createCharBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a3c16867c4982251dcfda414f98f08780</anchor>
      <arglist>(char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::CharBuffer *</type>
      <name>createCharBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a01c0c9ded98d3942a7bc7f334c2d69ab</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::DoubleBuffer *</type>
      <name>createDoubleBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a91b903fc76e64ef59f728fb08b10458a</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::DoubleBuffer *</type>
      <name>createDoubleBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a065486057caaab4e75f8bf536949ba13</anchor>
      <arglist>(double *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::DoubleBuffer *</type>
      <name>createDoubleBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a016dcf7bd76dd369efdf36bb5768e1b0</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::FloatBuffer *</type>
      <name>createFloatBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a91f5096f9aecd298f206efe41f44511c</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::FloatBuffer *</type>
      <name>createFloatBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a090a447d5908e7fd25510a717441153a</anchor>
      <arglist>(float *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::FloatBuffer *</type>
      <name>createFloatBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a534f43f7dc112d19135f60895bec4cc7</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::LongBuffer *</type>
      <name>createLongBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a9e2a0d5d5d268f9406df68e7dd7c148b</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::LongBuffer *</type>
      <name>createLongBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>aa2ad4bffc68dae978d039ca2bb5ae510</anchor>
      <arglist>(long long *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::LongBuffer *</type>
      <name>createLongBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a0a9605cfff316fa852ebecab999455be</anchor>
      <arglist>(std::vector&lt; long long &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::IntBuffer *</type>
      <name>createIntBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>ad3bad30ab070e85dd5d6757e2b2b8513</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::IntBuffer *</type>
      <name>createIntBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a8ce5f8877bb139772360ac92902c9372</anchor>
      <arglist>(int *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::IntBuffer *</type>
      <name>createIntBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a74a0f97af31e266b8a08a455723a2e66</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::ShortBuffer *</type>
      <name>createShortBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a2050beb72a66c46b9fbf7ef767c7e9ab</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::ShortBuffer *</type>
      <name>createShortBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>a1ac9871200d3ec5dac012015f50ec0a8</anchor>
      <arglist>(short *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::nio::ShortBuffer *</type>
      <name>createShortBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_buffer_factory.html</anchorfile>
      <anchor>af3ba803fe5baee34152fdce316e2651a</anchor>
      <arglist>(std::vector&lt; short &gt; &amp;buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::ByteArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</filename>
    <base>decaf::nio::ByteBuffer</base>
    <member kind="function">
      <type></type>
      <name>ByteArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a384ad4c72456df3bba840a8459ef0456</anchor>
      <arglist>(int capacity, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a422a4aa4476ed607b0b046e3d460465d</anchor>
      <arglist>(unsigned char *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a6aea55eb921581434c8b0f1525d1e32a</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a51306322e524792d808791ae538dbbc2</anchor>
      <arglist>(const ByteArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a7355bb98b932012410139da4deccca6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a81ed73baffb070f694bcc9cd5496412a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ab872857f87d1e77d9e54c0a83e6cd8da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a1d300022180c94d7adc08f61ff177d58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ab88d3d871be65718a26bc10480fa1c00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::nio::CharBuffer *</type>
      <name>asCharBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ae532f63b02904f8e6c1b9d3c59127615</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::nio::DoubleBuffer *</type>
      <name>asDoubleBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ae19e76b6cb171545a85a9785b14f3bde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::nio::FloatBuffer *</type>
      <name>asFloatBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>adcabd9f4d7ea07108381f0fc640eb5d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::nio::IntBuffer *</type>
      <name>asIntBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a5ac9532130690e47118f6fcfd0ef7907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::nio::LongBuffer *</type>
      <name>asLongBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ae21a5d812ab2955bb489fbe308f2bec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::nio::ShortBuffer *</type>
      <name>asShortBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>aed21a9c70f2255bd98c5da01a0c6885d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a019e49e85d4c04f31eed42119cfa4c36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>afbaee538d7a19c626e53d8bbbd457fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>af9d7f25df35236782fe9eaa67a85efdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ad3d7ce119416783ca914675db93991be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a2cbfcd1386e1e219b679fe4ec2414eba</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a716e6514c00647d3ba34a54d286e7f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a3eeed0099b82fe82ca66cf69614d2ba9</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a1f52edcd8a4bc9dd2db604c149e4451c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>af167abba3f2a52b4b2d6d2ca2692a7fc</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ac22c51dc10d8e040ee3aca24469cb9e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>adbfc001c2239e604f43c0bd37a8ff9bb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a177d0e5939d7ff274efe110669c93a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ac6fa5397b4c01cab3ecf066a2d498b2b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ab7c93abc43c250a610943e987d6d4cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a07f6271ed0438e0fed8f74d31839ee10</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>aad66bb88a93fe63a04026860ac1fa641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a7495ef1ffef98ecce4188770179daf6c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a6eea85981ad91107ceece849466a6e10</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>aa34cd944bff34ae3968d15471d7b6072</anchor>
      <arglist>(int index, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putChar</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a940d4fe71592ea67e83d1d754f34e46f</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putChar</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a58d45611f423e101722a99a4a7599faa</anchor>
      <arglist>(int index, char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a5648f055607827df32cfdb8074e957f2</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>adf4135569f27184cb922dfff238321c8</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a937d1ae4adcf0d609cd1c591fb4a30ec</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a5108c794c9a9fd260ce4600c50630950</anchor>
      <arglist>(int index, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putLong</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a01dd135accd07d0f60fa71d1b7de2212</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putLong</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a2c432f0586df4f41241234ec79cc94a8</anchor>
      <arglist>(int index, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putInt</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a29d457e7218784933a824c7b1e6f04bd</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putInt</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>ab310c1792f41c39f47cb5eabc8fee616</anchor>
      <arglist>(int index, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putShort</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>acd90cd9ec81335165a2e7fdcc19d400f</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer &amp;</type>
      <name>putShort</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a8dfa4f8108273882549629e905ebae04</anchor>
      <arglist>(int index, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>aeeca3e501a41ff17730aaf3e675ba6e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_byte_array_buffer.html</anchorfile>
      <anchor>a1e33eb10a1d60814341969765085972b</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::CharArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</filename>
    <base>decaf::nio::CharBuffer</base>
    <member kind="function">
      <type></type>
      <name>CharArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a02363d5242435b69f8ca8e71abd585ac</anchor>
      <arglist>(int size, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>acf23117e4d795a2ca00a2a2da479581a</anchor>
      <arglist>(char *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>ab4a28845aa83dfe9c2c9e802006d47a8</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a0e751518499478ef5da9ec29d8eea337</anchor>
      <arglist>(const CharArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CharArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a780a85507dbdf2259d1acd7e5aadf1bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a2a962ba127c31943dd075327142a8402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>ae6dabe5e2cc564bfe8a38de3f057ab3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a9ac96e6fac08527174b0702cab373a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a69d68ff242c2619d90782d287206cfb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>acf2117fe9c621d2569aa6bf5880bdf8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a22a5f51cf8da460d264e91afaad64813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a5da481d2f474ac00496f458abf719fea</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a9e39462b5ed584c2556b686fd3c5e830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a479f8f91fa141921980f2002e1ca39f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>ac7000bacc913fbd14e1c957f80ec9b14</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>ad2d2a97ee0cd5061f7eb428f8238821c</anchor>
      <arglist>(int index, char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a50e69c403797e5d6e0c3491f0e34a8a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual lang::CharSequence *</type>
      <name>subSequence</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>aeb7ba1e4d009af1a76ba212f8fdc2dd3</anchor>
      <arglist>(int start, int end) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>ad160fde41808391c1237a67aee9659be</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>decaf::lang::Pointer&lt; ByteArrayAdapter &gt;</type>
      <name>_array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a177ea1ae3ce47a89e01a3daa6888fff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>offset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>a4dd0e76b88bb81045aff8af4b9795690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>length</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>af27acc91350dc6eee2796f299cd99e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>readOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_char_array_buffer.html</anchorfile>
      <anchor>ac2da0f1500b27e4cc79d54eb2fd8f522</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::DoubleArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</filename>
    <base>decaf::nio::DoubleBuffer</base>
    <member kind="function">
      <type></type>
      <name>DoubleArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a3df4ee450eb1bddbb6ce18e9a5f2f006</anchor>
      <arglist>(int capacity, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a93a21d5f92b9d7e8d0b436431ff8a233</anchor>
      <arglist>(double *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a22fd39c983e8baf9f359fcce8e89d83f</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>abb8c88b8254cd1a68eb48e4f3529da21</anchor>
      <arglist>(const DoubleArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoubleArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a820617fe2e396ef43fc21fee0cd0ef8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a8263ff5f1a7c937d0da4f653eaf9f1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a83e245a70d156fecaad27e16c50d7d3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DoubleBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a3cbd7211ecbc8a7605469e6079309a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DoubleBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a07cf11ffde6056eb897318609d0d485c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DoubleBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a70ba29f560a4a1b0a482e10b08580655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a6f49b94642eb43a1da60ad6091008e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a7c264fe41cdc5bcf2efdd7657531f9e5</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a7a1ee6726661141d1efc966da5640d89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>ab75e93698af22f4065b27b201592b714</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>aafe46d5ec20db8b700401e8a90d0eb9b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a08c524bc1192fba11ac4b09df6125131</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DoubleBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>ab20500060fe93f747a81ec3981e32eaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_double_array_buffer.html</anchorfile>
      <anchor>a2f0c9ef4249bedde6ff9facebbbad907</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::FloatArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</filename>
    <base>decaf::nio::FloatBuffer</base>
    <member kind="function">
      <type></type>
      <name>FloatArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a9fd765cbb1cc035467bf6fb2b906ed42</anchor>
      <arglist>(int size, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a02460481e5a6d8a4d7bab27e2c073d4a</anchor>
      <arglist>(float *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>aa2db18ca5af75ef8e4c215e55290b7ea</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int capacity, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>aead4e231cf1d848eaa61f46bdbb74025</anchor>
      <arglist>(const FloatArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FloatArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a694d23f10095f34c41ffd0d9bc44e63b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a4efc4860c43625b5b037f33cc56fc43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a1ef09e0d0f7ddccbd1afb3c1f71cb837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FloatBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a5ab2766009e1c1d68634a1fd0a30a508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FloatBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a9f87de55849f37d85e899478530e25f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FloatBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a072efd554cf63f623d41e90f2ea6a887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>ac77899a6973bd75a289542cf375e59ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a8cfcbdd04fabe0930afccf7a6c3fa332</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>ac57a81ce0489fb969fb6209249499969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a96f43680d584b03580ce6d86528ecef9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>abf69170555bee2121feda1503ac652c9</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>afeb329754a3af60395e71cc755e6f607</anchor>
      <arglist>(int index, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FloatBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>acc2946746ae6da8a12368d8fabe5aa52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_float_array_buffer.html</anchorfile>
      <anchor>a5400e016bf80b5f452c9c919c922b542</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::IntArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</filename>
    <base>decaf::nio::IntBuffer</base>
    <member kind="function">
      <type></type>
      <name>IntArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a142f1c669ec4f146f75c4f359e159c56</anchor>
      <arglist>(int size, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a458ecaba9ca654aefc87cdb3c2e5645b</anchor>
      <arglist>(int *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>ade094f5d24fc17e164d3bbd8d4719b9d</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>abb1b8f2fc86451acce01403c5668ac69</anchor>
      <arglist>(const IntArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a44a0c0eafd3952232411d86db369360d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>ae8f0999fb12dbfa68f73ec1d1540d4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>ac043c437a81d817525c3187144f4cf90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a20229160df0d46f208c0d103eaa685b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a73490daa56a8eaf40d70fb5d335359e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>ab0d7adcac345ae6d57a1df9f4aded94a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a82601d01a1c2d22fec06062c7ebc0a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a1ded2f4ea7d80f428eb17cec353e666a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a6db7ed9d2d560db7303832ce0247d21c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a1f51296afa950ea2820f20b9fcf966bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a714dcca87d2588f5a49a78713c954fae</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>acc4ac36fc7b0f2dda709fa2c1ca8eecf</anchor>
      <arglist>(int index, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>a13bf56ac4f15330f6fac3ef5d21341c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_int_array_buffer.html</anchorfile>
      <anchor>ac8b1246fbc7089635806a2c3a28c9329</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::LongArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</filename>
    <base>decaf::nio::LongBuffer</base>
    <member kind="function">
      <type></type>
      <name>LongArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a4194b4cee0d4db48d4798bd19e2332ad</anchor>
      <arglist>(int size, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>adfeb9fee6d32c70365e2f99da4548585</anchor>
      <arglist>(long long *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a5e4e9afecb238558a16746dd266a2c46</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LongArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>ac6e1415fedd2eec43a9a03a39de5851c</anchor>
      <arglist>(const LongArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LongArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a4f1ef887be5a1d9ee51247cdf7211ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>ab8a2a12874457733ce52f9cb59678da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a4c5d3d50aa6e93f7ca1c37fa529479de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LongBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a32fef5aca00516bc4fd9515d102cb573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LongBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a98446f0154b58522a0cd7a556c742150</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LongBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a8e0e0ccfdbd90fe8929815a17e9302d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>af950dd63143c11a14e6113a16b7eaa1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a4e633a66b824f62b2686cfe3b9d8aa82</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>afc009677719664de529436aee620a5ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>aefbf3771bf14a21df190b138c7514715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a696044d5685ddafea3549e90a66ccc32</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>aaf32ac558623f57c49982ae37b0f8e9d</anchor>
      <arglist>(int index, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LongBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>ad598f15b62d26fcf43251047313cf054</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_long_array_buffer.html</anchorfile>
      <anchor>a22d4b2779fdb200b0517b09c058622b6</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::nio::ShortArrayBuffer</name>
    <filename>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</filename>
    <base>decaf::nio::ShortBuffer</base>
    <member kind="function">
      <type></type>
      <name>ShortArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a73f7035d3b2b698fb86210b982f79260</anchor>
      <arglist>(int size, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>ace86bdd561bab0e3c75d50d3cfb553f7</anchor>
      <arglist>(short *array, int size, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>ac73c5f88a21fdd311e64531973c5379e</anchor>
      <arglist>(const decaf::lang::Pointer&lt; ByteArrayAdapter &gt; &amp;array, int offset, int length, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a9e4b743ea6de8b71d90c06b8dbf319d1</anchor>
      <arglist>(const ShortArrayBuffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShortArrayBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>ad87cd71d2275381deb0d24b1a3473f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a130ebf9965730ff13e3ec1c008e0485a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a9d120674684d912238754d38f07edd15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShortBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a57b9907cfa7413348f99cdd549adff3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShortBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a74d5eeb98d892afd4e9c10222eed963c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShortBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a0fdc19f32192ada26b028a1a7567e2d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a544a53cb38f1e01d241bf24945f5ec23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>adfc39f6b369f3ca55d9478ea4727ed9b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a4afb131fdf3c4e4e227bef40e38439f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>ab4c05c02dcaba022139512d17c54baa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a7356f34838520080f8cc16eeeefac1ba</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a64fcfcf18f0b8f85bc110e084b137d5d</anchor>
      <arglist>(int index, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ShortBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a1b082913bbbd1ff0fa7429ad426217f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setReadOnly</name>
      <anchorfile>classdecaf_1_1internal_1_1nio_1_1_short_array_buffer.html</anchorfile>
      <anchor>a828ac48b32feeb6ae20eb113af4e6fcd</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::security</name>
    <filename>namespacedecaf_1_1internal_1_1security.html</filename>
    <class kind="class">decaf::internal::security::SecureRandomImpl</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::security::SecureRandomImpl</name>
    <filename>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</filename>
    <base>decaf::security::SecureRandomSpi</base>
    <base>decaf::security::SecureRandomSpi</base>
    <member kind="function">
      <type></type>
      <name>SecureRandomImpl</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>af4a6b52d0db92f7236cbbd08ad5e53de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecureRandomImpl</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>a77901370f39ed69e61cad603b4cd196e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>providerSetSeed</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>a0fc11d4cd285b9b455f86f36444e00b6</anchor>
      <arglist>(const unsigned char *seed, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>providerNextBytes</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>adcb49cbb40044e9297fa8cf3466ac741</anchor>
      <arglist>(unsigned char *bytes, int numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>providerGenerateSeed</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>ae5e6983b8624edec86589f973483b148</anchor>
      <arglist>(int numBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SecureRandomImpl</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>af4a6b52d0db92f7236cbbd08ad5e53de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecureRandomImpl</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>a77901370f39ed69e61cad603b4cd196e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>providerSetSeed</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>a0fc11d4cd285b9b455f86f36444e00b6</anchor>
      <arglist>(const unsigned char *seed, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>providerNextBytes</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>adcb49cbb40044e9297fa8cf3466ac741</anchor>
      <arglist>(unsigned char *bytes, int numBytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>providerGenerateSeed</name>
      <anchorfile>classdecaf_1_1internal_1_1security_1_1_secure_random_impl.html</anchorfile>
      <anchor>ae5e6983b8624edec86589f973483b148</anchor>
      <arglist>(int numBytes)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::util</name>
    <filename>namespacedecaf_1_1internal_1_1util.html</filename>
    <namespace>decaf::internal::util::concurrent</namespace>
    <class kind="class">decaf::internal::util::ByteArrayAdapter</class>
    <class kind="class">decaf::internal::util::GenericResource</class>
    <class kind="class">decaf::internal::util::HexStringParser</class>
    <class kind="class">decaf::internal::util::Resource</class>
    <class kind="class">decaf::internal::util::ResourceLifecycleManager</class>
    <class kind="class">decaf::internal::util::TimerTaskHeap</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::ByteArrayAdapter</name>
    <filename>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</filename>
    <class kind="union">decaf::internal::util::ByteArrayAdapter::Array</class>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a129fc709f9c0dd4107afc2b4ded1d69a</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a9f1ee6fbf6c07881a5a1eca7af9df6ff</anchor>
      <arglist>(unsigned char *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a8697a7ae20c23b149373a29c4a0da4bf</anchor>
      <arglist>(char *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ac733ad44be96cc14a9d64c275f81fa43</anchor>
      <arglist>(double *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a9fc613305289bb100de9a5bce35e819f</anchor>
      <arglist>(float *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a728d90f07cafdcbb940fd29e023b7807</anchor>
      <arglist>(long long *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a713178b4fa8a601d110f03c8729ad23b</anchor>
      <arglist>(int *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a09ca92ea3548903921e93dd804865a9f</anchor>
      <arglist>(short *array, int size, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteArrayAdapter</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>abf0b78333ebfb2f49f043fd6f3b18948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a2f77697fb426146a7302f2ebee5e297c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCharCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a8ec6e02f6a12c189fb0308c9893d88ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDoubleCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a65a3d1a278ce5ef5846acb38e6607519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFloatCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a8d300e5b319be6b52553205aba23509e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLongCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a99d163d012791c43d190baa0b1476791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ae0cbdaf8811b42b67d27c979053687d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getShortCapacity</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>acd2b054061171b2203eb6ae7f399d4f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getByteArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a3c624ccc9090ed86206f513646fed8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>getCharArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a78aa44ef21b2721025716d6977498d01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short *</type>
      <name>getShortArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a97b2e502b0ec09e58d9793852817fffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>getIntArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>afd942eeec67062fd63136ca2a1a9d5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long *</type>
      <name>getLongArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a7acd75e86a282814f79e3dc2d69e553d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getDoubleArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a6ec9dfb41f81a6652aa6b5aab651e4f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float *</type>
      <name>getFloatArray</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>acb4c0a6c062feda0bef44dc035d9b91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a6dfd6373e8c2b327057998fa91ebf79d</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a0857e62a493c01a56e926e2cca7025ee</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a8e4f9367846260c30f864e35336c7a23</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a15e748c8c2f300b5c6669c391de6dcd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ab07fac85b8d56ac42158fe5f99e156d8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a615c80f6585ed4ea2ca597be21860683</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ae8a1a7092425a5b51f2181b7289c531b</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>af999e971a4ea7f5bb1dc32cfc3b1f5d3</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a592d4bb8b2d5c76bec3754b34bcdfca4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ae4f899c3f36e51b69ebad06b206e7875</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>aa9f37f27dd2d7ee9574674fa7d72eeb7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a40fefaa23edba36a625f1dc285529bfb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>aca8e87b3d2e0481ef7f87ce18ba7af0e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLongAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a2688a33d7df9c95c1ecfe35895db2a81</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a5a6112c2b9c8f9887b40822292d567cc</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a6d973809765ee8b5b33fd10a927c8b10</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a50991610ce4f40ddbfdbc40b5701022c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getShortAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>af7bde9ec83b4c69a6e164721dc665a65</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ac7bd95554124bb5a28f19f3c71c9155d</anchor>
      <arglist>(int index, unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putChar</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>aa5423888295ce5eb22309f0799878b0a</anchor>
      <arglist>(int index, char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a04781d674d2904e7486b500199fbc880</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putDoubleAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a7e8dcc06095daacc4fcb354ea2a65aee</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a8c97675a65adb7d964b2acd460f08747</anchor>
      <arglist>(int index, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putFloatAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ae59dd74fb3affbc0e33351dc233b3710</anchor>
      <arglist>(int index, float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putLong</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>adcca10347197d3e391c94c632534d2c0</anchor>
      <arglist>(int index, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putLongAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a2f3ac887d4e6c3fd1a7b60176cb95049</anchor>
      <arglist>(int index, long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putInt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>aedb948bdbcd08fc5faa57eb4297b977b</anchor>
      <arglist>(int index, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putIntAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a5bec39a3dbaf86c534eb77410e7ec45e</anchor>
      <arglist>(int index, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putShort</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>a1ce00b38db02f687041d274a50b1d4f1</anchor>
      <arglist>(int index, short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ByteArrayAdapter &amp;</type>
      <name>putShortAt</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_byte_array_adapter.html</anchorfile>
      <anchor>ab705235270f67acf6dc2323821a21fd9</anchor>
      <arglist>(int index, short value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::GenericResource</name>
    <filename>classdecaf_1_1internal_1_1util_1_1_generic_resource.html</filename>
    <templarg>T</templarg>
    <base>decaf::internal::util::Resource</base>
    <member kind="function">
      <type></type>
      <name>GenericResource</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_generic_resource.html</anchorfile>
      <anchor>a026a844dd1549fce18a67dafdfbfa9b5</anchor>
      <arglist>(T *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericResource</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_generic_resource.html</anchorfile>
      <anchor>a543ed0501923616ed3e43e5a0dade288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getManaged</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_generic_resource.html</anchorfile>
      <anchor>ad53191854c57da7e28e607e33fd22ede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManaged</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_generic_resource.html</anchorfile>
      <anchor>aaec4347ff653c0f3eae4ec38a975c015</anchor>
      <arglist>(T *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::HexStringParser</name>
    <filename>classdecaf_1_1internal_1_1util_1_1_hex_string_parser.html</filename>
    <member kind="function">
      <type></type>
      <name>HexStringParser</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_hex_string_parser.html</anchorfile>
      <anchor>ac008b9c16b9075a0a5431236fec5e5a3</anchor>
      <arglist>(int exponentWidth, int mantissaWidth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HexStringParser</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_hex_string_parser.html</anchorfile>
      <anchor>aa4ff35c735cd5cb80ae5d407fb9353fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>parse</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_hex_string_parser.html</anchorfile>
      <anchor>a4e8e1e1013ef877c7973f8b18b3597c3</anchor>
      <arglist>(const std::string &amp;hexString)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseDouble</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_hex_string_parser.html</anchorfile>
      <anchor>a156be6c8a9ed6714d1e00819d88afb27</anchor>
      <arglist>(const std::string &amp;hexString)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>parseFloat</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_hex_string_parser.html</anchorfile>
      <anchor>a09b1e884e1b3b467f0eb6f821ca1f3f9</anchor>
      <arglist>(const std::string &amp;hexString)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::Resource</name>
    <filename>classdecaf_1_1internal_1_1util_1_1_resource.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Resource</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_resource.html</anchorfile>
      <anchor>a4690eddb13361505384a25199d816794</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::ResourceLifecycleManager</name>
    <filename>classdecaf_1_1internal_1_1util_1_1_resource_lifecycle_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceLifecycleManager</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a55e5eade5603341c69898177d75b2f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResourceLifecycleManager</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a0b435c0360b009e29a87e7e7e1a9c965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addResource</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>ab2907cf1208d13865bd7eb80090f99e5</anchor>
      <arglist>(Resource *value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyResources</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_resource_lifecycle_manager.html</anchorfile>
      <anchor>a6002ae6e648e06430349e861d7a01f43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::TimerTaskHeap</name>
    <filename>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</filename>
    <member kind="function">
      <type></type>
      <name>TimerTaskHeap</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>aac30664d608fbfe7fb14324fbee8a6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimerTaskHeap</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>abb0f1eb0b5975a3db7063e60613759be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TimerTask &gt;</type>
      <name>peek</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>af558d9ce89634689b01457a7a020e3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a4d4755b6edef9010996783e5ecdc1a7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a672acd16855338e0e074947fbcc3fd01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a2e77a4eda1edcb0905cb62455904980b</anchor>
      <arglist>(const Pointer&lt; TimerTask &gt; &amp;task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a64d19e15b07bf2ce7735efcce888c369</anchor>
      <arglist>(std::size_t pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a0631531116c01cbe07c6e43b120c4436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustMinimum</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a5bee0aaf04c3de47b597dc51adff03e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>deleteIfCancelled</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>aabc26f347b8f1b16d3d21841e65ea9a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>find</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1_timer_task_heap.html</anchorfile>
      <anchor>a4790fd9f5da15ac1855e278809c0d70d</anchor>
      <arglist>(const Pointer&lt; TimerTask &gt; &amp;task) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::internal::util::concurrent</name>
    <filename>namespacedecaf_1_1internal_1_1util_1_1concurrent.html</filename>
    <class kind="class">decaf::internal::util::concurrent::ConditionImpl</class>
    <class kind="class">decaf::internal::util::concurrent::MutexImpl</class>
    <class kind="class">decaf::internal::util::concurrent::SynchronizableImpl</class>
    <class kind="class">decaf::internal::util::concurrent::Transferer</class>
    <class kind="class">decaf::internal::util::concurrent::TransferQueue</class>
    <class kind="class">decaf::internal::util::concurrent::TransferStack</class>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::concurrent::ConditionImpl</name>
    <filename>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</filename>
    <member kind="function" static="yes">
      <type>static decaf::util::concurrent::ConditionHandle *</type>
      <name>create</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</anchorfile>
      <anchor>a3b016e235e3eb782711e5d5a5f6211f5</anchor>
      <arglist>(decaf::util::concurrent::MutexHandle *mutex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</anchorfile>
      <anchor>a69ee09bc708434f9b05b2880532d4f06</anchor>
      <arglist>(decaf::util::concurrent::ConditionHandle *handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</anchorfile>
      <anchor>a03fd7a9d0cbe401fb14047c25b76d628</anchor>
      <arglist>(decaf::util::concurrent::ConditionHandle *condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</anchorfile>
      <anchor>a0f9ffe4f0c892056d852ecdc32fbc1d1</anchor>
      <arglist>(decaf::util::concurrent::ConditionHandle *condition, long long mills, long long nanos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</anchorfile>
      <anchor>a6ff3f0cef571459f47f075fba6501481</anchor>
      <arglist>(decaf::util::concurrent::ConditionHandle *condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_condition_impl.html</anchorfile>
      <anchor>aeabb3f543ace23e9608db94c50da4e0b</anchor>
      <arglist>(decaf::util::concurrent::ConditionHandle *condition)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::concurrent::MutexImpl</name>
    <filename>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_mutex_impl.html</filename>
    <member kind="function" static="yes">
      <type>static decaf::util::concurrent::MutexHandle *</type>
      <name>create</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_mutex_impl.html</anchorfile>
      <anchor>a3d04759397ddb2940c584e6036ce22bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_mutex_impl.html</anchorfile>
      <anchor>a4915325dd8413db335c827807f371dcb</anchor>
      <arglist>(decaf::util::concurrent::MutexHandle *handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_mutex_impl.html</anchorfile>
      <anchor>a75c3654e70dea0414284e9042c2b4630</anchor>
      <arglist>(decaf::util::concurrent::MutexHandle *handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>trylock</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_mutex_impl.html</anchorfile>
      <anchor>abc74a56f82aef158cbc50cae227c1358</anchor>
      <arglist>(decaf::util::concurrent::MutexHandle *handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_mutex_impl.html</anchorfile>
      <anchor>a6a93606345a327f169facc4b1f7c1d84</anchor>
      <arglist>(decaf::util::concurrent::MutexHandle *handle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::concurrent::SynchronizableImpl</name>
    <filename>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</filename>
    <base>decaf::util::concurrent::Synchronizable</base>
    <member kind="function">
      <type></type>
      <name>SynchronizableImpl</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>a397aeb526729b3f840afd02122c5e437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SynchronizableImpl</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>ac753350d06e48164d447181251e83af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>ab27c73fb2f18ec8eb79d24a79269f6d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>adf9d5bd1c6b02b60d757ab7c43798faa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>a8977e98a9ac6cd33355dfa347059c978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>adb7b5d1f1b29dbd097daa0c791402eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>a44e08e617f219075f71a76e44951d9e1</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>ae3b5dd07d94ae0b33291f3028027da1c</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>a60f940f5e2395049129ac960b8600c64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_synchronizable_impl.html</anchorfile>
      <anchor>aead1490812300dc94a8087c3c96db575</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::concurrent::Transferer</name>
    <filename>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transferer.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::concurrent::TransferQueue</name>
    <filename>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_queue.html</filename>
    <templarg></templarg>
    <base>decaf::internal::util::concurrent::Transferer</base>
    <member kind="function">
      <type></type>
      <name>TransferQueue</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_queue.html</anchorfile>
      <anchor>af85d6553e56a8bee22342bb87f2732b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransferQueue</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_queue.html</anchorfile>
      <anchor>a11fd747ca4d41ebeb8f1941d6c7cd980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_queue.html</anchorfile>
      <anchor>ac6bde1cae9365cc1be9a42e87bc01129</anchor>
      <arglist>(E *e, bool timed, long long nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E *</type>
      <name>transfer</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_queue.html</anchorfile>
      <anchor>a082d12160de7cc1c872a52b60dbd0e18</anchor>
      <arglist>(bool timed, long long nanos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::internal::util::concurrent::TransferStack</name>
    <filename>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_stack.html</filename>
    <templarg></templarg>
    <base>decaf::internal::util::concurrent::Transferer</base>
    <member kind="function">
      <type></type>
      <name>TransferStack</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_stack.html</anchorfile>
      <anchor>aa4f46660a17a89f3dfeeb3af081ea010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransferStack</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_stack.html</anchorfile>
      <anchor>a593afdb6600907223a84c9117c8cad64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transfer</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_stack.html</anchorfile>
      <anchor>a0cd7383675644b79f397e23776f82219</anchor>
      <arglist>(E *e, bool timed, long long nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E *</type>
      <name>transfer</name>
      <anchorfile>classdecaf_1_1internal_1_1util_1_1concurrent_1_1_transfer_stack.html</anchorfile>
      <anchor>a9ae075a1878d9195019a76be3de6b9a7</anchor>
      <arglist>(bool timed, long long nanos)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::io</name>
    <filename>namespacedecaf_1_1io.html</filename>
    <class kind="class">decaf::io::BlockingByteArrayInputStream</class>
    <class kind="class">decaf::io::BufferedInputStream</class>
    <class kind="class">decaf::io::BufferedOutputStream</class>
    <class kind="class">decaf::io::ByteArrayInputStream</class>
    <class kind="class">decaf::io::ByteArrayOutputStream</class>
    <class kind="class">decaf::io::Closeable</class>
    <class kind="class">decaf::io::DataInput</class>
    <class kind="class">decaf::io::DataInputStream</class>
    <class kind="class">decaf::io::DataOutput</class>
    <class kind="class">decaf::io::DataOutputStream</class>
    <class kind="class">decaf::io::EOFException</class>
    <class kind="class">decaf::io::FileDescriptor</class>
    <class kind="class">decaf::io::FilterInputStream</class>
    <class kind="class">decaf::io::FilterOutputStream</class>
    <class kind="class">decaf::io::Flushable</class>
    <class kind="class">decaf::io::InputStream</class>
    <class kind="class">decaf::io::InputStreamReader</class>
    <class kind="class">decaf::io::InterruptedIOException</class>
    <class kind="class">decaf::io::IOException</class>
    <class kind="class">decaf::io::OutputStream</class>
    <class kind="class">decaf::io::OutputStreamWriter</class>
    <class kind="class">decaf::io::PushbackInputStream</class>
    <class kind="class">decaf::io::Reader</class>
    <class kind="class">decaf::io::UnsupportedEncodingException</class>
    <class kind="class">decaf::io::UTFDataFormatException</class>
    <class kind="class">decaf::io::Writer</class>
  </compound>
  <compound kind="class">
    <name>decaf::io::BlockingByteArrayInputStream</name>
    <filename>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</filename>
    <base>decaf::io::InputStream</base>
    <member kind="function">
      <type></type>
      <name>BlockingByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>a455274a07f227af4e525b2827be045da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockingByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>ade748120bcd8a2a36038c3d9d2e5a262</anchor>
      <arglist>(const unsigned char *buffer, int bufferSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlockingByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>a097dc3d18466cfc0d4ca3b87afa98c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>a538eb6ab0be18610c6ef359b0f06f34f</anchor>
      <arglist>(const unsigned char *buffer, int bufferSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>a00da8d68545bb3502ad755461b91335c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>adb28ad3aa0bab82eb551597f3ada308e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>aa1bbb0bcefa1f7875da6e849063aad7e</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>ad42a48b60fd37d89c5af9dcc073dc302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_blocking_byte_array_input_stream.html</anchorfile>
      <anchor>ad4d204b65e8a3e615d7e48d241ccd44b</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::BufferedInputStream</name>
    <filename>classdecaf_1_1io_1_1_buffered_input_stream.html</filename>
    <base>decaf::io::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a9885eff8491544d7112c91b6496a4f25</anchor>
      <arglist>(InputStream *stream, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a53db7792ad27040b91b234690f0be5f6</anchor>
      <arglist>(InputStream *stream, int bufferSize, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferedInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a3e94c58571068c30eb6b63458cd08d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>ad3d7ca8ea6a074a2cdf4e0d56b17bee6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a4a9588a35d044983916fc4b8871dfed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a7294c56d2164da76df46668bc74681d9</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>aa31afad836438926a153590157696115</anchor>
      <arglist>(int readLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>ac403e88b060a105acd8dd1c52473585b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a18cb7cb05e599f47a719e75d95a46f73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>ae8190ca60e98e7ed848f682b472127f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_input_stream.html</anchorfile>
      <anchor>a37f483a36a400bc8394d44e425ccf6ef</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::BufferedOutputStream</name>
    <filename>classdecaf_1_1io_1_1_buffered_output_stream.html</filename>
    <base>decaf::io::FilterOutputStream</base>
    <member kind="function">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>a75569924b68959c1a283e2b3d1b473c6</anchor>
      <arglist>(OutputStream *stream, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>a2069d35991d85914e9fec00f6bb9047f</anchor>
      <arglist>(OutputStream *stream, int bufferSize, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferedOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>a00d4b82c2bce8ed147ba3eb915462e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>acd96c485c08a6e894918ee0ba1d460bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>a4932d3bda5fdf5f5e5f49ba3f7936119</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>a0192646212634efa3271cf93c314209a</anchor>
      <arglist>(const unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_buffered_output_stream.html</anchorfile>
      <anchor>a4cb0074b8c00ec5ac69808ad00ab11b1</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::ByteArrayInputStream</name>
    <filename>classdecaf_1_1io_1_1_byte_array_input_stream.html</filename>
    <base>decaf::io::InputStream</base>
    <member kind="function">
      <type></type>
      <name>ByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>acef7b24f2767827df5171ab682085932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a9e48108281d4f67a32e22ff2e0125dbc</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a2dad5728cfa077d50f313424486a367e</anchor>
      <arglist>(const unsigned char *buffer, int bufferSize, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a51c47fb761aeff268bb8a343e52e738e</anchor>
      <arglist>(const unsigned char *buffer, int bufferSize, int offset, int length, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteArrayInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a0b22b4603519bfda3413d315a18aba98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>aa724e7c8a2dce254214d783ce74aaa5c</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a0f206fcb2097fd022afc929bef4a54d7</anchor>
      <arglist>(const unsigned char *buffer, int bufferSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setByteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a53fae5f5c4da38c88a62a3913182fc81</anchor>
      <arglist>(const unsigned char *buffer, int bufferSize, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>aa8e319ea0ef7482b21a03bf6afcf2072</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a6e719a173d95d05354343c135fff0601</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>af1528c3e4ee710260e9e4d5ec633ebe4</anchor>
      <arglist>(int readLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a9fe2097ed89d7f233ec5d71a07e359a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a1c90f1608ef28cce8fa2efbd8c528617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a6571d515b69238464fe423f7a86c8aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_input_stream.html</anchorfile>
      <anchor>a57599afe0f269076475a8fbad5618bc7</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::ByteArrayOutputStream</name>
    <filename>classdecaf_1_1io_1_1_byte_array_output_stream.html</filename>
    <base>decaf::io::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>ByteArrayOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>af6a2d067acf9170b60c191f92c1d586d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ByteArrayOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>ad46a2c93b1391c648f3659267a754ae8</anchor>
      <arglist>(int bufferSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteArrayOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>ade0dce1b1827dd904f51f45a512bf15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; unsigned char *, int &gt;</type>
      <name>toByteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>a28d118498288034c7fb972e8a7a8e87e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>a676f3e79388a31344278dc215950ecd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>a1c84d37b7907140153f8a3a8f015366e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>a1a5d5e230501bde0acbb2a7a094d621f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTo</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>a9f9e2102fc60bca1aadc158f2ffae887</anchor>
      <arglist>(OutputStream *out) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>add3a623c9c8e0e58a9f0159687edb5c3</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_byte_array_output_stream.html</anchorfile>
      <anchor>aa2cf3c7385d53b7f16ba460abdeb59b4</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::Closeable</name>
    <filename>classdecaf_1_1io_1_1_closeable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Closeable</name>
      <anchorfile>classdecaf_1_1io_1_1_closeable.html</anchorfile>
      <anchor>aba246385364d9b5c78e976a73799971d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_closeable.html</anchorfile>
      <anchor>a0eeba486c31a3a448b57beb810e4b5a2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::DataInput</name>
    <filename>classdecaf_1_1io_1_1_data_input.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataInput</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>ae21808a7a3c9d68f24e73135ff57a33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>readBoolean</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a63988e76f84fc8c3057f611a0b163db1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>readByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a0e8235fb50c9e92066cbc36cbc64e60d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>readUnsignedByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a47a07fbaa24b26100e736ea62e2d5056</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>readChar</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a05933fc94b98806d83bc295111cb633d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>aa5a80dea824023e5de7c0e37f6028923</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>ae5463c498dfd6d01e139a16001692daf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a568e10209086341459832d527a733949</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>readLong</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a40b72b346d7e94a674779112ac5f38b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>acbb2389d0ac1775972b3027c95fcf99f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned short</type>
      <name>readUnsignedShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>aa06a2cf9befbf394aa9af4ffb8d628cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>readString</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a884d7a3a98fa11329d4435a34422024e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>readLine</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>aee5b4c2baea5614b250f7da685a68b74</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>readUTF</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>ac80c9e17ef5254a4ead73c818ad7c630</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readFully</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>acf7969e2d47326559ce8809e53b7c11a</anchor>
      <arglist>(unsigned char *buffer, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readFully</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>af3752226a4733371b1557bd57a07ea8e</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>skipBytes</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input.html</anchorfile>
      <anchor>a058ac2f7728812a559de9d34ce9489db</anchor>
      <arglist>(long long num)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::DataInputStream</name>
    <filename>classdecaf_1_1io_1_1_data_input_stream.html</filename>
    <base>decaf::io::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>DataInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a86c3d15e49018e2ad0904d985d499145</anchor>
      <arglist>(InputStream *inputStream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>ae1b2279eac8778766ee851f16058ed0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>readBoolean</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>ade018f705a1a84aff923cd80cd10b381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>readByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a3dd7f3730cc4f156d3b5c864d4dcd779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>readUnsignedByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a571d09ea663755c85e41c8c442b3d251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>readChar</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>adbb0f4f802dbf511caff1ca568090f2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>readDouble</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>abc4de625794f8e57006452d7faedb1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>readFloat</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>aa05c1a877e90e66e692f3dd174d7b765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>readInt</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>aaa0ff4b6cf8df58850527889f29fa729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>readLong</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a25284d97d4b65d281f773b0a96a5707b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>readShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a5a47d9312a696dca8d33f9df0dc8f086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>readUnsignedShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>adecba10cc056e611d612283ca7baa585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readString</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>afe177ed56ab41dfe1f94db02f6485148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readLine</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a8ead591af4a45f20e9ca43c8d1487927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>readUTF</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a59e9406fae7c85d0c51899940b9688ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFully</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a25c668cf01c52c5ea05876f7f2fbd70d</anchor>
      <arglist>(unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readFully</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a35bec77a9c5825c858902b2f9c14e0ca</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skipBytes</name>
      <anchorfile>classdecaf_1_1io_1_1_data_input_stream.html</anchorfile>
      <anchor>a04da0adc2001b2e31b8fda21b1ebcb91</anchor>
      <arglist>(long long num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::DataOutput</name>
    <filename>classdecaf_1_1io_1_1_data_output.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataOutput</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>adf2b9118ae2ddff5bb63b79fa74889e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBoolean</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>ab03c06578c7c366414b01b71f56b5a9c</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a9fef9f88d4ed676df3648c51f0f8f95c</anchor>
      <arglist>(unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a7b5cda556c12af070384d63759968a17</anchor>
      <arglist>(short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a94d1cd21422b43e6bec26dfbc0d5a2fd</anchor>
      <arglist>(unsigned short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeChar</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a5fd5974cb5df0835a5ea1d189ce492e2</anchor>
      <arglist>(char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>ac1fa2fe8686f28c5ce4d27b8d2f43c85</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeLong</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a2a4d43d8b087567b5a546dacc2567b2f</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a6ee7885bdf415b8c8761786767261b3a</anchor>
      <arglist>(float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>aa6b80f1dd209f60a25e8311200eb0a77</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a469d9e3a6f1e37076b1d8197cccc2ba2</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeChars</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>a0132b1c1cf184ac3db507d5a29f312f4</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeUTF</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output.html</anchorfile>
      <anchor>ac49d20200854c7e53186068d7931d0a7</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::DataOutputStream</name>
    <filename>classdecaf_1_1io_1_1_data_output_stream.html</filename>
    <base>decaf::io::FilterOutputStream</base>
    <member kind="function">
      <type></type>
      <name>DataOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a7a04454953a0598ff06b666deebbf96b</anchor>
      <arglist>(OutputStream *outputStream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a2f46d4b17901658e75237f286b4bb86f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a3bc7781334e4e5832f5a78ed97607bae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBoolean</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>aff16db07894c83b27cdc04bbd4ad3805</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a17014f0c35314c1c5e9082cd423ecc42</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a5fff8db8d29cdd536f69c10f7722ee0a</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeUnsignedShort</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a9cb7edca423ca9594bd2a7712a508c65</anchor>
      <arglist>(unsigned short value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeChar</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a06265d618bdabdcde8a0a39d6cb9758f</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeInt</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a5bb906477c36ea051f1d88fe1dbc42c7</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLong</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a6445a8248c833a27bc4a5a9b50caed72</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeFloat</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a10ef60eb9299cd59915e3371b6a39e12</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeDouble</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a6a13248d3fc2b48ada94f6571678c67e</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeBytes</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a3d9e8a0a33027d2c9f9b52d5192c8374</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeChars</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>ac945d0c0f968592a32e5a1c0f13f6b11</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeUTF</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>ae7c76f3c8e16d61c44733c1fb102fdd2</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a87b2dfc847d4cdab5b5a1cea83246fe2</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>abc36c9690fb9bd7e7e021097588800a7</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long long</type>
      <name>written</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>aeef6131ed4e34c4970dca1ae55924255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char</type>
      <name>buffer</name>
      <anchorfile>classdecaf_1_1io_1_1_data_output_stream.html</anchorfile>
      <anchor>a84af9e1426a9b02dfc6f910df484a9cb</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::EOFException</name>
    <filename>classdecaf_1_1io_1_1_e_o_f_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a8fe04c104cc9638d870c09eb2fdbbfe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a81011033182b1e5ca9aa0cc465efdfb1</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>afb25535235942bcd27a48bb7e39fd6d4</anchor>
      <arglist>(const EOFException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a7ddfd4495028f8a3f63fe5449d42518d</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a032e562064fb17b60f44648f2a98d569</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a2049ab94be915fc16d180e55bdbee298</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EOFException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a742b64270fcf083cdba2c73b56ced382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EOFException</name>
      <anchorfile>classdecaf_1_1io_1_1_e_o_f_exception.html</anchorfile>
      <anchor>a692bb7d3f2ec4cb130798160e99f75f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::FileDescriptor</name>
    <filename>classdecaf_1_1io_1_1_file_descriptor.html</filename>
    <member kind="function">
      <type></type>
      <name>FileDescriptor</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a3e5e794b34a9f0f868df8b3d608d9bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileDescriptor</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a9ecb9b65e04745e6d0d3690cbcdd2ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>ae3ea6e1f54f4b94a8630dc3acb987079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a780e81ff80dd82dd209c569444b26ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static FileDescriptor</type>
      <name>in</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a1daca6eeecd30d30c33ac3baa5cb8294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static FileDescriptor</type>
      <name>out</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a7780d4990e1da4234f82c4387ff2661c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static FileDescriptor</type>
      <name>err</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a693a32876eabf693cddc55c3c4d204c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileDescriptor</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a4a718da97940fc76510673d5e1a9412f</anchor>
      <arglist>(long value, bool readonly)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>descriptor</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>a2eabd1059fad2d68195671ad7d6d9296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>readonly</name>
      <anchorfile>classdecaf_1_1io_1_1_file_descriptor.html</anchorfile>
      <anchor>aa3b453406ce9bb6f311611728a64665e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::FilterInputStream</name>
    <filename>classdecaf_1_1io_1_1_filter_input_stream.html</filename>
    <base>decaf::io::InputStream</base>
    <member kind="function">
      <type></type>
      <name>FilterInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>ab901def0822fb3fbec1e582fdbd557f9</anchor>
      <arglist>(InputStream *inputStream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>ac6a28400030139258dc9166402b90bc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a0f755e6f29a0bf09f6c36f9cbd901a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a86fff21a2592c4b0e8654075b535a553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a19d847009df788eb53c1d9dea7cbe0df</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a669f86fa8c0da1f446b6f7ebb36110e0</anchor>
      <arglist>(int readLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a26b2960b011babbb14e532b580bc5bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a41d5a8addb10ec53949813e57d27fb1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>ab0514878c052c3b4b08954e6736a4173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArray</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a17fd025ad90b2d4f729a605062493893</anchor>
      <arglist>(unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a6d58708d0bd13acb46fa4884a0afabf3</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a15729a850d992566f47f25b7c35a6ba4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InputStream *</type>
      <name>inputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a7f3bf93d01a14b8a0ae20f77e91c9a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>own</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a347c29a6e05c78777466ffe323872f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile bool</type>
      <name>closed</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_input_stream.html</anchorfile>
      <anchor>a6673f4dad9f288782c3a3e3252626566</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::FilterOutputStream</name>
    <filename>classdecaf_1_1io_1_1_filter_output_stream.html</filename>
    <base>decaf::io::OutputStream</base>
    <member kind="function">
      <type></type>
      <name>FilterOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>af871953a40759b76077a47e239e3699a</anchor>
      <arglist>(OutputStream *outputStream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterOutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a755a30a8e7ac2d6d997f0758bc6a8a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>afd883c8a31028f152354e98c3a35849d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a61391833926dae6a55edca7166c20f6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a988e1bad370e3108adabbb4743e85d5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a506e5decc73180cb1f06831c8d59e46f</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>aa6a553267d3c4ea9ce9c19306665e44b</anchor>
      <arglist>(const unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a410e672d22a6efb787e5bc43b9d86e51</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a444ea4cc1dbe4d83c2825a8efe92eb15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OutputStream *</type>
      <name>outputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a4d4da2749969551ca62d0ee11a9db632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>own</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>a183fe76bda4aef18f7ffb16d540974e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>volatile bool</type>
      <name>closed</name>
      <anchorfile>classdecaf_1_1io_1_1_filter_output_stream.html</anchorfile>
      <anchor>aa7667a7a7823cec7ff65a27ce172aeec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::Flushable</name>
    <filename>classdecaf_1_1io_1_1_flushable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Flushable</name>
      <anchorfile>classdecaf_1_1io_1_1_flushable.html</anchorfile>
      <anchor>a4fa5845fd5a3eba2e57a1149c2d68ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1io_1_1_flushable.html</anchorfile>
      <anchor>a9a0de25af4fc4f647ce2d659ff4c9d86</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::InputStream</name>
    <filename>classdecaf_1_1io_1_1_input_stream.html</filename>
    <base>decaf::io::Closeable</base>
    <base virtualness="virtual">decaf::util::concurrent::Synchronizable</base>
    <member kind="function">
      <type></type>
      <name>InputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>ac5f92ed522890848fc5d080c2584e740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>aee74acb88e24c75b9b1ba1db27083562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a668416594975ab3b84e28450832fd1aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a4364fea883a343596df37e992e9f7977</anchor>
      <arglist>(int readLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a9aac83307fee664c0faa397d2a9a835a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a04e316403bac2ae826cb5d387bb4b6bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>abd58067dcb828eae1b1c71550481011b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>afb989ed43f6fa223d26886c37a27336a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a33e2785f919cb99ac2919e303fcb8fc9</anchor>
      <arglist>(unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>aa87ab8acf14308f9f2d71c136404ed5a</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a4e9ec7e4e17195eb2f2d0326f07152bd</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>aee3e6e61f4cc76a63f5661ff8df2ad98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a40e8181e868022abe611b9ae520a55b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a2a30ce9b63fbac4b14b1363b66003fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>aa188a658fe93f718982f8d1d2d24c826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a7e3ac5ea252dd5866306a07acfdb464e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a9051e49152c0473bb3fedcf643c6fd7c</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a19c9a4c8db481bed73e7dc2708f39936</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a6d728d0e9f83b2398ad585a5c097edba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>ab09a9b0db771414ba69922bf216edeb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a6ffe401a9e727d9b15fbefa543a02c06</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArray</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a3200d99c001f9f7116d94392deaed591</anchor>
      <arglist>(unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream.html</anchorfile>
      <anchor>a2a7ec663798f4bf9f29b031a11ae7513</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::InputStreamReader</name>
    <filename>classdecaf_1_1io_1_1_input_stream_reader.html</filename>
    <base>decaf::io::Reader</base>
    <member kind="function">
      <type></type>
      <name>InputStreamReader</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream_reader.html</anchorfile>
      <anchor>a29aa0e7b39c608ac3f0e3f4927876b0b</anchor>
      <arglist>(InputStream *stream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputStreamReader</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream_reader.html</anchorfile>
      <anchor>a741594584f8d5f7053dc5dbfd82aefd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream_reader.html</anchorfile>
      <anchor>ac3761ce2aae2f4c87f4ce7788ce8834d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream_reader.html</anchorfile>
      <anchor>af30b72453b8a41344eb8e2bc725c1094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream_reader.html</anchorfile>
      <anchor>a7b0bcfde52821f60cc4bb947f6ff36c7</anchor>
      <arglist>(char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkClosed</name>
      <anchorfile>classdecaf_1_1io_1_1_input_stream_reader.html</anchorfile>
      <anchor>a5130eb87792e47f8495360b660553e31</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::InterruptedIOException</name>
    <filename>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>abe1ce29c8bbff9c7a6619846b7df1821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>aa13f8a3231adafd370ced577d6e16806</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>a2615591e0d1623b4d264f12bde441ef5</anchor>
      <arglist>(const InterruptedIOException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>a8a5e0cd9ff66ed62f5df960aa724f4c6</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>a00c6a1daede655593dba8376d1ffbb98</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>a9b68cd7c81fa929900e62ddc9b9bf109</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterruptedIOException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>af8c07701d8733aed7c75e2138d435b99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterruptedIOException</name>
      <anchorfile>classdecaf_1_1io_1_1_interrupted_i_o_exception.html</anchorfile>
      <anchor>ac0542f2fad9ad37709580727d1fd6ce9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::IOException</name>
    <filename>classdecaf_1_1io_1_1_i_o_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a82b04c131c347a28cedcf7ab13d9e15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a5fef205d97b190a903d486beb0a7e251</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a7e03564e828f0c6f1e919669ea6f3ca9</anchor>
      <arglist>(const IOException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a9320ffbdc43a2e64723cbb8d3d0e72b0</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>ad7628c49b65dde9f135ad3a4b37e1061</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a7cbb78d7811e4cb7ae012e6627670c0d</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IOException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a106000a6c06bc588d7aa396e214871b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOException</name>
      <anchorfile>classdecaf_1_1io_1_1_i_o_exception.html</anchorfile>
      <anchor>a6511f9116fd7b609c3e93ad78ae137d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::OutputStream</name>
    <filename>classdecaf_1_1io_1_1_output_stream.html</filename>
    <base>decaf::io::Closeable</base>
    <base>decaf::io::Flushable</base>
    <base>decaf::util::concurrent::Synchronizable</base>
    <member kind="function">
      <type></type>
      <name>OutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a1032a87fd5ed73effcfc3583b4d0c490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a133fca690867cd9d32b6930271f1dbbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>aaf975795a49a26ca7ae6049d8db9232c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>ae246f2a224f69bd07c9890d1e41b3bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>aa6e3b6b4bfbefd6343115016b78bac8e</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a85d9ba1ee5b48cff0a6e32074e73c318</anchor>
      <arglist>(const unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a39dd765c9ec2c08aff9c9c87f6960fe2</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>ae05f820b252abdc17628001dc033bdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>af42ff89ae05ce053be130491a4f83d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>ac5be519bfa350a1c8b9299aa940e4a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a5ea56220d04daf11401cc96f4027f58f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>ac5853b2d238b0d9bdf1bc5a3ad896cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>afcd1012716236638ee41575adf9c98b6</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a37da6d64defd1b604d4e76302a8464b5</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>ab8dd6da79185b3293dad0b30eebb9c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a52e7ec3b4e9de4be7c05dc6218be0cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a7f2f5721bce03b770ee093ba42e5945d</anchor>
      <arglist>(unsigned char value)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>a19e589311abe210320cadab80e7a1d6e</anchor>
      <arglist>(const unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream.html</anchorfile>
      <anchor>ab950ea4559347115c2c432fe44801586</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::OutputStreamWriter</name>
    <filename>classdecaf_1_1io_1_1_output_stream_writer.html</filename>
    <base>decaf::io::Writer</base>
    <member kind="function">
      <type></type>
      <name>OutputStreamWriter</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream_writer.html</anchorfile>
      <anchor>ab2c87b14e1861b4243298dc850c1c6c1</anchor>
      <arglist>(OutputStream *stream, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputStreamWriter</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream_writer.html</anchorfile>
      <anchor>a0be5980144bd7adb84e6174a21d4ff19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream_writer.html</anchorfile>
      <anchor>a561716de202106563d3deb0d8aad6af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream_writer.html</anchorfile>
      <anchor>a59956f351743a2815bc8ca4f86cdde43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream_writer.html</anchorfile>
      <anchor>a442ea61669c0fe0f6c90ac4e6e272b79</anchor>
      <arglist>(const char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkClosed</name>
      <anchorfile>classdecaf_1_1io_1_1_output_stream_writer.html</anchorfile>
      <anchor>a2ab5aaa6f76dfb9a1a9cab793670fb0c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::PushbackInputStream</name>
    <filename>classdecaf_1_1io_1_1_pushback_input_stream.html</filename>
    <base>decaf::io::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>PushbackInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>a69ad518e756d5e5f12d96d149b5f5333</anchor>
      <arglist>(InputStream *stream, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PushbackInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>aee78ced8328808a90a7181c6fe84dab4</anchor>
      <arglist>(InputStream *stream, int bufSize, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PushbackInputStream</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>a06e609c3cdb513433956e3d6b382f974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unread</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>ad0df7ad2fa24039fff2ef0e92306ee94</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unread</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>ac91c80655afd3c56b115d211511f2170</anchor>
      <arglist>(const unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unread</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>aadc417c872dd8be27ea8591a69b47e00</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>a718a36cfaba533a0468eaa134187a6cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>ad9ea3573fa4c51ce2bfa2f1e713afd91</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>ae27c520cef2e1e9c283172de24d73895</anchor>
      <arglist>(int readLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>a62f7b0c6d3b160b0f3eea24ba95a8126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>a32302aef0482f65559cbdc8f2e465e3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>a80e2754c1b93abb9395c44ea5f3f475e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_pushback_input_stream.html</anchorfile>
      <anchor>ab447bd803236c45e3bd9ead8edc8baa7</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::Reader</name>
    <filename>classdecaf_1_1io_1_1_reader.html</filename>
    <base virtualness="virtual">decaf::io::Closeable</base>
    <base virtualness="virtual">decaf::lang::Readable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Reader</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>ab18d5bfd029bbf2f32efcc076c2955cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a0986786ae820978e85ebee158246a1cf</anchor>
      <arglist>(int readAheadLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a4764064b697242507651ebf315a51769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ready</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>adced062bb05b8fda6135b758d7d5a7b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a88d7f5979a9c7667b67069c8143a5dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>aa20ec9da610bebf9a6f1a8baa09913ed</anchor>
      <arglist>(long long count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a9921c2da930437ecbc78f47375a3206c</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a54133df4e8c5dad0b753ad647d9465d1</anchor>
      <arglist>(char *buffer, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a0d9b56fe4bb699dc2e6eca5395cb9096</anchor>
      <arglist>(char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a6f54e78e0608cc32e5b9ae6d25ff2c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>af1cb167484622e0a2bc0eeb4925c97e6</anchor>
      <arglist>(decaf::nio::CharBuffer *charBuffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Reader</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a9823806550b9b7b5c8eb5ed5fb108fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>abca724b3a41488a43bf5821c223a7a26</anchor>
      <arglist>(char *buffer, int size, int offset, int length)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadVector</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a54f39f233d5e2194b2d5f08dc7148ddb</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArray</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a64a545646768de61b271092fec9a14b8</anchor>
      <arglist>(char *buffer, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadChar</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a66813828c32063bef272cb1da3c8f9a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadCharBuffer</name>
      <anchorfile>classdecaf_1_1io_1_1_reader.html</anchorfile>
      <anchor>a65bf3294cc4632b5e11f1bb87e0967e0</anchor>
      <arglist>(decaf::nio::CharBuffer *charBuffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::UnsupportedEncodingException</name>
    <filename>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a7a5b35207240bf38fea3a62916406611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a749497b8b9f25052cdf0b33b0b781775</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a409aae45884ec06832516389c6b85be3</anchor>
      <arglist>(const UnsupportedEncodingException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a7d42f93b3e5aea018ebcb83491a8b63e</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a9a3638cfc09056658c7e125efe258c08</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a774bea37fd12c2fa3d0710d397297a22</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnsupportedEncodingException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>ab547b35ab0f5e44da7f931e1a22536a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnsupportedEncodingException</name>
      <anchorfile>classdecaf_1_1io_1_1_unsupported_encoding_exception.html</anchorfile>
      <anchor>a95978ba3fb55b5d4acd192e7d64ee972</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::UTFDataFormatException</name>
    <filename>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a07eadac37381482560d9a794151ad38b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a4d095d64085994a70e5f8c3132474a51</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a9c9bd2adf4a3d53f077d308e491b816a</anchor>
      <arglist>(const UTFDataFormatException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a9a55a012a32a0965ecd81f5e875a809f</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a6949cf2115dc5b176bfe8f6553f84694</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a9fc705251e222eb10aeb7946629b2f8d</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UTFDataFormatException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a791f4d22cf91b2ae02b65a5b9ac05563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UTFDataFormatException</name>
      <anchorfile>classdecaf_1_1io_1_1_u_t_f_data_format_exception.html</anchorfile>
      <anchor>a0f7d837a74032301b1b61cdd01573bc7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::io::Writer</name>
    <filename>classdecaf_1_1io_1_1_writer.html</filename>
    <base>decaf::io::Closeable</base>
    <base>decaf::io::Flushable</base>
    <base>decaf::lang::Appendable</base>
    <member kind="function">
      <type></type>
      <name>Writer</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a604cb71524d41bdc5158662719fffd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Writer</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a52dd808b5210149cd539346fd72a0d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a82354df9ddc67b2b03d1f9aacea8c8c1</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a489509f9805d8a2bd2495db35d1a5c1b</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a2ec6be80a2906d225107249821cceffc</anchor>
      <arglist>(const char *buffer, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a59b3c569485ced57e3d988dc993eebad</anchor>
      <arglist>(const char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>ac758ca80cf2b64b7d515ced005501ed1</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>ac3497dec72e9476685eedfe789e46bdc</anchor>
      <arglist>(const std::string &amp;str, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Appendable &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a92b85ed29de96a53b1e9c3828483654c</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Appendable &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>afc5425ef9eaccf644ed05955461e7ed0</anchor>
      <arglist>(const decaf::lang::CharSequence *csq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::Appendable &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a8a1b7f4632b95e87bf23d7ecf8826647</anchor>
      <arglist>(const decaf::lang::CharSequence *csq, int start, int end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>ac7189f9260f518656b90f9aa4d8cbe64</anchor>
      <arglist>(const char *buffer, int size, int offset, int length)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteChar</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>ad93bb6cec828bade6eaee2e9b523468a</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteVector</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a573c76461fc979631ac875e8d8e1ecec</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArray</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a71958d7b805466cdae173ce2429ec21d</anchor>
      <arglist>(const char *buffer, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteString</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a4499766d70e39313a583bd13b27285b4</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteStringBounded</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>acae76954225cb9d0a883bcc0fa66712a</anchor>
      <arglist>(const std::string &amp;str, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual decaf::lang::Appendable &amp;</type>
      <name>doAppendChar</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a2c5729034e8ec8585b7931d5c58b4a1d</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual decaf::lang::Appendable &amp;</type>
      <name>doAppendCharSequence</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>af910d71ae8da5b8e6a343dab3e75617a</anchor>
      <arglist>(const decaf::lang::CharSequence *csq)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual decaf::lang::Appendable &amp;</type>
      <name>doAppendCharSequenceStartEnd</name>
      <anchorfile>classdecaf_1_1io_1_1_writer.html</anchorfile>
      <anchor>a0164f5019f261e15aa75ee7e96d13d0a</anchor>
      <arglist>(const decaf::lang::CharSequence *csq, int start, int end)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::lang</name>
    <filename>namespacedecaf_1_1lang.html</filename>
    <namespace>decaf::lang::exceptions</namespace>
    <class kind="class">decaf::lang::Appendable</class>
    <class kind="class">decaf::lang::ArrayPointer</class>
    <class kind="class">decaf::lang::ArrayPointerComparator</class>
    <class kind="class">decaf::lang::Boolean</class>
    <class kind="class">decaf::lang::Byte</class>
    <class kind="class">decaf::lang::Character</class>
    <class kind="class">decaf::lang::CharSequence</class>
    <class kind="class">decaf::lang::Comparable</class>
    <class kind="class">decaf::lang::Double</class>
    <class kind="class">decaf::lang::Exception</class>
    <class kind="class">decaf::lang::Float</class>
    <class kind="class">decaf::lang::Integer</class>
    <class kind="class">decaf::lang::Iterable</class>
    <class kind="class">decaf::lang::Long</class>
    <class kind="class">decaf::lang::Math</class>
    <class kind="class">decaf::lang::Number</class>
    <class kind="struct">decaf::lang::STATIC_CAST_TOKEN</class>
    <class kind="struct">decaf::lang::DYNAMIC_CAST_TOKEN</class>
    <class kind="class">decaf::lang::Pointer</class>
    <class kind="class">decaf::lang::PointerComparator</class>
    <class kind="class">decaf::lang::Readable</class>
    <class kind="class">decaf::lang::Runnable</class>
    <class kind="class">decaf::lang::Runtime</class>
    <class kind="class">decaf::lang::Short</class>
    <class kind="class">decaf::lang::String</class>
    <class kind="class">decaf::lang::System</class>
    <class kind="class">decaf::lang::Thread</class>
    <class kind="class">decaf::lang::ThreadGroup</class>
    <class kind="class">decaf::lang::Throwable</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>aaeafb88074719fdfd5f6a73ca4dfcaeb</anchor>
      <arglist>(const ArrayPointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>afa2ea2197beb3907e9e5af6b78364566</anchor>
      <arglist>(const U *left, const ArrayPointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>aed87f073c88933900a27cfdafe391fa8</anchor>
      <arglist>(const ArrayPointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>a4beb2928cc4630c7cedac0ecba626129</anchor>
      <arglist>(const U *left, const ArrayPointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>ad566cbbfbf88ab97528128f2290b8c6e</anchor>
      <arglist>(const Pointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>ae7305732b06513b5508ec14569b3729f</anchor>
      <arglist>(const U *left, const Pointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>a06a44db2c048f0eaca700e5a41073e89</anchor>
      <arglist>(const Pointer&lt; T, R &gt; &amp;left, const U *right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacedecaf_1_1lang.html</anchorfile>
      <anchor>a41e1e68798eeb0c41a9efa846121cc24</anchor>
      <arglist>(const U *left, const Pointer&lt; T, R &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Appendable</name>
    <filename>classdecaf_1_1lang_1_1_appendable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Appendable</name>
      <anchorfile>classdecaf_1_1lang_1_1_appendable.html</anchorfile>
      <anchor>a728fe23982e7f78aa8cd78695ac65a09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Appendable &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1lang_1_1_appendable.html</anchorfile>
      <anchor>a56085fee6db57f39bc8b11bac6fadd5d</anchor>
      <arglist>(char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Appendable &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1lang_1_1_appendable.html</anchorfile>
      <anchor>a48fe55e54114d4540e1fa849bc6129b8</anchor>
      <arglist>(const CharSequence *csq)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Appendable &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1lang_1_1_appendable.html</anchorfile>
      <anchor>a1e1e59babfdfb43df4b68a46f6ed15da</anchor>
      <arglist>(const CharSequence *csq, int start, int end)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::ArrayPointer</name>
    <filename>classdecaf_1_1lang_1_1_array_pointer.html</filename>
    <templarg>T</templarg>
    <templarg>REFCOUNTER</templarg>
    <class kind="struct">decaf::lang::ArrayPointer::ArrayData</class>
    <member kind="typedef">
      <type>T *</type>
      <name>PointerType</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a6757d0fb15a239d53a19a6b162c2bad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>ReferenceType</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>afe0a40bc8e5fd392fbcd315b35c65dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>ConstReferenceType</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a7a0cf85c453b3a7dbbe06a2edc142a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REFCOUNTER</type>
      <name>CounterType</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a5596608cab9c331e85706146faa24b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayPointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a6011d5fa339856a420a61167823587d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayPointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>aa9ad91e87313eb655585dc0c78464bae</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayPointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>aeced701b2d05f41ab580d511a6077fa8</anchor>
      <arglist>(int size, const T &amp;fillWith)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayPointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>abbdde07c3ddb70accaeaa40faeb93382</anchor>
      <arglist>(const PointerType value, int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayPointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>ac07012b90c09336bfe59aab2ccf00fd2</anchor>
      <arglist>(const ArrayPointer &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArrayPointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>ac4bd0fe2b5e0c5225487910b5ea16886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a21ee37584b3749f70e76bdbd70b2eba3</anchor>
      <arglist>(T *value, int size=0)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>release</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a8b8ea3b54df4136ca0df53eb8d876f49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointerType</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a3b2ad146dcc86f913118eea052a83555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>aef250fd7bc5c384854a5229587b940b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a08a4cde6739e5586bc347a25e847bfde</anchor>
      <arglist>(ArrayPointer &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ArrayPointer</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a883b994fce7d7161c77a0ee00c7e016e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a5a222a0c185f79f7200da4a5a53709f1</anchor>
      <arglist>(const ArrayPointer &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>ArrayPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a4eae9fb71fabe45cefb5210489df6953</anchor>
      <arglist>(const ArrayPointer&lt; T1, R1 &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceType</type>
      <name>operator[]</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a484bcbf8ce80afa63cbc9a6c9dcedac9</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>ConstReferenceType</type>
      <name>operator[]</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a95ae65aa64239bdbc6892f38a05599fc</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a964b9cbb994599ea731b5528cb8648ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a7d6314637c482dcc5347aa4c43e76988</anchor>
      <arglist>(const ArrayPointer&lt; T1, R1 &gt; &amp;right) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a77c78a26f007dcdb8cc727758f4d6150</anchor>
      <arglist>(const ArrayPointer&lt; T1, R1 &gt; &amp;right) const </arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a73e387fe0cf24728856029079d8f3243</anchor>
      <arglist>(const ArrayPointer &amp;left, const T *right)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a793abe4e5a1f782c015e52a67dbe0885</anchor>
      <arglist>(const T *left, const ArrayPointer &amp;right)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a53dd17bdd0849a005b21cdeb7dcb89c1</anchor>
      <arglist>(const ArrayPointer &amp;left, const T *right)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer.html</anchorfile>
      <anchor>a48d41881242897b50cda9750f5750e52</anchor>
      <arglist>(const T *left, const ArrayPointer &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::ArrayPointerComparator</name>
    <filename>classdecaf_1_1lang_1_1_array_pointer_comparator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Comparator&lt; ArrayPointer&lt; T, R &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArrayPointerComparator</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer_comparator.html</anchorfile>
      <anchor>abcfe663017045ffc4711d343cc7f6b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer_comparator.html</anchorfile>
      <anchor>afa4fed35261293641fa045fb6b990b28</anchor>
      <arglist>(const ArrayPointer&lt; T, R &gt; &amp;left, const ArrayPointer&lt; T, R &gt; &amp;right) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classdecaf_1_1lang_1_1_array_pointer_comparator.html</anchorfile>
      <anchor>a4dc84a0f52e977092ec22ea8d5fba686</anchor>
      <arglist>(const ArrayPointer&lt; T, R &gt; &amp;left, const ArrayPointer&lt; T, R &gt; &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Boolean</name>
    <filename>classdecaf_1_1lang_1_1_boolean.html</filename>
    <base>Comparable&lt; Boolean &gt;</base>
    <base>Comparable&lt; bool &gt;</base>
    <member kind="function">
      <type></type>
      <name>Boolean</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a9cdf2a6c084697df93897f0d57999c31</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Boolean</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>ab53b0a93f86537152896f3912a825f4d</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Boolean</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>aa5d7213fc3f174d6aff5d79087b68371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>booleanValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a908d321aeeeacb15362560a59300c8cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>abe8be92cc442a0f29647200cf51ba5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a0abefca044b1f515adf5608c18d91580</anchor>
      <arglist>(const Boolean &amp;b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>acf2535cbf17dbfcd6f77f30d9d598055</anchor>
      <arglist>(const Boolean &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>ae9a8a4cc42e22e418787f715f51679cd</anchor>
      <arglist>(const Boolean &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>afd38ed06339a076ed13a42a846bf010a</anchor>
      <arglist>(const Boolean &amp;b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>ab1c5622b26a50eba2c9aeb4f088ac879</anchor>
      <arglist>(const bool &amp;b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>aca820edfa67711c20da88f7a8a2205ab</anchor>
      <arglist>(const bool &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a4fa79b16bd73790859714c2ad8760b2d</anchor>
      <arglist>(const bool &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>aeb01a95482a45bbe1f6d94b2f5b028cc</anchor>
      <arglist>(const bool &amp;b) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Boolean</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a831098a3a14764c770be907d00005825</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Boolean</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>adb86e5005e982a2276d3b9920532923b</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseBoolean</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a26073e282201f84e5074550b73612359</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a8ed366d79e72163aa488fcd11c28d4f0</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Boolean</type>
      <name>_FALSE</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>a43bc6e4e7dd92c94fb627647f3f6c6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Boolean</type>
      <name>_TRUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_boolean.html</anchorfile>
      <anchor>addc1c845457d1a408a8e67bd201b9983</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Byte</name>
    <filename>classdecaf_1_1lang_1_1_byte.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Byte &gt;</base>
    <base>Comparable&lt; unsigned char &gt;</base>
    <member kind="function">
      <type></type>
      <name>Byte</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a5725be60f7132c5d2bf3907933f5bb4e</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Byte</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a8d6c9de5280a53e0d300af9d1be348b4</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Byte</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a935500a73b1dafc88108db1850e0316b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a52de33cbb17c73c5b074b552cf188e28</anchor>
      <arglist>(const Byte &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a5de8b005bf4a9a1854c610bf3c8a156c</anchor>
      <arglist>(const Byte &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>ad50c3fe82759cfc6f46fe39a80854be6</anchor>
      <arglist>(const Byte &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a056382042974a1c96209b0e6b7cc6bef</anchor>
      <arglist>(const unsigned char &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>aa6ef7a65a4dce4c812cc26025c5e3fe9</anchor>
      <arglist>(const unsigned char &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>afbee89a7cad211d2dc43239de82610c4</anchor>
      <arglist>(const unsigned char &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>aeda241a0b346c30c6ce2e6180a465b0d</anchor>
      <arglist>(const Byte &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>aa9130258af25ee547615f0e727baceec</anchor>
      <arglist>(const unsigned char &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a1c2bb41175b061f2a9515ad842c946f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a25308c02080eb607da8bb43f3647f23b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a2bb939280ba035d4ed101b2e1f5c2c14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a029b9a04e7d314acc87eabf1646b499d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a923b763044152217c845099e66ba5c75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>aea7eb372f1409d23a21fba12455e140c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a1de91ef28885171159240b7d049021af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a92bc54964e27c59e66399b2eff0ebf53</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Byte</type>
      <name>decode</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>add371db664f94ab230a2e72f4b6f9909</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned char</type>
      <name>parseByte</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>ad9b3b244a83ff8fdae96636fabaa8fdf</anchor>
      <arglist>(const std::string &amp;s, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned char</type>
      <name>parseByte</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a903b2d2e91af9f1535dcaf5b644541ce</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Byte</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a173da8a34bfcef907170f5a291a560ad</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Byte</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a2478c5186ca182953f2dad1a6e075bdf</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Byte</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a49f036cac69df42cee7f38044a829853</anchor>
      <arglist>(const std::string &amp;value, int radix)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>aa69dc85bc842e5229bc465fce0f5c071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a70b3f56722f14dbf85a86e02adb1d794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_byte.html</anchorfile>
      <anchor>a0b0ad82f29cbac574aea4fd8b97342a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Character</name>
    <filename>classdecaf_1_1lang_1_1_character.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Character &gt;</base>
    <base>Comparable&lt; char &gt;</base>
    <member kind="function">
      <type></type>
      <name>Character</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>ab55612875131df42500770aeb3008347</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>adfff40c0d8d3f923651ce915395ce9bd</anchor>
      <arglist>(const Character &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a11c107cc964b1ca301a54eb3c320f2fe</anchor>
      <arglist>(const Character &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>af5b99c8261665602a21fcd27d1b50ad6</anchor>
      <arglist>(const Character &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a327c8fd53fe466a9e64dc7d6376475e6</anchor>
      <arglist>(const char &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a16565dca9c15b009d6eddb374eb75acf</anchor>
      <arglist>(const char &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a99c5379bb2fb1456360e90899773da55</anchor>
      <arglist>(const char &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>aa3a68733fabc01f80bc542f6cf9a9b44</anchor>
      <arglist>(const Character &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>aad853231ea7457125d4bef6ab542c5ab</anchor>
      <arglist>(const char &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a7c8ed3e0e8545a876e1994070c65dff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a894d5fb7787fa49ab5dfb527aa066e55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a66bf2a685f193dcfbbe4b2e28d0eccb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>ae8ae2aaa889175ac214a1b9f1bc595cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a5c653a2ce191ca390114f97f38b56c8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>aa8be0651d81be2b7e0cc7a79decb15d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a04143f822429ae8596d3e4ad56f3bdbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Character</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>ac43b33199eab21c575bced0c41a913b4</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWhitespace</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a96380993fef276f12108dd1cadfd40a5</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDigit</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a7763aa2d52dca1bcb6fd7c5e8b7d93e6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLowerCase</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a1cd1869eacc73b06d76aee151ee40cfe</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isUpperCase</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a82163e961b3e3ffec99a6538dd0fc959</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetter</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a5b4be04caa1b3e616272639b29179834</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLetterOrDigit</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a7c7b2d14120d2207bef3d85f92bb598a</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isISOControl</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a0bef516f7737e958ec52330ac7c95629</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>digit</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>aa08e2e7608996485098f13b28b8f3453</anchor>
      <arglist>(char c, int radix)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MIN_RADIX</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a3fb8df7e7d2b318e7a97f9b4e84b2ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAX_RADIX</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>af577731f3fd84d7e723954318062e8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a3134c74583bfe9e31e4aa7ce8c318775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>acc7fedec2b55228621cab6512e5f08ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_character.html</anchorfile>
      <anchor>a1e56024a1cfc905018fadc073486bf89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::CharSequence</name>
    <filename>classdecaf_1_1lang_1_1_char_sequence.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CharSequence</name>
      <anchorfile>classdecaf_1_1lang_1_1_char_sequence.html</anchorfile>
      <anchor>ae80097d18bb54b7be5023085776f3caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>length</name>
      <anchorfile>classdecaf_1_1lang_1_1_char_sequence.html</anchorfile>
      <anchor>a1d2b7f158d42ab0e19d76ac4ae610a8d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>charAt</name>
      <anchorfile>classdecaf_1_1lang_1_1_char_sequence.html</anchorfile>
      <anchor>a3b29878633c28d757a46184588959ee1</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharSequence *</type>
      <name>subSequence</name>
      <anchorfile>classdecaf_1_1lang_1_1_char_sequence.html</anchorfile>
      <anchor>acd88464dffe53cddcc736bcd785e8056</anchor>
      <arglist>(int start, int end) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_char_sequence.html</anchorfile>
      <anchor>a7c368537fb955f0c89aa7f329e32367b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Comparable</name>
    <filename>classdecaf_1_1lang_1_1_comparable.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Comparable</name>
      <anchorfile>classdecaf_1_1lang_1_1_comparable.html</anchorfile>
      <anchor>a4c6df497ab958b4c5d37cc665bad62e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_comparable.html</anchorfile>
      <anchor>a4b15bbd971c5a367ec645dcbe0f5828c</anchor>
      <arglist>(const T &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_comparable.html</anchorfile>
      <anchor>aade52c698a4a36f69c8fe4528e2c3f4f</anchor>
      <arglist>(const T &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_comparable.html</anchorfile>
      <anchor>aa75d69171dc24e84368f09d4b2b1fee3</anchor>
      <arglist>(const T &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_comparable.html</anchorfile>
      <anchor>aa46ee7417a04ad1868953202f919d63c</anchor>
      <arglist>(const T &amp;value) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Double</name>
    <filename>classdecaf_1_1lang_1_1_double.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Double &gt;</base>
    <base>Comparable&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>Double</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a2a2b6fb05205a84b8ee46e9bb32da14e</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Double</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a8768a8433c4df591970646a420b09ca7</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Double</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aeb4b3d7526ebbccf062e5c3b13981cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>ac9f58827f91516c377db73cfe10004c7</anchor>
      <arglist>(const Double &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>ae27188b3604a6f7a6ba9ccf6d3338412</anchor>
      <arglist>(const Double &amp;d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a96330df7246ca884297a7466c1c4d72b</anchor>
      <arglist>(const Double &amp;d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aa0dbaf0d3c0ab8454405fb827d2b2f2b</anchor>
      <arglist>(const Double &amp;d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a0376be88f1cf5bb19f5cd6c383f4bba0</anchor>
      <arglist>(const double &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aeacc5ef2ddf8f7c55910c6b765f918cf</anchor>
      <arglist>(const double &amp;d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a7e8537a0df831b8e639975c2bea8c0c0</anchor>
      <arglist>(const double &amp;d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aa388e67f31b278d499deb210d643c1b8</anchor>
      <arglist>(const double &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a8890a17057fee1f68846684f8576faf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aa47fd361d46c6774bfb7b40a29395fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a823ea7feabf99dff9b0af475b3a38b61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a79df7c6bb69406400a8035714b3ca4f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a3a11cf25a2dc6781f3337d3beb4806ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a374fa191e600beffb03b7e3a3e37d619</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aa55ca1d4033e053e157eb6889fa1525f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInfinite</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aff3a902525d0b67aa70e257307c49dec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a543f8dc020b264d45120e90c427700d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a9e73f40211d43ed21fa40c8e67d3b3f0</anchor>
      <arglist>(double d1, double d2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>doubleToLongBits</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>ada759e3b9f4cd4949ca3e48784e4c600</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>doubleToRawLongBits</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aa2e60f398e6eb8473b09e6b52cf18d23</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInfinite</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a814d6f8a4876a93d6eec0580add8a3de</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a2c0015a32b3640601beddfd6e116bed6</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>longBitsToDouble</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>af8dfa0a77f390663b8e9ebd94eeec441</anchor>
      <arglist>(long long bits)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseDouble</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a70737ad3c4bac2cac458c8d18bc76457</anchor>
      <arglist>(const std::string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toHexString</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a4caf451af25d26431451bcd69df3cf69</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a822a11cce245e6b804253fc4dac9c3eb</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Double</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a9abb1a287d6cfd5728e24ceb45276cbe</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Double</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a9425980a22233804a18699f7bd6b239c</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>aa13833d097f39045a8b9b2c2f66f8590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a1960c6289f04d15bb523b0fdebc78de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a1ddac931f9f95f73db33c627bd5198b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>NaN</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a0df4290a4b3f2193d4ea0dc638ecf323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>POSITIVE_INFINITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a240ecc1fbca2d21569dad2efd4440519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>NEGATIVE_INFINITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_double.html</anchorfile>
      <anchor>a21a11cc643afed1e9b1b2b0aaf844cd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Exception</name>
    <filename>classdecaf_1_1lang_1_1_exception.html</filename>
    <base>decaf::lang::Throwable</base>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a6d658dd71db224d214d90a6cecd517b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a987f9a3182b7a4bd432c70d6ee18bf60</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a09bca51dac53e32d2cbce20780a94a42</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a8d2e1cbd10cda3d0cf8e85f244bbda8f</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a9bc8af869168ca37e4af673366fc882d</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>adac961cbf9dc6901a9be96d47703757d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMessage</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>acbbf370829a55fce2b19378e17ce6cf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::exception *</type>
      <name>getCause</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a6b81e5a9d13412c4f563b9ac64106204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initCause</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a1ad76f0d5087158a97c7382701bb4112</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>ae659018b9ccef95053d3d4f95bb0b05b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a49aeb8af56bd6ecfcfc7259964278a47</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMark</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a0f9c93a1d783cf44e2c682eef4f054f7</anchor>
      <arglist>(const char *file, const int lineNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Exception *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>abc54c9ffd798904cb0c5df47fbeecaaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::pair&lt; std::string, int &gt; &gt;</type>
      <name>getStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>ac94fd8ce90a23233a20a51106e48103d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a4a494536d3cec6c8ba5640f2565acf38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a7e73e47f2b79fe5f4e8695104224ef8e</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStackTraceString</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a66e325d1270722bec4ebd5e92045e929</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Exception &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>abdfd2ea435414e3edd13a20676d3f726</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a831f8bbef661ee08a3f761d55052ba08</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; std::string, int &gt; &gt; &amp;trace)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buildMessage</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a5c8b67318565ca167354dd7d10aec456</anchor>
      <arglist>(const char *format, va_list &amp;vargs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>ab0c03d2ad65c3f5b6e14d40b223d4b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::exception *</type>
      <name>cause</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a0f15a2e2a8f39bbcf3594575f260e3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; std::string, int &gt; &gt;</type>
      <name>stackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_exception.html</anchorfile>
      <anchor>a0aef24a0ebd240887f8dfa60e7687d71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Float</name>
    <filename>classdecaf_1_1lang_1_1_float.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Float &gt;</base>
    <base>Comparable&lt; float &gt;</base>
    <member kind="function">
      <type></type>
      <name>Float</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a6a05f6d2ed5688b237a156f1811c124b</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Float</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a219b70fe1c5ccb084467d6f783d6221b</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Float</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a81de526f931a279bd79c56918a483ee6</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Float</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a1d53e039cab32d95dffe8b785050923d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ab618de5c39643b77809f4d85e968907a</anchor>
      <arglist>(const Float &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a987b43abff7a7e822c67abeea2b7de47</anchor>
      <arglist>(const Float &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>aea78326eef9b6569e24975f42da2d688</anchor>
      <arglist>(const Float &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ace0cb01709176543d2aae643c58d0328</anchor>
      <arglist>(const Float &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a53d059ca1fd6bb7255ee1a53066bef3d</anchor>
      <arglist>(const float &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a8ba024fe582d105a23dabed2d739bb40</anchor>
      <arglist>(const float &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a93dd2715675d4652bba265b58633e98f</anchor>
      <arglist>(const float &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a51c99e939305485111c9d9a109246a33</anchor>
      <arglist>(const float &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ad2c8a029b7a7d84e8bb47d9711266fde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a10e2b068de6c240114660dc25b39ec4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ab3df815551ed2b6223a284b88132735b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a65014727335c6923046910534e85fa81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ad09a4d7cc2ee67d4538026b5e747752a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>aa5933315e6e47c866b0f24cc0e8fd9ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a13fa8268de300c60fb068260d8c2875d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInfinite</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>aed62b54ce80000d5593fac436f2db12e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>afbacdaf079c5e38ff94383e4f526a7df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ab909fdcfce8dd351d5ddcb3983279031</anchor>
      <arglist>(float f1, float f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>floatToIntBits</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a8fcaa3add6d89eb6da3e73742f54c519</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>floatToRawIntBits</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>aefa2aa58905a9d7db5be51d299f54f73</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>intBitsToFloat</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a523f8c9ce9fa8306e68afdf9ad2839dc</anchor>
      <arglist>(int bits)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInfinite</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a5fdcfe44fec519272a6b26df978ae754</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a1dc9eb1aa1cad12a2310d68b0faf6f48</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>parseFloat</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a365c221c42a19bee0b87cf712edae083</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toHexString</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a51b42406da1689fc591b204e2629dff9</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>ae36ef638f67e533c36cb69808a58bc54</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Float</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a19b23fe59b9051ca65a60aa3efd5edeb</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Float</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a80ce25385727c94ad4c5c7395fd668d3</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>afeb8533f00850ea5659fc5d478d0d106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a6287f4c79eb693f4e9721915a4977d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>af9c2b8c239da2df9ad3657fbd52ef79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>NaN</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>aafc827a5d0995b09a993347b234bb7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>POSITIVE_INFINITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>af681b043d4c1812a5938585c463bde3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>NEGATIVE_INFINITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_float.html</anchorfile>
      <anchor>a7db7566181a1f356720ebad898553db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Integer</name>
    <filename>classdecaf_1_1lang_1_1_integer.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Integer &gt;</base>
    <base>Comparable&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>Integer</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a306fa5d8cc258966d4c8658ed175a403</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integer</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a28b80f0c986a0ab02c71b1cd49c142e6</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Integer</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a8ea2fc083d356079443c494a99022cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>ac42f6f7abe522e3936804231e5984842</anchor>
      <arglist>(const Integer &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a312674018f62953792e527c198893526</anchor>
      <arglist>(const Integer &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a5545f2b00780de528a317aea9899fd62</anchor>
      <arglist>(const Integer &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a4f45e9fe87d63c594850b67408393d62</anchor>
      <arglist>(const Integer &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a6f1048bcc2fc6cac1e1b5d288fbe2222</anchor>
      <arglist>(const int &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a080bb5ccdd2420fa9e516321880848bc</anchor>
      <arglist>(const int &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a2cfa735348cdfffffff5dd16e71e446d</anchor>
      <arglist>(const int &amp;i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a193f63fe3d878bd8e391c0ed444cc8a3</anchor>
      <arglist>(const int &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a948757b7dd35183c6d54de5259f33bdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a5aac2005a18aed901a6b8f4b6385a62d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>aea78559034d8b0964235d668f879a2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a182650bd7cffc263b2de3998e1109876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a980c1caf99299f4f734b2995d3a99e86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a036f5e939c0c70d4f858737ce652f7ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a6c4e6eadfa6ef6ad0e54a462c4f964f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>decode</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a596977034445153c1e7872f4692e19ec</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reverseBytes</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>af7e514b123141c00f7b379fcee06c7cb</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>reverse</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>af7e87992e9424acefd7c5326901f69af</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>parseInt</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a21d0d7bab4d9e5dfa51eacba82638e4d</anchor>
      <arglist>(const std::string &amp;s, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>parseInt</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>addd51694d1744690cd170e8081515a10</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a75d6d7d922d2f4ad17ab9207dec8bff1</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a157d58981d70d8d2486aec90149d082c</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a6db55f7b7216617581f92fa1d4c603bc</anchor>
      <arglist>(const std::string &amp;value, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>bitCount</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a3501cea34a17ec6c24398c3b852bc45e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a3647e505497e8258ad934c4a3d7b82dc</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>adf540376a97e65d69ce8224266a1315b</anchor>
      <arglist>(int value, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toHexString</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a7274279483773d7687e04ac9146e321d</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toOctalString</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a5989776b030ae427343d31361fcd96db</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toBinaryString</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a1298e15adbb5086af90fb9a8679a8969</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>highestOneBit</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>aa763bf09305d01e7d9772c316e0df392</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>lowestOneBit</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a738347a6cf83264f96302b8e10fbf92f</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numberOfLeadingZeros</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>ab09183158e880235c2036c664d5b21f7</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numberOfTrailingZeros</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a68825fc21c80371a2fbc32c5c52d5d98</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>rotateLeft</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a2df1c732c369ee0d0307bcf75f711cd5</anchor>
      <arglist>(int value, int distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>rotateRight</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>aec9b820d566c0f3083d38e42bd8e50a4</anchor>
      <arglist>(int value, int distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>signum</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a057b7cd0fc2cc8b21882074ec9e8658f</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>af8c622196f4e5789815c10c690208974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>a8f7626627f8935280ab1d0a0c38d69cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_integer.html</anchorfile>
      <anchor>af6aec1ada895206f7372ac126779459d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Iterable</name>
    <filename>classdecaf_1_1lang_1_1_iterable.html</filename>
    <templarg>E</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Iterable</name>
      <anchorfile>classdecaf_1_1lang_1_1_iterable.html</anchorfile>
      <anchor>a0160c9566db52065128d89022e84b4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1lang_1_1_iterable.html</anchorfile>
      <anchor>a1bf9dd78d7826b61fb59901e29d59857</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1lang_1_1_iterable.html</anchorfile>
      <anchor>a8df8d3e4976a76be399adea077c4edb2</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Long</name>
    <filename>classdecaf_1_1lang_1_1_long.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Long &gt;</base>
    <base>Comparable&lt; long long &gt;</base>
    <member kind="function">
      <type></type>
      <name>Long</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a6ef6e61246e1706ee1a19f51c77b489f</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Long</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a59196ebb7b6bd0c5d83014817b3c77c6</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Long</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a2aaac1d17165a3f649a6f986eb959adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a539ce758f77f09774c5ce95f6ad8a6bc</anchor>
      <arglist>(const Long &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a330e508945da9e29fbd5ddaeb64ccf40</anchor>
      <arglist>(const Long &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>ac80483784e63fa7d675b69b79976981b</anchor>
      <arglist>(const Long &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a96aa048d999975159c6dd70fcac74b62</anchor>
      <arglist>(const Long &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>ae27ec1898c67ffaf29e9317b06795f6e</anchor>
      <arglist>(const long long &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>ace873b6dd4d89688d5f3fc076ba77807</anchor>
      <arglist>(const long long &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a1b9e23edbe86ac0e7c6208578906f97b</anchor>
      <arglist>(const long long &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aa7c181719c8ae9a78024296e8263fa9f</anchor>
      <arglist>(const long long &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aa39a7563dd502c192c0bce5edd9595b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a989846713eb85c2054f9576c6ea263a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>adfe9412225b2e30d18d736dda8957282</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a8b5d5bef9966cdd6a949e89ef7d52ac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a1df269fb1c7224d699fc963d8e1ed5ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>abdb9f10ef88c268523b9132b2a5e35a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a648a9c4f5d4cb47f81e665d467fdf329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>bitCount</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>ae8bdd307676397ea05b0c3db549ae595</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Long</type>
      <name>decode</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aebaf968cd87833c40fc9c199ae3b852a</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>highestOneBit</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a4fce6bf122c34eff1afa3cc6cf3cb645</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>lowestOneBit</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aa72d7e5c21991e6f1cc748a8634c7e57</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numberOfLeadingZeros</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a163dcf2a63ba3e7e0b3373c760deb6d0</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numberOfTrailingZeros</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a21668febd7659e01e2a4659e539b6558</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>parseLong</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a9f8936c2907f0f16b1846d97358cc3da</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>parseLong</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>abf087caf3517347d836633fbdddb4be2</anchor>
      <arglist>(const std::string &amp;value, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>reverseBytes</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>abcc04b479cbe8d6d1c692d128715a0c8</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>reverse</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a2e11ceeecf9ce6d7c672de9ef68e3688</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>rotateLeft</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aff374363958d004ba5dbdd9c2e0e2384</anchor>
      <arglist>(long long value, int distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>rotateRight</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a707fa054cfd4c8cda335f44e30a09f6f</anchor>
      <arglist>(long long value, int distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>signum</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a43879f6f37695cd42d2d1aa050f28bac</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>ae0a0f88dc1fb6e0cbcbd11750e280e41</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>ad45ffac96a00501a923f400c96a812d5</anchor>
      <arglist>(long long value, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toHexString</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>adab61bbaddf2882b29f0e287fa58009b</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toOctalString</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aafceaa14754eb010ee99b0a5854247b4</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toBinaryString</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a3c0d4977b2641a321e29ee64b4e2289f</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Long</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>adf23c4deeca264b16ba277a29c2b1917</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Long</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a4bd5be38aea1875713ca9f80ad43a5ad</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Long</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a564f52e95efc1557dd4e6168894f6117</anchor>
      <arglist>(const std::string &amp;value, int radix)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a17d6dd5255e1d32ce3ccf1aeb42d06ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>aff3047aaf7ddb19264cfe9b835636e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long long</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_long.html</anchorfile>
      <anchor>a5a2836ab411da0608d11c837dfc918ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Math</name>
    <filename>classdecaf_1_1lang_1_1_math.html</filename>
    <member kind="function">
      <type></type>
      <name>Math</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a36c08010edd49a8148bb1563aca8a603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Math</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a934b8e751831a6a304928091960318c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>abs</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a441ea0232ca90f4e6b2e899495990874</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>abs</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a347c1350e800a0681479da93e441964b</anchor>
      <arglist>(long long value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>abs</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>adcc3bd1737ea151ea721eede09a77a7a</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>abs</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>aeb1a3b02f2ee7ea9b950a92dd5cc5b4d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>sqrt</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a3bad6db8d75343ef64d7ce27872ebc3d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>pow</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a03bbcb09db0c11c0c8b18fecd7bb752b</anchor>
      <arglist>(double base, double exp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static short</type>
      <name>min</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a4af44b77c0bbbe6ab4dd8012f4886416</anchor>
      <arglist>(short a, short b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>min</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a350d344362632aacc5f272d31d944812</anchor>
      <arglist>(int a, int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>min</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>ae4007318328af5641612591ca63ff7b7</anchor>
      <arglist>(unsigned int a, unsigned int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>min</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a4f75cae11d537533d013c8d778776805</anchor>
      <arglist>(long long a, long long b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>min</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a73ca4121d7f01484b6f0bb08955f6b6d</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>min</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>aedff6a7dddbdc6755797fb83111bc5b4</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static short</type>
      <name>max</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a2f3fc8efe2b1d020f8223ac211255e32</anchor>
      <arglist>(short a, short b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>max</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>afbb7ca9bc63ed8c27af8b73a409df91d</anchor>
      <arglist>(int a, int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>max</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a92e985292570d52b71efd09d90a5b5a0</anchor>
      <arglist>(long long a, long long b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>max</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a40dcf45708d8c60cfa71b976941fce38</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a0c33919980c4da96c27fe0fc0df9e467</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>ceil</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a69c4960064b2dce8ea55b0e5ea809217</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>floor</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a5107533a8597245c6ab985405c9f8ea3</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a84f1d43cebf4061de499faa3d1ac6118</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>round</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a984336e06ed550a3f4d328dc069fac5c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>random</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a0482728c0f485adf5991c25759ea6f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>signum</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a740022118ab8d1be337713d105f3eeca</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>signum</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>ae63fc0bec632a61f9cce25e1f59b53dc</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>toRadians</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>aa549fbb561e55d324235146eb050eb21</anchor>
      <arglist>(double angdeg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>toDegrees</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>ad74a5fb836d29c0d71fcca07f0b7cd98</anchor>
      <arglist>(double angrad)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>E</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>a66870393c0374423cb033893c5a2cd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PI</name>
      <anchorfile>classdecaf_1_1lang_1_1_math.html</anchorfile>
      <anchor>acf2e71ba96860e9e14efeaa5f1d916d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Number</name>
    <filename>classdecaf_1_1lang_1_1_number.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Number</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>a4031b62166706d62bac4b66158c145f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>aa5657fc97aac5ede0fe1bea359311247</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>a3a921d1676b05ad09f5beddefce7c03c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>a4d0f8b6d5465c5571ae65545c76cd8b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>a98bfd01fb8f97aa63f22a21a88426805</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>a10ab4ff0c9cd5c3972aee15e002a5457</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_number.html</anchorfile>
      <anchor>a6c663199afc634d7bca4da55b78c020c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>decaf::lang::STATIC_CAST_TOKEN</name>
    <filename>structdecaf_1_1lang_1_1_s_t_a_t_i_c___c_a_s_t___t_o_k_e_n.html</filename>
  </compound>
  <compound kind="struct">
    <name>decaf::lang::DYNAMIC_CAST_TOKEN</name>
    <filename>structdecaf_1_1lang_1_1_d_y_n_a_m_i_c___c_a_s_t___t_o_k_e_n.html</filename>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Pointer</name>
    <filename>classdecaf_1_1lang_1_1_pointer.html</filename>
    <templarg>T</templarg>
    <templarg>REFCOUNTER</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>PointerType</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a22b5d52b7c8b9b31921a3e48c8196bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>ReferenceType</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a44a453bd81e34929c9c4483a4ed70217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REFCOUNTER</type>
      <name>CounterType</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a79580eea56341724f31432f23069b85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>abf587c9007f830eab3c3184c7306606e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a7ccf0c3f6e2e947e83dcb4db19bf9881</anchor>
      <arglist>(const PointerType value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a1809c2372ded54f9ad7d55a222ee2bf6</anchor>
      <arglist>(const Pointer &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>aede651faba07f2261619053e220f73be</anchor>
      <arglist>(const Pointer&lt; T1, R1 &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a983aaa0aaf4d3a44b7d1b1a7995d26fa</anchor>
      <arglist>(const Pointer&lt; T1, R1 &gt; &amp;value, const STATIC_CAST_TOKEN &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a7dabd2d98d47a42ede4d8330ab4719a8</anchor>
      <arglist>(const Pointer&lt; T1, R1 &gt; &amp;value, const DYNAMIC_CAST_TOKEN &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Pointer</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>af707b604ed15d7a4275f89ebdc35d298</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>aabc0584f50459bc766f653d6ec74cc7d</anchor>
      <arglist>(T *value)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>release</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>ac74131d93efc562477403ff32e389471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointerType</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a5833de119c2b224563e2730cfb9c06e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>afe3de97779cb9eaf827c01ab6ce7dc31</anchor>
      <arglist>(Pointer &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>ad30b08a18ad149cef92c13fa5c088fc4</anchor>
      <arglist>(const Pointer &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Pointer &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>afdf613612a71761df42fb61804e52fa8</anchor>
      <arglist>(const Pointer&lt; T1, R1 &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceType</type>
      <name>operator*</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a787436fd4a49284377f92251b89b7e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReferenceType</type>
      <name>operator*</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a7f20e4228568c02e272b11ad83a0e225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointerType</type>
      <name>operator-&gt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a41be756e3ba5a99e5b43e009bfeb8dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointerType</type>
      <name>operator-&gt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a93d03389ad1ae5707682fe1d65beae24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a7e5a333c89d83cf4d738c6782ab2bb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>acb5ccb60107af9cdd7e1005f64c59db3</anchor>
      <arglist>(const Pointer&lt; T1, R1 &gt; &amp;right) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>ac535feb087990026a3764441479e2e7d</anchor>
      <arglist>(const Pointer&lt; T1, R1 &gt; &amp;right) const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; T1, CounterType &gt;</type>
      <name>dynamicCast</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>ae45023d6743a39817a793df54d0cc5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; T1, CounterType &gt;</type>
      <name>staticCast</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a1ba067f97204913aa7d0a8bd835f6235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>ab5d93efe286f72639230b6ab42831543</anchor>
      <arglist>(const Pointer &amp;left, const T *right)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>aa9551b5acb538c51422310948760829d</anchor>
      <arglist>(const T *left, const Pointer &amp;right)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>ac7d02f188b1a69b539edfc0e1b3b4040</anchor>
      <arglist>(const Pointer &amp;left, const T *right)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer.html</anchorfile>
      <anchor>a2f18794d7f05fde07b908973c8c29247</anchor>
      <arglist>(const T *left, const Pointer &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::PointerComparator</name>
    <filename>classdecaf_1_1lang_1_1_pointer_comparator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Comparator&lt; Pointer&lt; T, R &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointerComparator</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer_comparator.html</anchorfile>
      <anchor>ac6c07c9d78ac26bce582bd30ad1fb16e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer_comparator.html</anchorfile>
      <anchor>acf6052a366783d891c8b01f0af17e7d2</anchor>
      <arglist>(const Pointer&lt; T, R &gt; &amp;left, const Pointer&lt; T, R &gt; &amp;right) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classdecaf_1_1lang_1_1_pointer_comparator.html</anchorfile>
      <anchor>aeaec1e141b4181b33eec8e859e70fa8f</anchor>
      <arglist>(const Pointer&lt; T, R &gt; &amp;left, const Pointer&lt; T, R &gt; &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Readable</name>
    <filename>classdecaf_1_1lang_1_1_readable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Readable</name>
      <anchorfile>classdecaf_1_1lang_1_1_readable.html</anchorfile>
      <anchor>a3cd293badeba90d721e31f032e98f12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1lang_1_1_readable.html</anchorfile>
      <anchor>a6665861061950b8bbe8768a5b2b8e332</anchor>
      <arglist>(decaf::nio::CharBuffer *charBuffer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Runnable</name>
    <filename>classdecaf_1_1lang_1_1_runnable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Runnable</name>
      <anchorfile>classdecaf_1_1lang_1_1_runnable.html</anchorfile>
      <anchor>af1117a326cf923023992e4423aadcf82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classdecaf_1_1lang_1_1_runnable.html</anchorfile>
      <anchor>a261b4f8200eb7bcfe8bc6bc2ee3e26fe</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Runtime</name>
    <filename>classdecaf_1_1lang_1_1_runtime.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Runtime</name>
      <anchorfile>classdecaf_1_1lang_1_1_runtime.html</anchorfile>
      <anchor>a7c4403bfc40ae83aa1c5d3612ba5561d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Runtime *</type>
      <name>getRuntime</name>
      <anchorfile>classdecaf_1_1lang_1_1_runtime.html</anchorfile>
      <anchor>abdbe5f8e2ed2cc16caa1faff7bf4cbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeRuntime</name>
      <anchorfile>classdecaf_1_1lang_1_1_runtime.html</anchorfile>
      <anchor>a9c792f2336e99bc28fbf491509428124</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeRuntime</name>
      <anchorfile>classdecaf_1_1lang_1_1_runtime.html</anchorfile>
      <anchor>aa40a18e06cd606daa9d257cb4a970bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdownRuntime</name>
      <anchorfile>classdecaf_1_1lang_1_1_runtime.html</anchorfile>
      <anchor>adcdb8a731deb76ff9beff808c50bf3dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Short</name>
    <filename>classdecaf_1_1lang_1_1_short.html</filename>
    <base>decaf::lang::Number</base>
    <base>Comparable&lt; Short &gt;</base>
    <base>Comparable&lt; short &gt;</base>
    <member kind="function">
      <type></type>
      <name>Short</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>afc0e6d3a7f95afe8e1ccb3c20844dedb</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Short</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a38f88b60be13aa4dfcd6a659040536a9</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Short</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a2f4a96ca6dfd907c4b44a51cdf9c304f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a42b95047dfb285abf33ce40bf1fbcc27</anchor>
      <arglist>(const Short &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>ac109f251a8ba77a3749d10f50671e1ff</anchor>
      <arglist>(const Short &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a8b4a5d37011880915b90c407b1567a3e</anchor>
      <arglist>(const Short &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a7bbf4ba078fbd699a2c88de0f03b0b59</anchor>
      <arglist>(const Short &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a947e47c3cf6eef8de735ffd7c724ecec</anchor>
      <arglist>(const short &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>adf3a04fd3d79d8ae41a9c6110ee5e7fd</anchor>
      <arglist>(const short &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>abd8cb2fbf1ef50b78a388dc82b54307b</anchor>
      <arglist>(const short &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a6bb5f1c262b366c8622ff0d5a0073511</anchor>
      <arglist>(const short &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>ad1aef7d2b46a7ad6031c758d26b58f41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a34abd0bff73b7e5f5ed0520e6996f025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>abcf9b0c7f9afc95dadc170763a8775fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>byteValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>aa39e8635aeae0c856bffe0037252da8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>shortValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a0c01e49fc1bbafa726effe2d28628fa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a58dfbe841379a58490a1d4009e539dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a23bf176087c2fde3c04c93d82c2c5a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>acf366c1f1d6e61bee2cf27bc8bba9fec</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Short</type>
      <name>decode</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a90acd2397167e84fa317b16b5a073be1</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static short</type>
      <name>reverseBytes</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a1edf4b237b8d7d268c97b3af7e9a7943</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static short</type>
      <name>parseShort</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>ae869023e443ebb1e02470dbe30fbc9a3</anchor>
      <arglist>(const std::string &amp;s, int radix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static short</type>
      <name>parseShort</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a0c130d0ff0245a98cef9df2afeec2ef8</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Short</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a417d6d69a2032c43837d91696d3104a1</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Short</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>afde0084db7bfc293c6fdaf343e22e4ef</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Short</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a2766c6a3bee1a67469ac66ba0d0434b8</anchor>
      <arglist>(const std::string &amp;value, int radix)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIZE</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a91b4ae6a62bc084ffc9cc38c09709570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>MAX_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>ae1a2c9982a734a4468dc43fa7a183ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>MIN_VALUE</name>
      <anchorfile>classdecaf_1_1lang_1_1_short.html</anchorfile>
      <anchor>a6ecebae8b23deded6a69faad49f6d711</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::String</name>
    <filename>classdecaf_1_1lang_1_1_string.html</filename>
    <base>decaf::lang::CharSequence</base>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a60dd6746eea92c36a26210f2e43f306b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>ab22be73485ce592cbe2d92e60ee173aa</anchor>
      <arglist>(const String &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>af1137e2d84f86f02308972464befa3e0</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>af8fb31828210be0b802fd8918165fef2</anchor>
      <arglist>(const char *array, int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a17159418ee2fe2a4e37cee92c0e3d1c8</anchor>
      <arglist>(const char *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~String</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>ae007c9d9c482c4a9a588605d51943987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a4fc52205fb1946506fd5b23ab672e548</anchor>
      <arglist>(const String &amp;)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a9713d677910fd6fa8bb237685bd70639</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>ab5a98c8ac775ee0e675e2e30eb81f521</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>length</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a57ec8a1f2c8177d08cae6ca786c3fc93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>charAt</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>af2e6a589957f96ff89b6c94e5f8cb95d</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharSequence *</type>
      <name>subSequence</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>aa381e1c0b159ee770338012d25e9b5c8</anchor>
      <arglist>(int start, int end) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a49bcecc150427d42b748fc078d834e7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a1d59f2dee0f12766d85c580664da9c5e</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a71adcd358624a734d17483d614e60057</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a902b8f5d5d7700c9ba25e301ece51c70</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>af7ab8e59cf20b6636175ac4945e3015a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>ad2d5c8e5039e159a08ff644b635e5dbb</anchor>
      <arglist>(short value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>a35936be59a35afe953d48d3445ca8ead</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1lang_1_1_string.html</anchorfile>
      <anchor>aef4c007a4c3d76c1ad36125673af9595</anchor>
      <arglist>(long long value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::System</name>
    <filename>classdecaf_1_1lang_1_1_system.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~System</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>abbbae9602f9d9f3ac6b0c51425580c9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a82e57928034dee339b531d23e60b36ae</anchor>
      <arglist>(const char *src, std::size_t srcPos, char *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a8cb28931c9ac406404f17d2bd9bdb89c</anchor>
      <arglist>(const unsigned char *src, std::size_t srcPos, unsigned char *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a9c4e96daf29a917a22f2a612a33120d8</anchor>
      <arglist>(const short *src, std::size_t srcPos, short *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>ace90caab7511d256ff78d0fd8f1ea4e3</anchor>
      <arglist>(const int *src, std::size_t srcPos, int *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a56064bfdb98971c231792d7087c317e7</anchor>
      <arglist>(const long long *src, std::size_t srcPos, long long *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a7bbb90b902bbdb524534135b6a2b297d</anchor>
      <arglist>(const float *src, std::size_t srcPos, float *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a80dbd47d034273838ce21fad5e3c24fa</anchor>
      <arglist>(const double *src, std::size_t srcPos, double *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>arraycopy</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a3de4d4ba5efd251c69a538a12d6f07a3</anchor>
      <arglist>(const E *src, std::size_t srcPos, E *dest, std::size_t destPos, std::size_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const util::Map&lt; std::string, std::string &gt; &amp;</type>
      <name>getenv</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>af3df67cc782bb4e229beef3ac9c8e095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getenv</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>ad42953af7a839b966d8b46c04d22107a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unsetenv</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>ad988e165fba1d00c52f02f32090da651</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setenv</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>ad37776706b6949d683bd09bb804fd93f</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>currentTimeMillis</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a8cd3b3fe49ee216d2b50b46e2fff0501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>nanoTime</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a6ccb96f0b300c03fbf790388bf47fa4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>availableProcessors</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>acf9ca1e67d1c2d03675f21603963d809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static decaf::util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a085f81dcaaa6e5d1f13800ef41e449db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getProperty</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a930df48305e376b11b8f222a997cbe8f</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getProperty</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>afcd9c0f67fa7f71468f387f44169869d</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;defaultValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>setProperty</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>adcbd6959ca64d17baac867a89c29eff9</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>clearProperty</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a7916afb01b7a8f7e3b0fb4a9c82bc7bc</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>System</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a1dfae32f98f001490d820b6bf2da18f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>decaf::lang::Runtime</name>
      <anchorfile>classdecaf_1_1lang_1_1_system.html</anchorfile>
      <anchor>a529ba491ffb55443becd36a939008222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Thread</name>
    <filename>classdecaf_1_1lang_1_1_thread.html</filename>
    <base>decaf::lang::Runnable</base>
    <class kind="class">decaf::lang::Thread::UncaughtExceptionHandler</class>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEW</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746ba03173f7231228e718c1048769b721067</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RUNNABLE</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746ba433cfce9ecb810027ff68c8ab445ed1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCKED</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746babc7c5bcdddeedc4d96284cec2f2d93ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITING</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746baa253bb121df10b78594e148b6ba225c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_WAITING</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746bad5d0ac8923bbbae78a77bc97ea13d8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEPING</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746baa6351356b1601aa26782c8bbbf13031d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TERMINATED</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a5ed73b0037b677da2e3e242c5587746ba9ff76f95d061f0cc29d0261d14449f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a53ebdc9d253c6e6814e9e19511284673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>aed960ce09835d1a4a0f433f88475e6b3</anchor>
      <arglist>(Runnable *task)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a63831c57edd376e135ccde395b38beb4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thread</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a18eb3691aa4a52477eb6a4d80e2ef6af</anchor>
      <arglist>(Runnable *task, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Thread</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>aea2de846cd72dba42585a8890ea93d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>ac98301bc120eebb85a06d804233ceee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>join</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a74067213e84fe41c40ed9760edf47c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>join</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>aff7550e656dabc8e7599c37e05f75ab4</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>join</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>abd1aaa5f6c05de61d71e51521166b967</anchor>
      <arglist>(long long millisecs, unsigned int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a215edb5f3cbb3e7b36ea15defb082093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a8c9825013d09308a9ae3fed9952e3b8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a7756e69f8a3d0cc874d151869eea8ef7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPriority</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>acbef122ce0d2ec4ed0de6a83e0091441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPriority</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a03986b5ca23b04457563483b38ad05b3</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDaemon</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a6216a7f61f5c7ca2ea65d3caec6c992e</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDaemon</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a16cd2d7f6eb58643dd6e466fbede56be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UncaughtExceptionHandler *</type>
      <name>getUncaughtExceptionHandler</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>af17230ff49eaf33fbff2caea147adc72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncaughtExceptionHandler</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a7a5db97ea6ca748a68d3bc8743f35720</anchor>
      <arglist>(UncaughtExceptionHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>afae6e8a6b8b8d10304a0cc6ef74ea449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlive</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a6a5b9d342ad8705bf3527de7aba025f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Thread::State</type>
      <name>getState</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>aaaa01e588f21b9761db378762365e750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sleep</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>aef95372ea57df4f3ad131a6187dc1096</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sleep</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a60c67fc78181312f32630b411aab7a18</anchor>
      <arglist>(long long millisecs, unsigned int nanos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yield</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>ae842a18e7f03eb8ae02c85214b0a652b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long long</type>
      <name>getId</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>ae6d67bf6ff7d413cb83480c29e9af050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>currentThread</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a705b5a7d5380adeb60e80f8d7e8a151a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MIN_PRIORITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a6d6229ec8ce125ab30cb73f6c8598734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NORM_PRIORITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>abd478b6ba594e5e633f4b9910322a0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAX_PRIORITY</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a519e56f0104d79cca7bd43e18af374a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>decaf::util::concurrent::locks::LockSupport</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a9fd6c72a1b0f17338a6f7598ef974b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>decaf::lang::Runtime</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread.html</anchorfile>
      <anchor>a529ba491ffb55443becd36a939008222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Thread::UncaughtExceptionHandler</name>
    <filename>classdecaf_1_1lang_1_1_thread_1_1_uncaught_exception_handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UncaughtExceptionHandler</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread_1_1_uncaught_exception_handler.html</anchorfile>
      <anchor>a0a87d7402b845586f30b67bd3a1af345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>uncaughtException</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread_1_1_uncaught_exception_handler.html</anchorfile>
      <anchor>a0f0b5cb8d5a4ff73890721ce115eeca3</anchor>
      <arglist>(const Thread *thread, const Throwable &amp;error)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::ThreadGroup</name>
    <filename>classdecaf_1_1lang_1_1_thread_group.html</filename>
    <member kind="function">
      <type></type>
      <name>ThreadGroup</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread_group.html</anchorfile>
      <anchor>a53d79c5c2928daf4e183cfb5cb0dc892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadGroup</name>
      <anchorfile>classdecaf_1_1lang_1_1_thread_group.html</anchorfile>
      <anchor>ad2a0f376d9b111f718bc57b57f381958</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::Throwable</name>
    <filename>classdecaf_1_1lang_1_1_throwable.html</filename>
    <member kind="function">
      <type></type>
      <name>Throwable</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>acedfda2c8a781398541d105cac034b77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Throwable</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a67576ed6a886dca5782011775d8f517a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getMessage</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>ab569502f7c70a583556eb04cea8c2d20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::exception *</type>
      <name>getCause</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a1286edafee2b4262e1a2819a3e0fc48e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initCause</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a60f0f1822617619db9423057583b7eab</anchor>
      <arglist>(const std::exception *cause)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMark</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a3445b7ea1e088bc0f92b724c12161d98</anchor>
      <arglist>(const char *file, const int lineNumber)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Throwable *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a28529f616254877be2da2598f24a8f7f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::pair&lt; std::string, int &gt; &gt;</type>
      <name>getStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a867032c271f7dd8b666d879325524859</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>aa0dc5be991dda0644c6f6e25043b94e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printStackTrace</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>ad3aed84b9d6d29c6a5e11e97c8dc847a</anchor>
      <arglist>(std::ostream &amp;stream) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getStackTraceString</name>
      <anchorfile>classdecaf_1_1lang_1_1_throwable.html</anchorfile>
      <anchor>a13234c5ce49f4b80b1a60b15595b4046</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::lang::exceptions</name>
    <filename>namespacedecaf_1_1lang_1_1exceptions.html</filename>
    <class kind="class">decaf::lang::exceptions::ClassCastException</class>
    <class kind="class">decaf::lang::exceptions::IllegalArgumentException</class>
    <class kind="class">decaf::lang::exceptions::IllegalMonitorStateException</class>
    <class kind="class">decaf::lang::exceptions::IllegalStateException</class>
    <class kind="class">decaf::lang::exceptions::IllegalThreadStateException</class>
    <class kind="class">decaf::lang::exceptions::IndexOutOfBoundsException</class>
    <class kind="class">decaf::lang::exceptions::InterruptedException</class>
    <class kind="class">decaf::lang::exceptions::InvalidStateException</class>
    <class kind="class">decaf::lang::exceptions::NullPointerException</class>
    <class kind="class">decaf::lang::exceptions::NumberFormatException</class>
    <class kind="class">decaf::lang::exceptions::RuntimeException</class>
    <class kind="class">decaf::lang::exceptions::UnsupportedOperationException</class>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::ClassCastException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a477ab4efc26f4269246ef1176601ca0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a87fc111504c367ad7b4efe44771c3293</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a194f07a98eacf06e770b1bbc178cb678</anchor>
      <arglist>(const ClassCastException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a0c3e5fd88236674735bdd2be589672c6</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a5c2a561d930797b67f5dec4aebf4e92b</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a76cb0e87dcb74fe8b794b42d6cc023dd</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassCastException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>a5b1643bbc3f24426b722c256f92163a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClassCastException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_class_cast_exception.html</anchorfile>
      <anchor>ac59ddbc404f382b9ea2a78658478af2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::IllegalArgumentException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>af9304ef3ceb07ae564e7d922cdb388ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>a231a440f8b3c920c311822dfd19954c9</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>ae03382f5f79476972ce7e3bf76874768</anchor>
      <arglist>(const IllegalArgumentException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>ab95318a07dbddd3b7d54b43c92269e1f</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>a08914c15f25f64f6ef06cec6e82001e2</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>abaf5f5359038647b095c00ee501b44be</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IllegalArgumentException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>a035509f5600f832850315fd291d5434f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IllegalArgumentException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_argument_exception.html</anchorfile>
      <anchor>aca74fa7ff765855871b6f23220f9e175</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::IllegalMonitorStateException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>a155258336b1ed0dc20abb64ce4d3d358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>a35f116f99e836e229c52f6045a075d32</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>a3fdee842b6da36e1c6e978ae952223ab</anchor>
      <arglist>(const IllegalMonitorStateException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>a3acc4b5791c51a2cedb8f49567c6420b</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>a0a222e476b8b09fcba72adb1e6517f19</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>aacfbbd3a32f467dfe77f741426744a63</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IllegalMonitorStateException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>a5cdb98f6e796432cee9680c21966f223</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IllegalMonitorStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_monitor_state_exception.html</anchorfile>
      <anchor>ac4c1ea8f0d2ca32b979e3fb45d211062</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::IllegalStateException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a62820aad7855f97334cc309c8a402643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>afea0adf4e3636eb09e4c045db9dd55b9</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a47811dead9b4808c9be618932be2b1df</anchor>
      <arglist>(const IllegalStateException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a5e36cc3ef3fa772f3baf4602215226a9</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>aa25710de91d7d3df420b32197d27feb2</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a5830779832f028d2e0d8e7a159cdf909</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IllegalStateException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a4996de29714c72704b957374ae31199b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IllegalStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_state_exception.html</anchorfile>
      <anchor>a19f287f701c077290f9b9838901d2a2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::IllegalThreadStateException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>a3435fe45e5afb1770210bab4c21496d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>ac9267da38ff9e8d708d75e0b69463afd</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>a38039131d899b92f2bcb44ca2cdec6ca</anchor>
      <arglist>(const IllegalThreadStateException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>a44dcaec0193d6cda7801df1f3bc8e099</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>a6c6dd2d9ad842c12485423205974711b</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>aedbc8793d4ce573f8f4879dd89b2fb3e</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IllegalThreadStateException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>af53d3a9669b987dd962e64b4e62b6a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IllegalThreadStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_illegal_thread_state_exception.html</anchorfile>
      <anchor>a262c33b7af436f677de7e49c2e963deb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::IndexOutOfBoundsException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>a289a3f1e0d4d7c4948a2ed3a2963e364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>a118b1bcbd4c75bbbdf4d72cfe8494a8a</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>af050c2ba6d66b5123841ee28c7df24e8</anchor>
      <arglist>(const IndexOutOfBoundsException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>a6347365e3bf71e4192d648038df17771</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>ae4afd7fe7d6ff92b3ef3da6b73c51412</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>a70ffae277f53ca9467527ec3e6ab62a2</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IndexOutOfBoundsException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>adbce3100d4828c2bc10ac7a062c4e3c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexOutOfBoundsException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_index_out_of_bounds_exception.html</anchorfile>
      <anchor>a5a999466479d93e949bcfabedce9cda3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::InterruptedException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>a37d13def0bbc19cf91497b4242942083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>acd05b84bb10c94748aacdaf2cb61c230</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>a51ad22657d611935440008947128361b</anchor>
      <arglist>(const InterruptedException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>ae59bf148991f24668db5dc66cb75b40d</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>a14bdee21bc5d0213759cdcda228942dc</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>a15970720dac1fe3c60f6bc21490236bb</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterruptedException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>a960b418152031b954fcc8dcd50224796</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterruptedException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_interrupted_exception.html</anchorfile>
      <anchor>ae29d1a8dc64171610771d8231aa057d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::InvalidStateException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>a002c470c23f0092630234b9ee5dad108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>a319118a0d693c76d8594ae6c73a177b3</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>ab77c0ea4af1999f2e031fad5b44a4836</anchor>
      <arglist>(const InvalidStateException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>a37097fa72eecd875ddc1c787fb4fa9ba</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>a4cd4fa89003232b0cfb4adb5bda0fcf6</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>adc1f27c2cdea87e755f0c588248c86f4</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InvalidStateException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>a4b1da6bcab09d594765e56f79d98ef7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvalidStateException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_invalid_state_exception.html</anchorfile>
      <anchor>a007847d9c115cfc5c9608fbe99956e0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::NullPointerException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>ae36d493a520b2eb750b35a5138236c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a804f5ed59b9882151b8fbc817acc6c67</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a6549d149ade37301e675bf2b9a05b597</anchor>
      <arglist>(const NullPointerException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a25d362cc50f0dd3278b81c7bf6816ef7</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a1058967820a726848a30dee2c03516d2</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a172f355cec6063779a37885b9e68a31e</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NullPointerException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a3a831181b9bf51db82214631cc8f865f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NullPointerException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_null_pointer_exception.html</anchorfile>
      <anchor>a8fe710d52c095500ed60af7ed503762e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::NumberFormatException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>ae45aecfcda85655b49c9875e4a81b405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>a53bd45e9b3b035ef26d2e95f96ea5169</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>adec3e79025406a0e9665ec739013a2b1</anchor>
      <arglist>(const NumberFormatException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>aff413b35f07ed7a277c22baeb0e44527</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>a7e8ed093c005a3862f8a49157ccc1bbe</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>ac74508add2cdc33b78ad601cf9317796</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NumberFormatException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>a7de2f035984df65a9796bb90fcfcac91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NumberFormatException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_number_format_exception.html</anchorfile>
      <anchor>a88423e161289e1b851b01e2c62b0c019</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::RuntimeException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>a46bfcab6c72d4805ec6943a933974b8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>abef44b056756d37c2aec63ab2b675a36</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>a94cfa260b1220d62d208a8894656e940</anchor>
      <arglist>(const RuntimeException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>a423591d7d7f1354b539e5ff6202625d7</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>a10a19a32517bff2fe04dd0f52d8f653c</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>ab0dc03328daa68b86a48a9748f948be9</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RuntimeException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>aec356e1b35871d3db07e54422cdaedc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RuntimeException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_runtime_exception.html</anchorfile>
      <anchor>aad65ee970c61d96b35db810f4e133cf4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::lang::exceptions::UnsupportedOperationException</name>
    <filename>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>ab7d267a00123c9d0eece6708a1ebc3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>a82240868c35c392d542ec19157d85efc</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>adc98f4e7928ffdc3e7e05b33a7021214</anchor>
      <arglist>(const UnsupportedOperationException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>ac453b2c3051dc733a8d5263066e5cc6c</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>a35f61318231bc0db8a9338861a239dc9</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>a68ea7d6917be577f049b837146fd33d7</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnsupportedOperationException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>a73ca64c46cadf8b9d6229232c70d472b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnsupportedOperationException</name>
      <anchorfile>classdecaf_1_1lang_1_1exceptions_1_1_unsupported_operation_exception.html</anchorfile>
      <anchor>aee914a515f7f1e303879aaa2cb781c23</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::net</name>
    <filename>namespacedecaf_1_1net.html</filename>
    <namespace>decaf::net::ssl</namespace>
    <class kind="class">decaf::net::BindException</class>
    <class kind="class">decaf::net::ConnectException</class>
    <class kind="class">decaf::net::DatagramPacket</class>
    <class kind="class">decaf::net::HttpRetryException</class>
    <class kind="class">decaf::net::Inet4Address</class>
    <class kind="class">decaf::net::Inet6Address</class>
    <class kind="class">decaf::net::InetAddress</class>
    <class kind="class">decaf::net::InetSocketAddress</class>
    <class kind="class">decaf::net::MalformedURLException</class>
    <class kind="class">decaf::net::NoRouteToHostException</class>
    <class kind="class">decaf::net::PortUnreachableException</class>
    <class kind="class">decaf::net::ProtocolException</class>
    <class kind="class">decaf::net::ServerSocket</class>
    <class kind="class">decaf::net::ServerSocketFactory</class>
    <class kind="class">decaf::net::Socket</class>
    <class kind="class">decaf::net::SocketAddress</class>
    <class kind="class">decaf::net::SocketError</class>
    <class kind="class">decaf::net::SocketException</class>
    <class kind="class">decaf::net::SocketFactory</class>
    <class kind="class">decaf::net::SocketImpl</class>
    <class kind="class">decaf::net::SocketImplFactory</class>
    <class kind="class">decaf::net::SocketOptions</class>
    <class kind="class">decaf::net::SocketTimeoutException</class>
    <class kind="class">decaf::net::UnknownHostException</class>
    <class kind="class">decaf::net::UnknownServiceException</class>
    <class kind="class">decaf::net::URI</class>
    <class kind="class">decaf::net::URISyntaxException</class>
    <class kind="class">decaf::net::URL</class>
    <class kind="class">decaf::net::URLDecoder</class>
    <class kind="class">decaf::net::URLEncoder</class>
  </compound>
  <compound kind="class">
    <name>decaf::net::BindException</name>
    <filename>classdecaf_1_1net_1_1_bind_exception.html</filename>
    <base>decaf::net::SocketException</base>
    <member kind="function">
      <type></type>
      <name>BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>a1938936a1ce97c44efe26448f7890e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>a4fad4bc095e92e49f56b2b3b44ed31c5</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>a66433827b1394339c1c226e3404b4f58</anchor>
      <arglist>(const BindException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>afb00b8afa94337fb17edca184d0f417e</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>a1fd86022052b9b67581171995077a018</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>ae2d61f82c1ba3905b1f311bd03ec148a</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BindException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>a3eb1e6d3a04607cff95cf998202ef710</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BindException</name>
      <anchorfile>classdecaf_1_1net_1_1_bind_exception.html</anchorfile>
      <anchor>aca7c80cc7f37da25adb7437f153d7772</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ConnectException</name>
    <filename>classdecaf_1_1net_1_1_connect_exception.html</filename>
    <base>decaf::net::SocketException</base>
    <member kind="function">
      <type></type>
      <name>ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>a3d42544ce479613bbf145fed7699147f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>a37cd722f0186395e41e3cb70a29adb9c</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>a0259ffefc9425cd099bda9f068f97a76</anchor>
      <arglist>(const ConnectException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>a04a679751901fa6d689957f258df0e0b</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>a034aa12c69e51a36885ae12fe0ea47ac</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>a99cff56978073dec77591d6ab729e32d</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>aef18e7f6895da2cd9eaa896f07341807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectException</name>
      <anchorfile>classdecaf_1_1net_1_1_connect_exception.html</anchorfile>
      <anchor>ab8eed29105ead29c344cd37bd35e5dde</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::DatagramPacket</name>
    <filename>classdecaf_1_1net_1_1_datagram_packet.html</filename>
    <member kind="function">
      <type></type>
      <name>DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>afe8454580b2c949906120a01e9e5a730</anchor>
      <arglist>(unsigned char *bytes, int size, int length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>accea16e4701f22c068c927a18f40b9aa</anchor>
      <arglist>(unsigned char *bytes, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a162b14069ed6e4f6b0fee3439a260c44</anchor>
      <arglist>(unsigned char *bytes, int size, int offset, int length, const InetAddress &amp;address, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>ac745431eae6221d0bffb51d25d6d6761</anchor>
      <arglist>(unsigned char *bytes, int size, int length, const InetAddress &amp;address, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>ab10c279a0d67e445710793d231324d83</anchor>
      <arglist>(unsigned char *bytes, int size, int length, const SocketAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a389c11ba279090589cee8063dfbc747e</anchor>
      <arglist>(unsigned char *bytes, int size, int offset, int length, const SocketAddress &amp;address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DatagramPacket</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>aee1d452c5de86b587357b5e560d4e323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InetAddress *</type>
      <name>getAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>af2443b32f828806cc18b43cc44ec6899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>aa781f76c3eaeee51d6be571e2d283bbb</anchor>
      <arglist>(const InetAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>SocketAddress *</type>
      <name>getSocketAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>ab0cd7ea3df27b561d47f9260078ce562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSocketAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a084254fb5341f689f7ba935fd2e384d5</anchor>
      <arglist>(const SocketAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a21deba025007f848195d2540dd085eb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPort</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>ade7e8f135a0b6f6f8678cad0fb92997d</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffset</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>af6cfae933d27ec6b62d7fd35b58ff5f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a890cc5fd123037255a6c81d3291800b9</anchor>
      <arglist>(int offset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>ab4754a8c48ed8d4b26bf4f212d70ed8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLength</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a227ad181f4661bbdb375561ee54c77f4</anchor>
      <arglist>(int length)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getData</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>ab1a63029f0142ea0c058e7957ce89931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a6c6cd280dee37f3064496f709d3f9ba9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a8059a80f1c5164a5f2c437c1cc09ccfd</anchor>
      <arglist>(unsigned char *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classdecaf_1_1net_1_1_datagram_packet.html</anchorfile>
      <anchor>a69511f2ecc0a4ccf733d059b08ef6f6e</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::HttpRetryException</name>
    <filename>classdecaf_1_1net_1_1_http_retry_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>a2e96ce80a776222a677cfd628e7901ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>a85eb907ec6ab30dc553f0966e5531e02</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>ae280c0e2e3f911fcad242d750ee6bab3</anchor>
      <arglist>(const HttpRetryException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>a5c328fb9ca2f182ad33dfffe96f87fae</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>a76576a22e534f6b12da87c02525ce665</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>a73a97ed2cc971baf24419ad319100b01</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HttpRetryException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>aa3ce3a7c9f0042137dfe22180f4690fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HttpRetryException</name>
      <anchorfile>classdecaf_1_1net_1_1_http_retry_exception.html</anchorfile>
      <anchor>a42c65146537b37e934207bc4d34f01eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::Inet4Address</name>
    <filename>classdecaf_1_1net_1_1_inet4_address.html</filename>
    <base>decaf::net::InetAddress</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Inet4Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a6a6c4cca3714241739aa2d2fd43c0ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InetAddress *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a5b8fe038765ed9e1f21d88da440b27f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAnyLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a0c3922eeac0ff467e9281a64333e5022</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoopbackAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>ae2ae539a0bb7d32f39dadee0701063ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMulticastAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>aeecf1cc8b12b3f74b8067b4ee8a1a72c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLinkLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>af6cdfd94c98d4fbe365f28ca2b257536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSiteLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a107f0a6391338a4ed032a6973aff837a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCGlobal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a96af360114f7141d716c754f16b96620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCNodeLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>acf3981b5054b6e3c3581caababc76964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCLinkLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a676ba7bb9ae6b189661387909729df2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCSiteLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a6e8542f4dd6d056325ab8cbbfc826fb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCOrgLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>abb80de2e323c1d82e8a3a1d17c460ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inet4Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a44a5fa715c193b8df372b6f82c9d7ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inet4Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>adeddfd437034de2f689b016ad06a13e7</anchor>
      <arglist>(const unsigned char *ipAddress, int numBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inet4Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>a40b8c09041af5ffe1339efbceaa8c472</anchor>
      <arglist>(const std::string &amp;hostname, const unsigned char *ipAddress, int numBytes)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet4_address.html</anchorfile>
      <anchor>ad2ce7848c9ab99fb6836de0910bbab22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::Inet6Address</name>
    <filename>classdecaf_1_1net_1_1_inet6_address.html</filename>
    <base>decaf::net::InetAddress</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Inet6Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet6_address.html</anchorfile>
      <anchor>a5bf6c11fa9fde0332e68199f86bfd33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InetAddress *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_inet6_address.html</anchorfile>
      <anchor>a3514f0d96b486754d40b54a6fca96833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inet6Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet6_address.html</anchorfile>
      <anchor>ad09eb0e7b38548e443afbb229480a607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inet6Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet6_address.html</anchorfile>
      <anchor>a3041e92280bda98e306279f7dbddfec3</anchor>
      <arglist>(const unsigned char *ipAddress, int numBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inet6Address</name>
      <anchorfile>classdecaf_1_1net_1_1_inet6_address.html</anchorfile>
      <anchor>a54b9a6bb42a4166e6526ad744212105d</anchor>
      <arglist>(const std::string &amp;hostname, const unsigned char *ipAddress, int numBytes)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet6_address.html</anchorfile>
      <anchor>ad2ce7848c9ab99fb6836de0910bbab22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::InetAddress</name>
    <filename>classdecaf_1_1net_1_1_inet_address.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a0ccf094ce373f434a43f5c463f19ef64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::lang::ArrayPointer&lt; unsigned char &gt;</type>
      <name>getAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a11b967f3f483f5884dd7988c6dc21f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getHostAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a1c4337c1cd8e5cb4af2255bc51747a85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getHostName</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>ac22cd06fc0e041616a1d7f6e3cdadcb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a6ed9f4d5bb0576f51a363f44587141b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InetAddress *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a1a27b598ca27188c8fc7898019b3ccc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAnyLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>aa3153405b9bd6c150fac011563923f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoopbackAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a727cd1369ec117368f468f9416f3a3ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMulticastAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a333671ba67bfe79ac4e1267a44f6b9ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLinkLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a7734fd72c65bfcb11d97d1786e9a953e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSiteLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>aaa55545841a764da461d2709f431e3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCGlobal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>abc070d5d4555cef3accf42f73e8e7559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCNodeLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>ad729c558016d8a40f38955fdf8403cd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCLinkLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>ad9c1622cfb936723e1d7594544c857dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCSiteLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a6ccc768d0bcde718f191077c1492848d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMCOrgLocal</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a56c400cc7cd12f64b96ec11127de38ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InetAddress</type>
      <name>getByAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a07167e78f24fd339c0c6034c486169a2</anchor>
      <arglist>(const unsigned char *bytes, int numBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InetAddress</type>
      <name>getByAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a1cdbd12dac8422ce3f2105d3c8a928ed</anchor>
      <arglist>(const std::string &amp;hostname, const unsigned char *bytes, int numBytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InetAddress</type>
      <name>getLocalHost</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a2e27eaefeab30277e448ac32e86ec4eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a13dc546e4de9448830c695481b13d680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a8bc3ef2710d3a9865b4c5b7e2cd2b6e7</anchor>
      <arglist>(const unsigned char *ipAddress, int numBytes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>abaf688ab6ebfe8a4c904a0e1f88b0611</anchor>
      <arglist>(const std::string &amp;hostname, const unsigned char *ipAddress, int numBytes)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static unsigned int</type>
      <name>bytesToInt</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>afa0b3e431558fae8bdbd374c79594808</anchor>
      <arglist>(const unsigned char *bytes, int start)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static InetAddress</type>
      <name>getAnyAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>acfeb6d4b1cf357478b468f17ba4667ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static InetAddress</type>
      <name>getLoopbackAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a79a186aa265a9a4d851f507d96f74a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>hostname</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a70d9e1282bcfa1af5f06f6582773c714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reached</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a7c207138ea868ca2b1198399b423d889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>decaf::lang::ArrayPointer&lt; unsigned char &gt;</type>
      <name>addressBytes</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>a05b46b74b718f7bc6ea90e736ba3250e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>loopbackBytes</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>ab12f3c31ca7b7b8360e247fe8ca4d093</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned char</type>
      <name>anyBytes</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_address.html</anchorfile>
      <anchor>af5d53ad4b6000372dc2bf7ad728926d2</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::InetSocketAddress</name>
    <filename>classdecaf_1_1net_1_1_inet_socket_address.html</filename>
    <base>decaf::net::SocketAddress</base>
    <member kind="function">
      <type></type>
      <name>InetSocketAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_socket_address.html</anchorfile>
      <anchor>ac8a093e8743140efc518b585eca43b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InetSocketAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_inet_socket_address.html</anchorfile>
      <anchor>aafcabaa828fdb6cec0cba9aca4c3a243</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::MalformedURLException</name>
    <filename>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>a0a781ddcc36dc11fd8f0387af2d61b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>a33edf22bb3966fa35d2794c0722e566d</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>a2c57f7d13ef5b09053583cbf78770105</anchor>
      <arglist>(const MalformedURLException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>a58ae87ae94ca6cd6875f574f79adc842</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>ad3bce18c3eb5cfa1a7a39eebae0bb448</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>af41f956a96a1d62a20e49259ac86fabc</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MalformedURLException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>a11cc536fb6c27048f62d3e256f369715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MalformedURLException</name>
      <anchorfile>classdecaf_1_1net_1_1_malformed_u_r_l_exception.html</anchorfile>
      <anchor>a7d89453bf59d0a6798b202fb69c2b1a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::NoRouteToHostException</name>
    <filename>classdecaf_1_1net_1_1_no_route_to_host_exception.html</filename>
    <base>decaf::net::SocketException</base>
    <member kind="function">
      <type></type>
      <name>NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>a3726180290eed70bef12736a752e322a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>a59c437687686e48d56b798d545137abd</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>a61e26bb99f4bfb3d44b3c081e17399e3</anchor>
      <arglist>(const NoRouteToHostException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>a05408c26fa199beca407f818564b4bf4</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>af4c483e7bf41b1e3887786aab6247598</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>a432d2fd2f86144fca9834475f5a67b9f</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoRouteToHostException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>a1ac6b36ce248595b288ff81af4055d04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoRouteToHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_no_route_to_host_exception.html</anchorfile>
      <anchor>ac45c658f42e2791ffe817c1dd5c1bafb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::PortUnreachableException</name>
    <filename>classdecaf_1_1net_1_1_port_unreachable_exception.html</filename>
    <base>decaf::net::SocketException</base>
    <member kind="function">
      <type></type>
      <name>PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>a7a8d1c2d65f56d6d3383feb6075e64d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>afd342c5bf19034c3e4f0dbc0985c819e</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>acf8c0c126d6ea96bd41304c967d29cba</anchor>
      <arglist>(const PortUnreachableException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>ae7c851fbdbbecab113203e5c42c9c240</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>a4fdd4278b31adfcfe8abb6bd7b8d1f91</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>a040a7eda82182f1135c84996c8958ddb</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PortUnreachableException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>a97e4f5ff988375f35b4e8eda3762f8cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PortUnreachableException</name>
      <anchorfile>classdecaf_1_1net_1_1_port_unreachable_exception.html</anchorfile>
      <anchor>a0b3ab7c9201918a076204ed6099993e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ProtocolException</name>
    <filename>classdecaf_1_1net_1_1_protocol_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>a2574c0c15f489f7b8fceef632810e3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>acbb10a2236b2ce022a77a362c6b64a96</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>a57a5161cd0c2255cbb2da46949383f42</anchor>
      <arglist>(const ProtocolException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>a99f62dfba4cc2b7a96bf30da2bb44d00</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>aed1bfa43b145bc720d98a25c3a1626ce</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>acff675556672bda15ed95c4fc457a81d</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProtocolException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>a78d85de41129583fc966b50ee6cb8275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProtocolException</name>
      <anchorfile>classdecaf_1_1net_1_1_protocol_exception.html</anchorfile>
      <anchor>aaf6f0507ee372f9517eb1d3a0a317c6e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ServerSocket</name>
    <filename>classdecaf_1_1net_1_1_server_socket.html</filename>
    <member kind="function">
      <type></type>
      <name>ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a159292c1573993fdc8d89533dbcca2d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a942e5974a2bfe9e1022d9202557a05af</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a3b5ed4cf66caa788940b184950b80f60</anchor>
      <arglist>(int port, int backlog)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a16b029a85ddfe495e88af8059bebba30</anchor>
      <arglist>(int port, int backlog, const InetAddress *address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a3acec70f8b74cfa6074687fc4c47b02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>af8ab56f3d7f051591cde33fe78e75568</anchor>
      <arglist>(const std::string &amp;host, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a24059881ef19d4bcfe3ab5eb838b77c5</anchor>
      <arglist>(const std::string &amp;host, int port, int backlog)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Socket *</type>
      <name>accept</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>abaa1ef748df7aab85a35ccebf56418c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a41e74261d1489c817faa2233206b63d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isClosed</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a8ce7f84df8a004bfbdfb6413e7f0274f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBound</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>adac29010fd3a228b8edbd71c54f1d250</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReceiveBufferSize</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a977a983bd219708f4e5afcc314c78494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiveBufferSize</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a9a105ad4f0b3a9ed9c46070426946f21</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getReuseAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a8a28ef594455823961a6cfd00fb6384d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReuseAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>aacbc071607357a0771e1ce8c14c3687d</anchor>
      <arglist>(bool reuse)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSoTimeout</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>aa4de090441d1ed9d312d9a0009a9f8fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSoTimeout</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a6feb423d9312a01136ead3ad8717d07f</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLocalPort</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>aa6153e0416783fa60f3645fca575e4fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a807f9bf01a1844fc41af1838f8c9f878</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSocketImplFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>abd93b6b0f729f50ba847fdcc53127fc5</anchor>
      <arglist>(SocketImplFactory *factory)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a70b8b2d8bb83e755078e771cdac904fe</anchor>
      <arglist>(SocketImpl *impl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>implAccept</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>af5afb9836406148b74c2f47ffc19bdc6</anchor>
      <arglist>(Socket *socket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getDefaultBacklog</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>a26261151e185fb0bfe8ac22ba8dcfa2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkClosed</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>aa6eed4f1964b865a5ea9d02b40058449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ensureCreated</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>ae3be5d877c851aad1f4ced0e730f9b47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupSocketImpl</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket.html</anchorfile>
      <anchor>add1418fe790f2ce68dfb23d16bbd9d43</anchor>
      <arglist>(int port, int backlog, const InetAddress *ifAddress)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ServerSocketFactory</name>
    <filename>classdecaf_1_1net_1_1_server_socket_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ServerSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>ae2bd8b3c5b5fadaaa1b4be0e7a8200f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>ad0c9a96f6b0bf17afdf1a9cc9a9cfaea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>a02fa7c355f0a89a01c81674e0f3d2699</anchor>
      <arglist>(int port)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>aa4aa80bead16bb0501dbd15869bd35ac</anchor>
      <arglist>(int port, int backlog)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ServerSocket *</type>
      <name>createServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>a5ca31eddb956b8c1b181f8026b145fd2</anchor>
      <arglist>(int port, int backlog, const InetAddress *address)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ServerSocketFactory *</type>
      <name>getDefault</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>acdfe16e22a51e50bc97fcbfd8919365a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ServerSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_server_socket_factory.html</anchorfile>
      <anchor>ad7d3dce70a6ec3b74b1d9e2b5d8bf3d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::Socket</name>
    <filename>classdecaf_1_1net_1_1_socket.html</filename>
    <base>decaf::io::Closeable</base>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a71b0e2e4309faf29dd441f60bb0cd3b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a32ced2147120fd680c1f6297ab43c925</anchor>
      <arglist>(SocketImpl *impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ab43c2f29ec5b268e86e2c77090f6c7d9</anchor>
      <arglist>(const InetAddress *address, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>abeb30d3e3f5b962b28f14266551daff7</anchor>
      <arglist>(const InetAddress *address, int port, const InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a407a569c835db112ad2ba2137fa39ef2</anchor>
      <arglist>(const std::string &amp;host, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a1e0d17614bfc1b5df95185f694dc1bfe</anchor>
      <arglist>(const std::string &amp;host, int port, const InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Socket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a8700b2f30852d96c01ab064b843e0382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a62cc89237a51fb44da920325c6aa50c9</anchor>
      <arglist>(const std::string &amp;ipaddress, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>aa0fca683ef78b782e039d59a225ca95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a401c825cad63043e7324c17d9358fd0c</anchor>
      <arglist>(const std::string &amp;host, int port)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a4f215aa5c11dcee4a1e845142b102d21</anchor>
      <arglist>(const std::string &amp;host, int port, int timeout)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a10c1e22340112621234d5bf0d0010225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>af32c78a812a558b01e21c38442e9b9c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBound</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a60d67cac2ef483850cd8e41928478ebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInputShutdown</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ae499b7402ccbef08776c706b8e96625f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutputShutdown</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>afe72c0c9d5f0ace01585bbef1d8ac0bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::io::InputStream *</type>
      <name>getInputStream</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a8d8d8603788bd6a1c570781ce1234c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::io::OutputStream *</type>
      <name>getOutputStream</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ae8cf82cc472a33d1d369f75734ba8094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>aa0528d16bb8f6b9d2186e2163061d136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalPort</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>aae42606a6d3da54680852e349eb5f8fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getInetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a8b1fa5626b96e0658558826daed9bbb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a4e941940ead44ec463b47d6afda2cf11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownInput</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>aeda0ce287319a9cfedde52c875ace95d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdownOutput</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>aa62f731a6f3225bf7f077881066ddf7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSoLinger</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a3487401a921a1d302a61d68414310950</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSoLinger</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ac00dfd87e1f517c30e6601f28b996ca9</anchor>
      <arglist>(bool state, int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getKeepAlive</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a5d286687f57b9fd94f47f6f99000069b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeepAlive</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>aaa1e1f99b398e25b96928718262ae76b</anchor>
      <arglist>(bool keepAlive)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReceiveBufferSize</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a25d2a3d380c28e81ceafcc27c208f263</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiveBufferSize</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a5263a4e82480be34bbd0b6689a23dfc2</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getReuseAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>adf4652c5cb25b4dc676a9087514b025c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReuseAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a76d3d79aaf1a74776ab292c60283f164</anchor>
      <arglist>(bool reuse)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSendBufferSize</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a344df20b85dfbd84bb78cd48f5bcc611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendBufferSize</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a242296843ca384aa677a25d4569c92a6</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSoTimeout</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a377fb152d67fa8951f2b31bf2ebe8555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSoTimeout</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ab58962d9e4e0d115b9b9603f3de76799</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getTcpNoDelay</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a3dc476d361f4b51e0d4acce93691b0ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTcpNoDelay</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a9bb62637b12b1bff62fbb05bc698c384</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTrafficClass</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a3d58715dad53df8db4694eb21627ca18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTrafficClass</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ad6708531bd1994dbbbd5073c15df5427</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getOOBInline</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a7166ed31c56411bef604094802b1220d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOOBInline</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>ac9626a100cca716039cda8d06eb11f7c</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUrgentData</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>abe9ee374a1e07a7225af7c5c58b649a3</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a144f356edee1535f07adcea76d9e16e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSocketImplFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a55ff3458fd720a249d8ac67b99a6b34a</anchor>
      <arglist>(SocketImplFactory *factory)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>accepted</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a070604b5f28b71306abdc7e1622c30f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initSocketImpl</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a6e8526cca1232d3d7eb74aa06b3282d8</anchor>
      <arglist>(const std::string &amp;address, int port, const InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkClosed</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>af355a6f6284d3ba933d4462f00d335ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ensureCreated</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a3d07d0d2f52a2c21f8f851a40a1e9239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SocketImpl *</type>
      <name>impl</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a2c0922156d4388531ee9ac402dbce6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket.html</anchorfile>
      <anchor>a11a8bb11feaafab939278a8285afa567</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketAddress</name>
    <filename>classdecaf_1_1net_1_1_socket_address.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_address.html</anchorfile>
      <anchor>a7fc9c5c614520423c70471d23ad552aa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketError</name>
    <filename>classdecaf_1_1net_1_1_socket_error.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getErrorCode</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_error.html</anchorfile>
      <anchor>a233d039ac986389f40768b060d37b16f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getErrorString</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_error.html</anchorfile>
      <anchor>ae5aea09c948ca598d5d2365f9055284f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketException</name>
    <filename>classdecaf_1_1net_1_1_socket_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>a2c5f08f92c6c1a86db6d8a6e4dcc1524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>af7a17fbe21e47d3542af89ff5121f93f</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>a74fa3c3e87dc3f40d86d85d66fe90fc9</anchor>
      <arglist>(const SocketException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>a9295abbc4a358ce293bafae84d1526d1</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>a9edb10478b364c2406ea401fda4d7fd3</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>afa6acd4b9c5e2e37163e3de66254dad8</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SocketException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>a06266cddeca411c994e412d9ccc8629c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_exception.html</anchorfile>
      <anchor>a3cc67dca9055d28397774b46438b13c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketFactory</name>
    <filename>classdecaf_1_1net_1_1_socket_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>a4c80dd9e78516bc876903efab2e4ed33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>a8e026b289a525c9f1d4e3716c3434cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>a5f29e62fc9e70f350014a79c12215f68</anchor>
      <arglist>(const InetAddress *host, int port)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>aecf455f2cb2c90fe235e8e2e6b932b78</anchor>
      <arglist>(const InetAddress *host, int port, const InetAddress *ifAddress, int localPort)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>a5984dc959a68ff8cf8b966f983ef8147</anchor>
      <arglist>(const std::string &amp;name, int port)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>a58d695b602b91c7606131f79eba79d3a</anchor>
      <arglist>(const std::string &amp;name, int port, const InetAddress *ifAddress, int localPort)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SocketFactory *</type>
      <name>getDefault</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>aa5a5026f175cf1cf4ddb589a0e9f4165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_factory.html</anchorfile>
      <anchor>a35267a3b5cc87f5460881297b0175683</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketImpl</name>
    <filename>classdecaf_1_1net_1_1_socket_impl.html</filename>
    <base>decaf::net::SocketOptions</base>
    <member kind="function">
      <type></type>
      <name>SocketImpl</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>ab1a065de7598c3379e2d55813b6909d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketImpl</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>ad50a9a3ccc12bbb7607dd22f162550ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a6e2846ca8ee4044bc86866715b39325d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>ad5fbf69eda0fcde4b384ac4249934208</anchor>
      <arglist>(SocketImpl *socket)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connect</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a1d03e74e882290dd6dcb66d0d5c8784e</anchor>
      <arglist>(const std::string &amp;hostname, int port, int timeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a351f1686e11185eb9aafb87bcc79c512</anchor>
      <arglist>(const std::string &amp;ipaddress, int port)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>listen</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a8dd8c276172b82bb5e44076d619c7938</anchor>
      <arglist>(int backlog)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::io::InputStream *</type>
      <name>getInputStream</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>acb313e2574fb706667d0ee3b67431daf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::io::OutputStream *</type>
      <name>getOutputStream</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a11df0db877c63a7a28b01166930cdc56</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a496b669f48faf7c1bf74a509b892c8c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a52b5a1cd3dfafa7440a2205571c66fd5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdownInput</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a771b894c254d09a1176836ff3d7e4048</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdownOutput</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a69c420ffff630ca95ae34f827998952c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOption</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a0c3198b07bf148a0596426334bceba36</anchor>
      <arglist>(int option) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOption</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>aae5b2712f7d979960cd4f2e674c90d42</anchor>
      <arglist>(int option, int value)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>ac75b3eff2f285a4a0c464f8903e78cd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalPort</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>aa0f75776ffc17cd41a732e49a5bec015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getInetAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a4fc02a67fe4b8db31b08b12d15126cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const decaf::io::FileDescriptor *</type>
      <name>getFileDescriptor</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>afa2c242031f5b7c6867006928ad7dc10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getLocalAddress</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>addf926de511d57cf8c756863bdc92cb9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>afce99dfe52d0364c872e61c478f44436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsUrgentData</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a0f63aefe412bfa58dfdf791759a4716a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUrgentData</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>afec27e9179ffe99bfefe053c015a9b8c</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a2e82685d8a8a239edba28e3d16caa367</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>aa1e0184b79b833d6e23be47dfab1f16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>address</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a2987532cae07007dd7743015516a6321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>io::FileDescriptor *</type>
      <name>fd</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl.html</anchorfile>
      <anchor>a16bab186a92d13a97b63f5a5d177b3c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketImplFactory</name>
    <filename>classdecaf_1_1net_1_1_socket_impl_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketImplFactory</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl_factory.html</anchorfile>
      <anchor>a4a69ff8bf98d0c8fa788b71a60468af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SocketImpl *</type>
      <name>createSocketImpl</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_impl_factory.html</anchorfile>
      <anchor>a8865c5a1ad9e9fa2b2c8a5ffd9f07006</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketOptions</name>
    <filename>classdecaf_1_1net_1_1_socket_options.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketOptions</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a251d6496da7a52596248bcd49931c772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_TCP_NODELAY</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>ab661744df680beaa4b046b609deb0206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_BINDADDR</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a4f9ca70048861e72de52e0195e47a2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_REUSEADDR</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a14ea8ea3f85f445bdb3e8f2fa096a2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_BROADCAST</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a01d43744211a6126b81b1619a213ed6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_IP_MULTICAST_IF</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>ace8ec93d875219c2b68c9b9dcee5ca09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_IP_MULTICAST_IF2</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>aaaed783d99b01a241551e193ca9561a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_IP_MULTICAST_LOOP</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a45aaa859025fa7e8b3dd6320e9e9c8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_IP_TOS</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a11a3429de3fd5af1c8d7679db9ee0021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_LINGER</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a65ab8c8eebe7705ef628666ed9b76e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_TIMEOUT</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a2beda4e827f76fee2bf8863881b83bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_SNDBUF</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>ac37bedc03238ca88f3906642a4c5f120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_RCVBUF</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a90a66ca39ab872e37e4ee66e8c6eb5ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_KEEPALIVE</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>a8365fa2f839f355999a1c219f2e8e3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SOCKET_OPTION_OOBINLINE</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_options.html</anchorfile>
      <anchor>ae0fd75b6a9d747dc11c1e5cc5b4543b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::SocketTimeoutException</name>
    <filename>classdecaf_1_1net_1_1_socket_timeout_exception.html</filename>
    <base>decaf::io::InterruptedIOException</base>
    <member kind="function">
      <type></type>
      <name>SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a03e3c84a94ea9d6e9e2dda12a944d147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a74c9cd934b780cf6bdb8220c1e965210</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a7f5641ad7eac1f07eb3248eb69aff1ea</anchor>
      <arglist>(const SocketTimeoutException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a8f3b9220cdb04d55d118ebb548bead5c</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>acb01be720d2e83cb6d5de14aac4e7358</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a5295830ee6db8d3346ce3230faa7063f</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SocketTimeoutException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a1ef5c003d008371aea133b01cf450720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketTimeoutException</name>
      <anchorfile>classdecaf_1_1net_1_1_socket_timeout_exception.html</anchorfile>
      <anchor>a02e30063de3ade04a580d24372d71a01</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::UnknownHostException</name>
    <filename>classdecaf_1_1net_1_1_unknown_host_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>a7a1b23f7bbcb51e2b01b695b158d55dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>a0ecff2eaae8be2c7b576a7e6c6448e58</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>abed08269b5baa8e102cca3f1801dfb04</anchor>
      <arglist>(const UnknownHostException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>af4a39c43c9db6a9a0dea9225b245005d</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>a839d4b21722ac62df6e0e33a6c54dac4</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>ad076ec59abdb50e58e4acac6e2b42909</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnknownHostException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>a52578c8000b28d67116104c4959a1c64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnknownHostException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_host_exception.html</anchorfile>
      <anchor>a7b55797ddce1a60bb5adbf6f4ea12fe1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::UnknownServiceException</name>
    <filename>classdecaf_1_1net_1_1_unknown_service_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>a20f2016afa866ba9fa1a0facbd97ba15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>ae1dd51d7267d6577baeb206c78c55096</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>a7638fc3a47f4b46dd756d3f4e651d2d8</anchor>
      <arglist>(const UnknownServiceException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>a45faa065a2256529d349b6d309037cb6</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>a0ecfe0b38c0c6949ac1a75dd864fa706</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>ae8fa5a44772b3d140ebd9c8cf35970f6</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnknownServiceException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>a23ccf6ec7f96af9f8fd889717871dfc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnknownServiceException</name>
      <anchorfile>classdecaf_1_1net_1_1_unknown_service_exception.html</anchorfile>
      <anchor>a7e3bedda4e2fd61d3be6ac60fac29fa5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::URI</name>
    <filename>classdecaf_1_1net_1_1_u_r_i.html</filename>
    <base>Comparable&lt; URI &gt;</base>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ab1cde22ab1b7dee35e9cb68b306beb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a3005a30ac569f5e06d7b5b29ed778f1f</anchor>
      <arglist>(const URI &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a140eb5650b4bf6fba21d1e4158c02a1f</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ac8009591bdd22cf04766f929e7fdd05a</anchor>
      <arglist>(const std::string &amp;scheme, const std::string &amp;ssp, const std::string &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>aef5cdf232d00cda45e19afbbc551f84d</anchor>
      <arglist>(const std::string &amp;scheme, const std::string &amp;userInfo, const std::string &amp;host, int port, const std::string &amp;path, const std::string &amp;query, const std::string &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ad33d13c8e4cb56149cc16dbac84dd0fb</anchor>
      <arglist>(const std::string &amp;scheme, const std::string &amp;host, const std::string &amp;path, const std::string &amp;fragment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a69619c95123376e8a11c20346980b180</anchor>
      <arglist>(const std::string &amp;scheme, const std::string &amp;authority, const std::string &amp;path, const std::string &amp;query, const std::string &amp;fragment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URI</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a417df895ce6f778b4a79a8e1259aa3b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ae9a2fe52cf5d8783c573994c91a99558</anchor>
      <arglist>(const URI &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a27557c6c83245515c485b93754f48a33</anchor>
      <arglist>(const URI &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a8dbcf4ed46fe4809fe28e361b72a68cb</anchor>
      <arglist>(const URI &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a4aea1990e4699a66b869fa10f05f0cc6</anchor>
      <arglist>(const URI &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getAuthority</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a91d0ba29e637d47c0620c0a02bba0a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFragment</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a79a4e5d8dac2c8910efda1e466d370a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHost</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a5a7c301aa53b9988c6c0410c348822df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPath</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a93083443ea6753fd7cd49c526bf0f22f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a9b467530d5be5d79f9d23fac26633654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getQuery</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a0b33f1db8d854581c3ac862ff0d04960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getScheme</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a4bd6f329382892f47aa2f5e5fc85ed14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUserInfo</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a73a83ddf6b4c07bf299c2cf17845f885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRawAuthority</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>accf33be6a086c991eeafb50ac7516afc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRawFragment</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>aa6b69e891e0c5a317f90e29253c99c40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRawPath</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a06b0bce8dfd1851cea3095b4feff2b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRawQuery</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a0dafad00081aefb45aac2bdfc512a938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRawSchemeSpecificPart</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a45976fe17666eb292f49c065935a10bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSchemeSpecificPart</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ac2fdb09ba02944f0189c4e4c71283fca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getRawUserInfo</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a4f49388b1815b61f5afd8f8e81496e3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAbsolute</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a2dd7849c7fd01d619dc20e701c098208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpaque</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a63fab88709254871a8a8880bda76583d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>normalize</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a1e3ef4f85f63197f2d12d228701e931a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>parseServerAuthority</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>abb83d52685314d0abdd6a62c1b025188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>relativize</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ac49f9c3a9e2fd71547564acbc4269ad0</anchor>
      <arglist>(const URI &amp;uri) const </arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>resolve</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a3f9971a01071350df0db8fe68b1ae8b9</anchor>
      <arglist>(const std::string &amp;str) const </arglist>
    </member>
    <member kind="function">
      <type>URI</type>
      <name>resolve</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a092efb805c2c1d3a4f807acda6e5d57d</anchor>
      <arglist>(const URI &amp;uri) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a73f509065fc9a929e0b2a3d7ccedda3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>URL</type>
      <name>toURL</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>a0468cd7e69225a4bb75bb9f2ddc2ea6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URI</type>
      <name>create</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i.html</anchorfile>
      <anchor>ad382b67bbdd6cf0e5c41e5f8152c8b0d</anchor>
      <arglist>(const std::string uri)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::URISyntaxException</name>
    <filename>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>a8155fdf9dec03980bcc78f7190c05616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>a75964813819b2874e35990a12c94f859</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>a4ac7b6ac8edc3b9f8a12f30b552a7595</anchor>
      <arglist>(const URISyntaxException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>ac823c78063d857de57e58ad8e651260c</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>acbdc1a56643c2d46fb2ca908d227e78b</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>aaf4f7b0bd9b3fcea73598848bca20e90</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg DECAF_UNUSED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>a6fb410873d1fdb3b2eea7e11eb93a156</anchor>
      <arglist>(const char *file, const int lineNumber, const std::string &amp;input, const std::string &amp;reason)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>a9525eb679a41ff6e15ea3d15e290b1b3</anchor>
      <arglist>(const char *file, const int lineNumber, const std::string &amp;input, const std::string &amp;reason, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual URISyntaxException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>a2141ebae7c11de72b615b41ba76d08f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URISyntaxException</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>aa4a71cc80b34af8579cb091b7e93ad81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getInput</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>aeb851616899ae15b0cb65c23284ecc51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getReason</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>aa2cfe8bb238d4f32f7fcac4301ffb191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_i_syntax_exception.html</anchorfile>
      <anchor>ab2eb8c7be9587b599140237899c754f9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::URL</name>
    <filename>classdecaf_1_1net_1_1_u_r_l.html</filename>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l.html</anchorfile>
      <anchor>ac29bc5ec06928993b1f78e65faa45576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>URL</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l.html</anchorfile>
      <anchor>a7432b3b055b8c29dd18c77fb7243f904</anchor>
      <arglist>(const std::string &amp;url)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URL</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l.html</anchorfile>
      <anchor>a57e5f9f93fd299c94217c45e201960a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::URLDecoder</name>
    <filename>classdecaf_1_1net_1_1_u_r_l_decoder.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URLDecoder</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l_decoder.html</anchorfile>
      <anchor>a6d0a08db2e771e47ab2e175172303e40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>decode</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l_decoder.html</anchorfile>
      <anchor>abfcf7383daf09eaea20f21598f36abe5</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::URLEncoder</name>
    <filename>classdecaf_1_1net_1_1_u_r_l_encoder.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~URLEncoder</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l_encoder.html</anchorfile>
      <anchor>a084920f1161c9f9e4a1001b672797086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>encode</name>
      <anchorfile>classdecaf_1_1net_1_1_u_r_l_encoder.html</anchorfile>
      <anchor>a104490c4c73dec930cc80aed95bd2389</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::net::ssl</name>
    <filename>namespacedecaf_1_1net_1_1ssl.html</filename>
    <class kind="class">decaf::net::ssl::SSLContext</class>
    <class kind="class">decaf::net::ssl::SSLContextSpi</class>
    <class kind="class">decaf::net::ssl::SSLParameters</class>
    <class kind="class">decaf::net::ssl::SSLServerSocket</class>
    <class kind="class">decaf::net::ssl::SSLServerSocketFactory</class>
    <class kind="class">decaf::net::ssl::SSLSocket</class>
    <class kind="class">decaf::net::ssl::SSLSocketFactory</class>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLContext</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</filename>
    <member kind="function">
      <type></type>
      <name>SSLContext</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>a71dd0e15752e2d0e15ad0efd52d7311a</anchor>
      <arglist>(SSLContextSpi *contextImpl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLContext</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>a161704c39085a6da63c4e9efa13025c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SocketFactory *</type>
      <name>getSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>ab01eeef79b1ed1eadbe6b3815d567bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ServerSocketFactory *</type>
      <name>getServerSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>ac346a8fbfeefa2824f3154d5d0aecbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SSLParameters *</type>
      <name>getDefaultSSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>a69fc318f076fb2dc7451b236bc7d64d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SSLParameters *</type>
      <name>getSupportedSSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>adb91e64a464cb88d8608cb1b8ea273d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SSLContext *</type>
      <name>getDefault</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>af18bc606665a1a1f496570570c98345f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefault</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context.html</anchorfile>
      <anchor>a3ff1db926616e0af10490d2fd6930ea2</anchor>
      <arglist>(SSLContext *context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLContextSpi</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLContextSpi</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</anchorfile>
      <anchor>a9717eda2c26fa17f92a504a29f6c5ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>providerInit</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</anchorfile>
      <anchor>aaafe97bffaf441792f326e98d97a008a</anchor>
      <arglist>(security::SecureRandom *random)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SSLParameters *</type>
      <name>providerGetDefaultSSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</anchorfile>
      <anchor>a9aa01fec91b193ca531658f89602be75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SSLParameters *</type>
      <name>providerGetSupportedSSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</anchorfile>
      <anchor>a6aa6ded702baab64aa1c6e357dd5cc86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SocketFactory *</type>
      <name>providerGetSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</anchorfile>
      <anchor>a3fb660180c3e7ab5845033f074676ba7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ServerSocketFactory *</type>
      <name>providerGetServerSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_context_spi.html</anchorfile>
      <anchor>a66b7cd2de60fc0cd2e547f01ba06006d</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLParameters</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>SSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>a39abce768c83b843b99975af53154e63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>abf67224b925b61145648c9497d3f983b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;cipherSuites)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>a2aeafeb7555dfeb4618709ef702d065e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;cipherSuites, const std::vector&lt; std::string &gt; &amp;protocols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>a1b587a092746eea38d530349fab415e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>ab28fa7c4eadc90472e1610f906ee934d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>ab882b658d128c702a5b24e68c22f8e43</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;cipherSuites)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>a19fe125516f7006dfe58cc8d6699558c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>a262e53a72b7eb91c7bf0d26507734d66</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;protocols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getWantClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>aad0398d132230b160cb34d08b42836ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWantClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>a6639b9190fa0765b58187274a798c0fd</anchor>
      <arglist>(bool wantClientAuth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNeedClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>ac92868e792be853cbc9be1c9ff75ad17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeedClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_parameters.html</anchorfile>
      <anchor>ac4858754a4a850384e62cfc0ffd2d1fa</anchor>
      <arglist>(bool needClientAuth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLServerSocket</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</filename>
    <base>decaf::net::ServerSocket</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a273409b000be1ddaf047f75d368bcc7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a63bf65fdbb24fd6012ea638713c19719</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a2afabac8421d0d24aca725bf7553d3ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a0430c1b4c3c71e002bddd5c3a468265e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a73a506d2fda4dc47c97cf8fbd5f72e94</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;suites)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>ab979fe8369174aa51f5aa14cee86c82d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setEnabledProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a2661d2499a193690373d0335bcd472e4</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;protocols)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getWantClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a100fd644439d6fcec2bc512b10e4c613</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWantClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>ae51de9d3af85214925dd461d9f69a73d</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getNeedClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a143e5dea3b7e85bd3c33c24172a5db48</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNeedClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>aed502f104ddbacbc3c8fb7088916184b</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SSLServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>aa821662bd7facb3d78a01f6d66c885a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SSLServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>ac22397e82016821b59526a940f2f9601</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SSLServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>ada20ed06698719a01aecbd92f2150745</anchor>
      <arglist>(int port, int backlog)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SSLServerSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket.html</anchorfile>
      <anchor>a72c93a0717383d231a21f35075b38f34</anchor>
      <arglist>(int port, int backlog, const decaf::net::InetAddress *address)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLServerSocketFactory</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket_factory.html</filename>
    <base>decaf::net::ServerSocketFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLServerSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a47d009b1d4221ad55ddf650e374473a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getDefaultCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>acd47106d21c5f9743f10e3b233aa676b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a82f41a36c103856d39b59b412f0230af</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ServerSocketFactory *</type>
      <name>getDefault</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>a8eb5587c8e76cb7fbe29140c0e749b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SSLServerSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_server_socket_factory.html</anchorfile>
      <anchor>aee12d7f003eb7a2468ef1e69368c20b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLSocket</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</filename>
    <base>decaf::net::Socket</base>
    <member kind="function">
      <type></type>
      <name>SSLSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a24ea0776fd994f65ae0282cd4299c164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SSLSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a9bfa08b44450813d98198fcd745bfbba</anchor>
      <arglist>(const InetAddress *address, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SSLSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a759da2b09039ea17c71591747555a865</anchor>
      <arglist>(const InetAddress *address, int port, const InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SSLSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a9062453dc2821329584a93a721fd4ad5</anchor>
      <arglist>(const std::string &amp;host, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SSLSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a35de990304038b721ad1714588dd5418</anchor>
      <arglist>(const std::string &amp;host, int port, const InetAddress *localAddress, int localPort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a23d08a2d778f6246716153dfaf5dbecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a248b57136c72db290800aa5efee2d0e2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>ad9865f96e3b0086ea37b64bed828d6e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>af3ec5e4ef170d560793501d7ac3e716c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setEnabledCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>ad2948ae36921481849c9d17390baac80</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;suites)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getEnabledProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a38dbc5a3b67f832ea59cbb9692458ef7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setEnabledProtocols</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>ade5db0c2dd2b0ce3e055bc8b4e4aa356</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;protocols)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SSLParameters</type>
      <name>getSSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>ade826d3ada93b2ec6b879fb64335a029</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSSLParameters</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a2509539fd0bd11e8a5cd62f239294355</anchor>
      <arglist>(const SSLParameters &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startHandshake</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a17509ab175189abb81e5d32bd7e08b5f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUseClientMode</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>aa887d76c42a4d22f8138ad286d131ac6</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getUseClientMode</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>ad193f3ac4f1e95a6dae8e138c29d62d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNeedClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a650e1fc1f3f31fbae0a33d9f2a0ff746</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getNeedClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a828defaef10ccd5f5b9bb4bb8512ff1f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWantClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a3ccb2104f941f6caeacf1e88ca7b47b5</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getWantClientAuth</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket.html</anchorfile>
      <anchor>a98078865be96ccdc3b24965a8224881d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::net::ssl::SSLSocketFactory</name>
    <filename>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</filename>
    <base>decaf::net::SocketFactory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SSLSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</anchorfile>
      <anchor>a6d0ea5c0dbe6eba8c1671f5f523834b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getDefaultCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</anchorfile>
      <anchor>af7a7d39712f4af7802e2b2b888a4620c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getSupportedCipherSuites</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</anchorfile>
      <anchor>aea52a41d60a074f580e440dc8d0bb4d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Socket *</type>
      <name>createSocket</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</anchorfile>
      <anchor>ab23e54a6c1ee0b1e03511ad492e83ef2</anchor>
      <arglist>(Socket *socket, std::string host, int port, bool autoClose)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SocketFactory *</type>
      <name>getDefault</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</anchorfile>
      <anchor>a55efdf722f5d56e9bb65efba726af82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SSLSocketFactory</name>
      <anchorfile>classdecaf_1_1net_1_1ssl_1_1_s_s_l_socket_factory.html</anchorfile>
      <anchor>a67f1757df976c1854b724737d9bc2337</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::nio</name>
    <filename>namespacedecaf_1_1nio.html</filename>
    <class kind="class">decaf::nio::Buffer</class>
    <class kind="class">decaf::nio::BufferOverflowException</class>
    <class kind="class">decaf::nio::BufferUnderflowException</class>
    <class kind="class">decaf::nio::ByteBuffer</class>
    <class kind="class">decaf::nio::CharBuffer</class>
    <class kind="class">decaf::nio::DoubleBuffer</class>
    <class kind="class">decaf::nio::FloatBuffer</class>
    <class kind="class">decaf::nio::IntBuffer</class>
    <class kind="class">decaf::nio::InvalidMarkException</class>
    <class kind="class">decaf::nio::LongBuffer</class>
    <class kind="class">decaf::nio::ReadOnlyBufferException</class>
    <class kind="class">decaf::nio::ShortBuffer</class>
  </compound>
  <compound kind="class">
    <name>decaf::nio::Buffer</name>
    <filename>classdecaf_1_1nio_1_1_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a8fcaea1822345689b015e19515b93b05</anchor>
      <arglist>(int capactiy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a520c62546b6042aacaa0d50e271bca06</anchor>
      <arglist>(const Buffer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Buffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>aa2900b83275cd9fb35009c5f5f232a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>capacity</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>ad335471dcb4e7df652fbb556e59ea530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>position</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>ac3f3a9b58ba3c2986e0c7b3752b52c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>position</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a2bd74d7d5ea487a8cd5b0ab46273b14e</anchor>
      <arglist>(int newPosition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>limit</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a7517c02b4d27d040c44f970c307bf5b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>limit</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a6d55516a05a08a813750fa4efc268708</anchor>
      <arglist>(int newLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>aa5dccf3cd415e1c53cd0ab486877c9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a11f11b3035d263fb9c48e3fbd58f4a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a86fcd3b1dc9b14bd98e9d0e38d505665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>flip</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a39327161d79f0bde30467473eea0e4b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Buffer &amp;</type>
      <name>rewind</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a94ae44c9b90373b54fb6ee60451c453e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remaining</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a21cd75b27abc500af892a4078083c10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasRemaining</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>ae490604c9e2caa90e20bac31b8ece696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a3cb8f27f48cae4bf41443d0d67b9e972</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_position</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a99bdf8278f95d2fe0c16b2e743f3c65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_capacity</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>ae3a1d2c18db085baf5596f4cabd64fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_limit</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>ae6c946fea1fa55b151141c75f463ba52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mark</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a9a970514fb1664b3e7d41bb760967f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_markSet</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer.html</anchorfile>
      <anchor>a15510c6918aac3ac0ca58ed9c39de46f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::BufferOverflowException</name>
    <filename>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>af383a2372a251854a027cd1a026715a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>a5809f241759fb741e30dc6b5569dd374</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>a8e938b0773d5605f16692a18f22c6224</anchor>
      <arglist>(const BufferOverflowException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>a3f68f31a2009cc78f31360265d5ba341</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>a65521a0790b901cf57e2db91de585a44</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>a6ff424569a779118278371b7a0721e01</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BufferOverflowException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>abc0331697662198a82e750afe7c4af4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferOverflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_overflow_exception.html</anchorfile>
      <anchor>afeddf830c4224ede38d188c7ade550bd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::BufferUnderflowException</name>
    <filename>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>a1628281154f32c87cf89c426cc7def8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>a08844cbad266cddabd78a150f9440718</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>aad28b82487316501644e8b8efd5ab836</anchor>
      <arglist>(const BufferUnderflowException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>aca128ee027dd9287e668686248731d1e</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>a592b7c38315847b94cc4d565ee958a29</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>adb089e38da44ec85dbad6853a23c41bf</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BufferUnderflowException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>af75661c8877dd094a60d2484862a018c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferUnderflowException</name>
      <anchorfile>classdecaf_1_1nio_1_1_buffer_underflow_exception.html</anchorfile>
      <anchor>a97c9d8582aeebf8694264f833f656b81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::ByteBuffer</name>
    <filename>classdecaf_1_1nio_1_1_byte_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>Comparable&lt; ByteBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a428c1ad4f7364ea2ae6b8e9fc8e544eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ab0775a27fbf1b127e80f75249a36b092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ByteBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ab776f7db5d1f2e22e4dc0997377f89f6</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>ByteBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a36a8a51f5b194d433cbc510d8a6c4f96</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>ByteBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a8abb7f97eea20f14cd289b39265e60a1</anchor>
      <arglist>(ByteBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ByteBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a5feff7dd9d00314f0f742a9a01c2876f</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>ByteBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ab3f24f2770ed98b51b0a070c6404df7a</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isReadOnly</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a71a16a78a10394b0c4ad2e50164449f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a58f829960228ba89ce3c9960fee38588</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ac9c05f1b5e3852933a7fed5df3ed87c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a9b0922b991f6c413dc51ed65be44143c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer *</type>
      <name>asCharBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a4fc24e890bf3ceb7ec3cf3f69153d89d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer *</type>
      <name>asDoubleBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>adba2171c8f780731d0f5a23fe5033e1a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer *</type>
      <name>asFloatBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a3c020e22e86cc112b5293f845cf198a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer *</type>
      <name>asIntBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>aefd4b8e6f690e848310e32bdb969e655</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer *</type>
      <name>asLongBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>aa566e6db4d82627895f4d0f022771c83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer *</type>
      <name>asShortBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ae5e28993426f4fda17a3c45e302de629</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>afe697df87e754e2437e3cb9f538a7b7d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a175bcc2bed9f5db43df078c4a2f5ab07</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a89f24a679360f0fd97e4b0be4fba6032</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a1021a589ff8a5a7b64396fddaf2ee417</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a54eb6b93d99aee42723a1a7ee23370ef</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a4c8b75dc302195f745e163c25b51d55d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ad6b7b8ee792ee3b84d454ee9457ce416</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>aff2beacb86e0d6ba133903b98b7d7577</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a294cf335f19de2e22c4b055cfe90f036</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a6551924712e717a1a91363ee1b2bacb1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>acf364fa00fd42d432a5380916aa2695c</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ad24de40747a3e7b37a1de873cba78633</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getLong</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a876ee8665b7273ebbd9f3afdca9e2318</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a6c93fd1af57b77476e033366341b387f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInt</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ab83180c5e7213e6d5ea884a0a639b596</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ae4118e4a4d10a9809258361ed72604d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>getShort</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>afe70d35ca28a8c61f97fd69e833c85ca</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a39d985729bc52b8544017750524de848</anchor>
      <arglist>(unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ad37fa6fdd28d285ef95a49638a7a9533</anchor>
      <arglist>(int index, unsigned char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putChar</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>acb01d88222596127e6b04481753cbd93</anchor>
      <arglist>(char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putChar</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a7cfd5a378186f655054b04c5fccc609a</anchor>
      <arglist>(int index, char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putDouble</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a1af3af332422adb4b5815b4e9b7aa530</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putDouble</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a2e5fba824a16167a08a475f23dc209c0</anchor>
      <arglist>(int index, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putFloat</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ac1590f34862aabd866511092e97d6c67</anchor>
      <arglist>(float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putFloat</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a1479865e4cc56ebd53a8631e01a09cc4</anchor>
      <arglist>(int index, float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putLong</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a2f54211693791fa27712c2ae1f4118b8</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putLong</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a707363f3332e99c50588c115024e74bc</anchor>
      <arglist>(int index, long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putInt</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a0cdd7b6fe26dd2be2439ece7021e32e0</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putInt</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a49586a0d91f0acaeee94686d62b353e7</anchor>
      <arglist>(int index, int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putShort</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a75f718c0f2d78861124f20f7096179ca</anchor>
      <arglist>(short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer &amp;</type>
      <name>putShort</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>affb006663301227c34cca892701eee5b</anchor>
      <arglist>(int index, short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ByteBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a4cb7a384370045ad2376681d40db4c04</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a2796762bd51a52934d477fa9c9f96989</anchor>
      <arglist>(const ByteBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a1259f83508f2ede1bac255a4926eb62d</anchor>
      <arglist>(const ByteBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a88e8e2413593b1d179df66f93bab8fde</anchor>
      <arglist>(const ByteBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a90cfa68e8432f6e9bbc283052f7aa095</anchor>
      <arglist>(const ByteBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ByteBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ae9863941ab675d2ffa8df38bd79ae3f1</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ByteBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>ada4ead524f93be19ba3792a2e9d35512</anchor>
      <arglist>(unsigned char *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ByteBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a9a5dc14f7daffa583fa9344da30867b7</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ByteBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_byte_buffer.html</anchorfile>
      <anchor>a36b36538ff711596c31d4a23b28af4fd</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::CharBuffer</name>
    <filename>classdecaf_1_1nio_1_1_char_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>decaf::lang::CharSequence</base>
    <base>decaf::lang::Appendable</base>
    <base>Comparable&lt; CharBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CharBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a5417d463b730a98746e5fa2da86c4717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ac9d893569151fc3df6be047c56773a5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a111e96c79e42a1819a6351cdb81b5eee</anchor>
      <arglist>(char value)</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a64a84931af4b394bc630a55f111e6e28</anchor>
      <arglist>(const lang::CharSequence *value)</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>append</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a7fe67a6a2ea5e27ef74067d4699805e8</anchor>
      <arglist>(const lang::CharSequence *value, int start, int end)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>aeeedbd0a8bf248eb5435faf62da61e13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a86cffeecea297e1ea495cd99e4900c67</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a4fe36b72b26a5f5e5e1078fa764b408f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>charAt</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a25eec827719157c32a4310e2694c6fc9</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ad9986f7f6866aabf327f7b5454fd3a5e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a75c1941edd0a2c97a48c27c71f2c368b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a2b97bd1d26c39d08f1f58c12d72c5b51</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a473c75666831b132703413ee1ab96fb1</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a232c547933fb2bffdcdeeeeeda72a75d</anchor>
      <arglist>(std::vector&lt; char &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ab5897935ac46197fe85afb7a9643adde</anchor>
      <arglist>(char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a72e3273f23313d1ceedaeee2ff1435e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ab4c525f4eca223186eee72767c30e02f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a755c004daca91a64eef4120d786adc03</anchor>
      <arglist>(CharBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a789aa4ed5e347bf213d8ddc560a5a1d4</anchor>
      <arglist>(const char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a14ea79cd111419462580db32249ee6f8</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ad7f8e07c4c460376cbfec0f143c94caa</anchor>
      <arglist>(char value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a39a42ad53cebf0c96a3e1b911193ed59</anchor>
      <arglist>(int index, char value)=0</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a8c2a830221dc44a26c15eb9ec4c835fc</anchor>
      <arglist>(std::string &amp;src, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>CharBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a825cd6d51ea13a6380aa837e00709e95</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>read</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ae78624aa928094734a1df4df0255003e</anchor>
      <arglist>(CharBuffer *target)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual lang::CharSequence *</type>
      <name>subSequence</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a1d31acb1522ee27f91e415874b9489cf</anchor>
      <arglist>(int start, int end) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a5d2d8c90d964c4968f8f350f5551f037</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a59a398415926d78da8c8bed0da9ec587</anchor>
      <arglist>(const CharBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a52d8a0a7fbbf147c75046dc55589a183</anchor>
      <arglist>(const CharBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a3425d642d79f2a677748a966e6cb690b</anchor>
      <arglist>(const CharBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>abc095d9943bcfe41bac7a3fe45cdc9da</anchor>
      <arglist>(const CharBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>ae84e49c09e88a68a889041bcd5d4d17f</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>aea41b929ded16d16196f17fc06b74cb4</anchor>
      <arglist>(char *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CharBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a30f53e388e6b5dfb089feb1946f38f7b</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_char_buffer.html</anchorfile>
      <anchor>a599d21e279737af12336858d9c81d7bf</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::DoubleBuffer</name>
    <filename>classdecaf_1_1nio_1_1_double_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>Comparable&lt; DoubleBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoubleBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a821e063159bf11d942d848e38fc53d0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>ac1a78875468e96da1d409ea806d3121c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>ab68828b6c2d51f09ead529bc27fcd771</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a7c905151aace3f4ecfb8171206e6216d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a3935135e47b6c8897b873965a048dd08</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>ae2383977fc726f1f0e44f1b818202e17</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>ab7c507400ea98dfffb5db4a0c2b84594</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>aa13556e04d714e71ed2111d143caf3ac</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>ae7a0ff34392cdee3cf3032e234263681</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>DoubleBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>afd46024a2a8c001735ab28842d690262</anchor>
      <arglist>(std::vector&lt; double &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>DoubleBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a2c782f1a10f143427d6f5aa815079557</anchor>
      <arglist>(double *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a4f754d2c5a67a525767c617faa81b654</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a9eafebbb980e839cfb601ed99f11d8f9</anchor>
      <arglist>(DoubleBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a8fa6ba5b6c80c8260f60f464689efbe1</anchor>
      <arglist>(const double *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a9a464d1711b6a6577d32cbc65a63ee9e</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>aeb8fe554f3c6cced5699225695395810</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>acf60952e5d6054ee6f44641447d9d0ba</anchor>
      <arglist>(int index, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DoubleBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>ab0659429c0d7b7dac3088c18e2ff8fd8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a134f548e6177c6f81e0cd98edda46f62</anchor>
      <arglist>(const DoubleBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a4544a74c192a7cb47f0e5e87c7f9316b</anchor>
      <arglist>(const DoubleBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a59a4867bfe9f65b11252eeb457b3b4f5</anchor>
      <arglist>(const DoubleBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a4d151a72788e307e953156cbdfcd204b</anchor>
      <arglist>(const DoubleBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DoubleBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>af4624a4ba61d994712a721242e250dc8</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DoubleBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a308d1e1a96001cd6f453e827589ec1f4</anchor>
      <arglist>(double *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DoubleBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>acef056ab74950ca31e62c71e57c4d76d</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DoubleBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_double_buffer.html</anchorfile>
      <anchor>a659508dc379832ab99541fd2844c5f40</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::FloatBuffer</name>
    <filename>classdecaf_1_1nio_1_1_float_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>Comparable&lt; FloatBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FloatBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a7e2017f51255de6f5e156a7dc8aa9c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a3f4006b8558fada4d0963c558ff8e0c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a8882efdb6f62413e89422165f97a4628</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a9faf36fbec71da3c7313e14e7bc1da62</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a9ebfb3b86ec2b1769ea299a7bdffd5db</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>ae435562181cf3f7e2036f8972c8c6dd6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a2666903c25373579106f007f7ecf8ea7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a886ee2039b900ed523f771a0fc1be6d1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a870973fb3c36632c8f704041ad8506b7</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>FloatBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a9b5a1003b51986e3cfd0be9b63c2538e</anchor>
      <arglist>(std::vector&lt; float &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>FloatBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a62c39b9142763dfda23e69799fd5a25f</anchor>
      <arglist>(float *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a88154fd049f46863a513475b8d851df4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a8d7c86b0c55e984c34fa54cbb8b16c9b</anchor>
      <arglist>(FloatBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>ab59eacb462a4caeadef686d8ad01add6</anchor>
      <arglist>(const float *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a5aae67d446eed423b3925f1444453228</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a95b404359a552af4bd8343f29a003596</anchor>
      <arglist>(float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a7b2742c912194ce9ccaa5defcb41a830</anchor>
      <arglist>(int index, float value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>acfbf648725e2f2040f2c00f3e6ed4590</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>a8237445f21f78adc447eff67e4b3f0de</anchor>
      <arglist>(const FloatBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>ab7a4a2410635eef92068f377fa783c50</anchor>
      <arglist>(const FloatBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>afc25b2993b3312874a782452f76a4c95</anchor>
      <arglist>(const FloatBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>ae94408d13ceb54e29c1e638b5f08fd3c</anchor>
      <arglist>(const FloatBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>aa9f59871f5355bed992238fad0b5e5b5</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>ade169a89a16a39092371a0baaa7d5f7d</anchor>
      <arglist>(float *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>af0011402852e00c89cdf4335ee1c1457</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FloatBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_float_buffer.html</anchorfile>
      <anchor>aa55726864eafdc5a31d054558c8e5546</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::IntBuffer</name>
    <filename>classdecaf_1_1nio_1_1_int_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>Comparable&lt; IntBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a236216e01b2262a179cd20a2bb6fba15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>af8ff7194e0610595dc64bffe164e71f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a10c87035d4f7424e6b87eb7f892a6790</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a4cf48ed1a6d41f2ba9e9cfa787ff5ea6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a5650ad31c7062e8d91fa7df51f7c45dc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>ab37d39dce20e2589734d2a335e9446f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a519ae18019cc11f4e3b7aaf954e32179</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>aaa0d08eb81a1a4d1c22c31fea71ea293</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>ae306b2a05cea24067decbebe64933cbb</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>IntBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>ae7d3662fae04151574e906385c252c6a</anchor>
      <arglist>(std::vector&lt; int &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>IntBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>af578ccba5712e7c94f1925383a81fa41</anchor>
      <arglist>(int *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>aa6251fa957e4603535608349d48c44fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a2d541526bdc024e8ba3aae2fd02355be</anchor>
      <arglist>(IntBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a6438f0b3022f6b77c978a7efa6e7def9</anchor>
      <arglist>(const int *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a85cbd93ad97fa93d5a9654787dabb1c0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a4454561dcc297b36810a36c450347b14</anchor>
      <arglist>(int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a2b603768da8249d52c8dcc2a2d2ee57d</anchor>
      <arglist>(int index, int value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>abc38a155a8d7279ca77bcb799a5166e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a8426e6eab6e98f951a24023aa7de054c</anchor>
      <arglist>(const IntBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a19efe2c89f6782be883e744fc9542451</anchor>
      <arglist>(const IntBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a0bfbbfd5bdbcb56ccfba6407be238f7e</anchor>
      <arglist>(const IntBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>ab91fe54049526f6ab5d6d5e33fb6cbe2</anchor>
      <arglist>(const IntBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a9ed47747450596bc3151222523c6483d</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>aaedc74d86799517c32ad2683ff5e49cd</anchor>
      <arglist>(int *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>abaf9a7e92ba76a2c481ddef04d3e4569</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_int_buffer.html</anchorfile>
      <anchor>a6dfac9533c562b463346bfe3f81969a9</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::InvalidMarkException</name>
    <filename>classdecaf_1_1nio_1_1_invalid_mark_exception.html</filename>
    <base>decaf::lang::exceptions::IllegalStateException</base>
    <member kind="function">
      <type></type>
      <name>InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>a83604c3fb927cc7281fe37c6c3b3a0a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>a25d9c64609b94f49dfaff781652f0c02</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>aa4f5fc6e1cd799e2c91d7f37dc2af735</anchor>
      <arglist>(const InvalidMarkException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>a0a5f5c44b3994f683eac9012d32e275d</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>a91355cd5b25bb152cb53b18538ef40fa</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>a035152f54028af420cb425f10779f47c</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InvalidMarkException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>a1eedc05003d4bce40cf0fad606d2287d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvalidMarkException</name>
      <anchorfile>classdecaf_1_1nio_1_1_invalid_mark_exception.html</anchorfile>
      <anchor>ad330405a888057e793e6ad27a39b0c0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::LongBuffer</name>
    <filename>classdecaf_1_1nio_1_1_long_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>Comparable&lt; LongBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LongBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a9b96267b0e45d17a15bc954a984e0952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a74b9c4c392b105dcbc01ab6c6100ddaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a5dd8164de8771ded102c2048e0a75e21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>af95611dac9e0a866d4925e4581d904b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a7ec98fbb4111e29cd8f4c6c4ca025c2e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a37c39f578af40da1b498f08728bbe093</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a3cb748419109fb8fc44c6487c2af562e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a165ab537f0688dbe0430b3ca3756a9c2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a0a032dc7e34c618c59517e8bc4ab8855</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>LongBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a863b11de0dededb1ec2980c00d5a942a</anchor>
      <arglist>(std::vector&lt; long long &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>LongBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a17ced74a214d267c351a0a6031d2f8ce</anchor>
      <arglist>(long long *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a84342189c9460320ffec587a5cd3e621</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a489c423f38a23764b4261ecb8b1dc889</anchor>
      <arglist>(LongBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a481954cc25bb9346c2463742f572e4a8</anchor>
      <arglist>(const long long *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>af28297d3d1adb3d810b8586ff97f61b8</anchor>
      <arglist>(std::vector&lt; long long &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a27b05e75710252de3202ff7ace665cda</anchor>
      <arglist>(long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>aba06625740c2dd4d8b649e753a3c6aeb</anchor>
      <arglist>(int index, long long value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LongBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>aae26944ed332588dc9aadfa61750f035</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>aab7cf9264f5ca89e367e279910b1422d</anchor>
      <arglist>(const LongBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>ab1013ff819cc083108bee816574e77b5</anchor>
      <arglist>(const LongBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a89effdd6e9f946cc2861dd436db79017</anchor>
      <arglist>(const LongBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>ab784b4984a66a07edc116fbeb9aed4e8</anchor>
      <arglist>(const LongBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LongBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a02883a576fe67a05e3ed39e6a3da1b97</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LongBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a920258509bd1324ec0808dc0cf0ac26e</anchor>
      <arglist>(long long *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LongBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>af26982a14ad7e8d9444dc467174998e1</anchor>
      <arglist>(std::vector&lt; long long &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LongBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_long_buffer.html</anchorfile>
      <anchor>a1ca40bf7c6a7d033e9cce5faf0e5bae1</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::ReadOnlyBufferException</name>
    <filename>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</filename>
    <base>decaf::lang::exceptions::UnsupportedOperationException</base>
    <member kind="function">
      <type></type>
      <name>ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>a89154bb0496cdedafaf6489c02c6541f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>a66e1e103973c83c0af54840a718f3a6f</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>aaf32095248661188db6fe47c10e3976e</anchor>
      <arglist>(const ReadOnlyBufferException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>aaa19fd1f76585877a8cbbc1b5f3eda71</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>a776bb664ce47e8d0cdf59184d38d8b45</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>adab1d1b81ce1d37f637a3cb9033919a9</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReadOnlyBufferException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>a5820b8d249271cd4f8f01c193e6edbde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReadOnlyBufferException</name>
      <anchorfile>classdecaf_1_1nio_1_1_read_only_buffer_exception.html</anchorfile>
      <anchor>ac93f24fd205148962f4c1c58dfebd005</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::nio::ShortBuffer</name>
    <filename>classdecaf_1_1nio_1_1_short_buffer.html</filename>
    <base>decaf::nio::Buffer</base>
    <base>Comparable&lt; ShortBuffer &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShortBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a3144d734d7b45216033550b19621f564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>af43b688f129004c92118ba18ed501ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short *</type>
      <name>array</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>aae48b8fa63b0781a55506afee49d49f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>arrayOffset</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a9ed2a6bf68daf6561698e31b6dff9352</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer *</type>
      <name>asReadOnlyBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a474955387189e0ad10f384539ef7f812</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer &amp;</type>
      <name>compact</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>abedb5bccbb0203f998f1381468123380</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer *</type>
      <name>duplicate</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a0f737874621c593681943b66586d457c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a11a1ad431c25677355ec9465119e2520</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a48aa3b8974e353033b6ef2d6c50aaa4f</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <type>ShortBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a3b7e1a645874b06925ebf921ff35cd09</anchor>
      <arglist>(std::vector&lt; short &gt; buffer)</arglist>
    </member>
    <member kind="function">
      <type>ShortBuffer &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a62ab5fc1548ac9fabbea7f0beb9b98b5</anchor>
      <arglist>(short *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasArray</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>ae7e7748c4c57f001f1ee5b8af3895e05</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>ad9b2d13ebb4be88a03da31765f22fa2c</anchor>
      <arglist>(ShortBuffer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a873b0e1d050df0eaa0e99876ce7dec11</anchor>
      <arglist>(const short *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>aff71044e42e1b1b5c3bec7c283fe2a46</anchor>
      <arglist>(std::vector&lt; short &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a78b761d759217426a7a9aaf5d503f867</anchor>
      <arglist>(short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer &amp;</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a7e19732e6564cab2207830d0de94a486</anchor>
      <arglist>(int index, short value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShortBuffer *</type>
      <name>slice</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>ad7ddb7f4eb8946193c210b719a75c98f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a44c66c07d057f13c3506e839a09e17c8</anchor>
      <arglist>(const ShortBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>ad26438234b034324fbf88248ffe2bc11</anchor>
      <arglist>(const ShortBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>afa6d61c665e60f21cc29d9e8918083f5</anchor>
      <arglist>(const ShortBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a94f878f35798da023ea5447b7c77a5c8</anchor>
      <arglist>(const ShortBuffer &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShortBuffer *</type>
      <name>allocate</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a9a07650359a405c15744230d17b93bca</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShortBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>a244d07f4b63ec3d39688b5bf82c396c4</anchor>
      <arglist>(short *array, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShortBuffer *</type>
      <name>wrap</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>aee4cd5835ee19d167ca58527b5751e4e</anchor>
      <arglist>(std::vector&lt; short &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShortBuffer</name>
      <anchorfile>classdecaf_1_1nio_1_1_short_buffer.html</anchorfile>
      <anchor>addc5475772f25e962829f0d4fd0d6f05</anchor>
      <arglist>(int capacity)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::security</name>
    <filename>namespacedecaf_1_1security.html</filename>
    <namespace>decaf::security::auth</namespace>
    <namespace>decaf::security::cert</namespace>
    <class kind="class">decaf::security::GeneralSecurityException</class>
    <class kind="class">decaf::security::InvalidKeyException</class>
    <class kind="class">decaf::security::Key</class>
    <class kind="class">decaf::security::KeyException</class>
    <class kind="class">decaf::security::KeyManagementException</class>
    <class kind="class">decaf::security::NoSuchAlgorithmException</class>
    <class kind="class">decaf::security::NoSuchProviderException</class>
    <class kind="class">decaf::security::Principal</class>
    <class kind="class">decaf::security::PublicKey</class>
    <class kind="class">decaf::security::SecureRandom</class>
    <class kind="class">decaf::security::SecureRandomSpi</class>
    <class kind="class">decaf::security::SignatureException</class>
  </compound>
  <compound kind="class">
    <name>decaf::security::GeneralSecurityException</name>
    <filename>classdecaf_1_1security_1_1_general_security_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>ab5f549abdde577084b509e00e1c231da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>a3226cd99fddc2aee30ee98bcd04e71dc</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>a79bdf1c6057b9cd3bb3d1076b6a97ac2</anchor>
      <arglist>(const GeneralSecurityException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>ada68b3d99ec971b6abff22261347d6bf</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>adb9d34d9bd39c57fcf6be9465754f4ab</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>a04f6a48236038c0652db77d1f7cc791a</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GeneralSecurityException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>a02f777aa2ac16b08b7297f274956c976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeneralSecurityException</name>
      <anchorfile>classdecaf_1_1security_1_1_general_security_exception.html</anchorfile>
      <anchor>a6da61805eb365e527890209e034bdab7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::InvalidKeyException</name>
    <filename>classdecaf_1_1security_1_1_invalid_key_exception.html</filename>
    <base>decaf::security::KeyException</base>
    <member kind="function">
      <type></type>
      <name>InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>aa8176b514be13cfe825321ecef347abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>a969a62f4eaa04be2e200bc0d08cd1cf0</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>ae9abe6f24387fad1769a8c0153720351</anchor>
      <arglist>(const InvalidKeyException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>ab73488e88ee4a9e35878a2ce83b6f5ff</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>a11fdf763261c90015a0e6b9c89f07bc8</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>a7ba4f8066687d132172ff8cb167bdebb</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InvalidKeyException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>accd38e432a6d619c9c1ff1ad27d88b97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvalidKeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_invalid_key_exception.html</anchorfile>
      <anchor>a01eb4c8bf3db791aa08ad56fcbde5764</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::Key</name>
    <filename>classdecaf_1_1security_1_1_key.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Key</name>
      <anchorfile>classdecaf_1_1security_1_1_key.html</anchorfile>
      <anchor>a9471f1f01238c1b1040bd66d259ec693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getAlgorithm</name>
      <anchorfile>classdecaf_1_1security_1_1_key.html</anchorfile>
      <anchor>a44982e4c3a1345fa80ea34ba27bea608</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEncoded</name>
      <anchorfile>classdecaf_1_1security_1_1_key.html</anchorfile>
      <anchor>a3aba622c9f3bc57b6010f18b4ba218ce</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getFormat</name>
      <anchorfile>classdecaf_1_1security_1_1_key.html</anchorfile>
      <anchor>a57c922586f9785c2aecd53fc07cffa1c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::KeyException</name>
    <filename>classdecaf_1_1security_1_1_key_exception.html</filename>
    <base>decaf::security::GeneralSecurityException</base>
    <member kind="function">
      <type></type>
      <name>KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>a78c13514f09c510a9bbc71a3a7ed2188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>a2146ca20fcb81bb560aa5185353031d9</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>a728135ffd72e31aa5a40de7b2a4b8fb4</anchor>
      <arglist>(const KeyException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>afca85c67dc2cef22172c44f35bc80023</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>a498d24b29ad510a6970c7ae81afdae95</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>abd05801717d8ca7ef7b749abf761d77e</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeyException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>ad9ab78f1eb6a0301fba89a941b64bde0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_exception.html</anchorfile>
      <anchor>ae3e0ae82f50bcfac93155e9b51fdff7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::KeyManagementException</name>
    <filename>classdecaf_1_1security_1_1_key_management_exception.html</filename>
    <base>decaf::security::KeyException</base>
    <member kind="function">
      <type></type>
      <name>KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>a49d06ca3e7f054dc6466bdf4944041a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>a50657e2d23fe0a2bf8bbb46141185404</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>acd5dd35536c6c9a75ddf367968376d41</anchor>
      <arglist>(const KeyManagementException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>a91eade2253abde803196dd1244425065</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>a3986ba54d136eadd4736449a18d99162</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>a8361a9c0e3144491fec0ab2b998c58f5</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeyManagementException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>a28972cdda1f78d03775a8fabfbb23a08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyManagementException</name>
      <anchorfile>classdecaf_1_1security_1_1_key_management_exception.html</anchorfile>
      <anchor>abcbafcdf0b5c5d1b164184fc7e6ad828</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::NoSuchAlgorithmException</name>
    <filename>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</filename>
    <base>decaf::security::GeneralSecurityException</base>
    <member kind="function">
      <type></type>
      <name>NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>ae88af93dd794d8540b0de464d4dd0a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>a54cf1d5bb9d2c7f4865633476e4c3b77</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>afa277a9a4320a1dc28c8e65e934a20b8</anchor>
      <arglist>(const NoSuchAlgorithmException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>afa6dcfcfc40ee1cbc57c0a31f1e2be2e</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>a1cd282c39b0426077bc4a2e230ae8f22</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>abce523b50fea1d0cd25e289f326ef3cb</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoSuchAlgorithmException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>a27bf408730837e3a39e09b10e77fd255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoSuchAlgorithmException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_algorithm_exception.html</anchorfile>
      <anchor>a65bfa68953f82890873f4219405a20ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::NoSuchProviderException</name>
    <filename>classdecaf_1_1security_1_1_no_such_provider_exception.html</filename>
    <base>decaf::security::GeneralSecurityException</base>
    <member kind="function">
      <type></type>
      <name>NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>a86f63fec38717e44f4a945877bd9fbfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>ab5f6edc79d142309843649e35e467f89</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>a68b842de0532690122dd5ffc2bae3ac4</anchor>
      <arglist>(const NoSuchProviderException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>a0c1bf8bd8ae4ce18dd901c4725d41475</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>adaff55bcecb6170b9b8dd18ed7033004</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>a076449a86f5b594f404fc606b25bb68c</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoSuchProviderException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>a69a51ff4352504fc80f246403d327cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoSuchProviderException</name>
      <anchorfile>classdecaf_1_1security_1_1_no_such_provider_exception.html</anchorfile>
      <anchor>aff881d2b2642a5282022c56fdeed11b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::Principal</name>
    <filename>classdecaf_1_1security_1_1_principal.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Principal</name>
      <anchorfile>classdecaf_1_1security_1_1_principal.html</anchorfile>
      <anchor>ac0a0a0c1336961b4064478441828fb15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1security_1_1_principal.html</anchorfile>
      <anchor>a8f61a0d43c96761dd3da390e39af1d25</anchor>
      <arglist>(const Principal &amp;another) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classdecaf_1_1security_1_1_principal.html</anchorfile>
      <anchor>a88ecdce0e0a83e55ffe91845a6dc62a7</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::PublicKey</name>
    <filename>classdecaf_1_1security_1_1_public_key.html</filename>
    <base>decaf::security::Key</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PublicKey</name>
      <anchorfile>classdecaf_1_1security_1_1_public_key.html</anchorfile>
      <anchor>a330910f5bbe1184baba961c75435b0c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::SecureRandom</name>
    <filename>classdecaf_1_1security_1_1_secure_random.html</filename>
    <base>decaf::util::Random</base>
    <member kind="function">
      <type></type>
      <name>SecureRandom</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>a1ed4b76d0de3274927304b33470d4203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SecureRandom</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>a7aefd0530d32e2ddf3ace4b5416981ac</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SecureRandom</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>a773137fa4a2c9cc89dedc283b5a3e8b2</anchor>
      <arglist>(const unsigned char *seed, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecureRandom</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>a2753a2e45c806bceb0fd77d4e626a837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextBytes</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>acb5a8c4360c94a9d67fcdfd3a430aa36</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextBytes</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>ae55c9dfac271a4ddca5eec10a8e84cd3</anchor>
      <arglist>(unsigned char *buf, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeed</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>aba56dc952fdd53bba902ad64cd9469ef</anchor>
      <arglist>(unsigned long long seed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeed</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>a705119f86de5c9f4d61ce8bb8a2adaac</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;seed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeed</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>a2ed792b5b7ed4e64b2bd929dc58497d3</anchor>
      <arglist>(const unsigned char *seed, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>next</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random.html</anchorfile>
      <anchor>ab83c7635a4c4604fb0eaf7b6e519353a</anchor>
      <arglist>(int bits)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::SecureRandomSpi</name>
    <filename>classdecaf_1_1security_1_1_secure_random_spi.html</filename>
    <member kind="function">
      <type></type>
      <name>SecureRandomSpi</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random_spi.html</anchorfile>
      <anchor>aab59b6ae944354de6f1e07dbf995a99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecureRandomSpi</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random_spi.html</anchorfile>
      <anchor>ad9d5e96d8e65c37df334e1b8d8090335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>providerSetSeed</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random_spi.html</anchorfile>
      <anchor>a8705685b82908bf647d55de0b7a6221f</anchor>
      <arglist>(const unsigned char *seed, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>providerNextBytes</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random_spi.html</anchorfile>
      <anchor>a0f59b8b5c12787c8a8edb4ee4c77a16c</anchor>
      <arglist>(unsigned char *bytes, int numBytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char *</type>
      <name>providerGenerateSeed</name>
      <anchorfile>classdecaf_1_1security_1_1_secure_random_spi.html</anchorfile>
      <anchor>a147f35626e7a832c22efe9b0556d4a44</anchor>
      <arglist>(int numBytes)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::SignatureException</name>
    <filename>classdecaf_1_1security_1_1_signature_exception.html</filename>
    <base>decaf::security::GeneralSecurityException</base>
    <member kind="function">
      <type></type>
      <name>SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a8be00513cd16618a0ee4f9eb1efc3415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a917a98e6b5f73c2653a87c01d3fe899c</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a10fd90235a63ce5f92ff9357c2fd78e7</anchor>
      <arglist>(const SignatureException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a93a4f927bc7e45acc516053c15cdafe8</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a771dd90dbb81cfced36c80f197c66f91</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a8d2ab75de3a44f3d2bca4ac3763c6f83</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SignatureException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>a8c33819bcd662ca5aae5b99e80095b07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SignatureException</name>
      <anchorfile>classdecaf_1_1security_1_1_signature_exception.html</anchorfile>
      <anchor>acd3d77b15a8f0227c2fe1cc216b0b395</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::security::auth</name>
    <filename>namespacedecaf_1_1security_1_1auth.html</filename>
    <namespace>decaf::security::auth::x500</namespace>
  </compound>
  <compound kind="namespace">
    <name>decaf::security::auth::x500</name>
    <filename>namespacedecaf_1_1security_1_1auth_1_1x500.html</filename>
    <class kind="class">decaf::security::auth::x500::X500Principal</class>
  </compound>
  <compound kind="class">
    <name>decaf::security::auth::x500::X500Principal</name>
    <filename>classdecaf_1_1security_1_1auth_1_1x500_1_1_x500_principal.html</filename>
    <base>decaf::security::Principal</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~X500Principal</name>
      <anchorfile>classdecaf_1_1security_1_1auth_1_1x500_1_1_x500_principal.html</anchorfile>
      <anchor>a28fbca25d034d4cc1725e46b5797c68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classdecaf_1_1security_1_1auth_1_1x500_1_1_x500_principal.html</anchorfile>
      <anchor>a8f14e7dd9b7eaea108e038d10b13bf64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEncoded</name>
      <anchorfile>classdecaf_1_1security_1_1auth_1_1x500_1_1_x500_principal.html</anchorfile>
      <anchor>a6431046babb78e280ef2e24c274093e5</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>hashCode</name>
      <anchorfile>classdecaf_1_1security_1_1auth_1_1x500_1_1_x500_principal.html</anchorfile>
      <anchor>afb3424f8c7e1215d5e76d4b220b49a28</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::security::cert</name>
    <filename>namespacedecaf_1_1security_1_1cert.html</filename>
    <class kind="class">decaf::security::cert::Certificate</class>
    <class kind="class">decaf::security::cert::CertificateEncodingException</class>
    <class kind="class">decaf::security::cert::CertificateException</class>
    <class kind="class">decaf::security::cert::CertificateExpiredException</class>
    <class kind="class">decaf::security::cert::CertificateNotYetValidException</class>
    <class kind="class">decaf::security::cert::CertificateParsingException</class>
    <class kind="class">decaf::security::cert::X509Certificate</class>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::Certificate</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_certificate.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Certificate</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>a94c0b8a66f6eb2babef58f6a0b51b930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>af6ef06a7d37b309ac46a73fb7821151f</anchor>
      <arglist>(const Certificate &amp;cert) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEncoded</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>ace5837fdd733608990cf004ea8310a75</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>a3787eee0ead52b11a85464a05fef3be7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PublicKey *</type>
      <name>getPublicKey</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>ab98e0cfb5eff23bb50a86c6465858bd9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const PublicKey *</type>
      <name>getPublicKey</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>a8a4145cf150af78011f618c6152dd8e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>verify</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>a0f3b631b45d461e461e497fd6906f91a</anchor>
      <arglist>(const PublicKey &amp;publicKey) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>verify</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>afbf13d8bb0222b63810a6c85f343010f</anchor>
      <arglist>(const PublicKey &amp;publicKey, const std::string &amp;sigProvider) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate.html</anchorfile>
      <anchor>aa7e6dd80260f54f34965f4918dde187c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::CertificateEncodingException</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</filename>
    <base>decaf::security::cert::CertificateException</base>
    <member kind="function">
      <type></type>
      <name>CertificateEncodingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</anchorfile>
      <anchor>ae358ca04a6f5fc93b5bdff08877333cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateEncodingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</anchorfile>
      <anchor>ad7607c380e5bdfb98095c657e2763501</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateEncodingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</anchorfile>
      <anchor>aaad7e13cf673d3764b4443bac8fabf5f</anchor>
      <arglist>(const CertificateEncodingException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateEncodingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</anchorfile>
      <anchor>a2bd35005317bad468819a61c7420f566</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CertificateEncodingException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</anchorfile>
      <anchor>aec9aea7bb1733f6eecc7e62d1aa34fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CertificateEncodingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_encoding_exception.html</anchorfile>
      <anchor>aee79b019766f43dc4e1d83a69aba6454</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::CertificateException</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</filename>
    <base>decaf::security::GeneralSecurityException</base>
    <member kind="function">
      <type></type>
      <name>CertificateException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</anchorfile>
      <anchor>a714c7586b21485c7540147ce90d9b9c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</anchorfile>
      <anchor>aaef2fb161b6962ce09a78b8febdef3db</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</anchorfile>
      <anchor>af097202ec0e0a6e47bd3909b80eb554f</anchor>
      <arglist>(const CertificateException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</anchorfile>
      <anchor>afc8eae6f6f22fee6bbc59e9a8ca0212c</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CertificateException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</anchorfile>
      <anchor>a634bee0a24ee5c23eb3d99a547389644</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CertificateException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_exception.html</anchorfile>
      <anchor>a4fec8ab0a453a25f1c9940fcbefddde4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::CertificateExpiredException</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</filename>
    <base>decaf::security::cert::CertificateException</base>
    <member kind="function">
      <type></type>
      <name>CertificateExpiredException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</anchorfile>
      <anchor>a9e50e8f1dc96585e48593576f8fd6494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateExpiredException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</anchorfile>
      <anchor>ade5172677180fcf28a170771d4ed21d8</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateExpiredException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</anchorfile>
      <anchor>a0e4ba3b17add7201f988e279cce7ba3d</anchor>
      <arglist>(const CertificateExpiredException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateExpiredException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</anchorfile>
      <anchor>a1f38f1d7db48c68483a500fb5b377e44</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CertificateExpiredException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</anchorfile>
      <anchor>a6e2087eb2c49f8b285da6ffc79d0b95a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CertificateExpiredException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_expired_exception.html</anchorfile>
      <anchor>a75ee9e5520c6c128a3e1d2dde0ee22cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::CertificateNotYetValidException</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</filename>
    <base>decaf::security::cert::CertificateException</base>
    <member kind="function">
      <type></type>
      <name>CertificateNotYetValidException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</anchorfile>
      <anchor>a588a829e64e424a248f259393210c9d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateNotYetValidException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</anchorfile>
      <anchor>a6b49f9e943cc91702a0cd8a09a4a84e9</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateNotYetValidException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</anchorfile>
      <anchor>a5a84ad2ff57da50eae95cc0590d344a8</anchor>
      <arglist>(const CertificateNotYetValidException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateNotYetValidException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</anchorfile>
      <anchor>a7b33d5c8cd604a5c47c65f83cf4fd309</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CertificateNotYetValidException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</anchorfile>
      <anchor>ad9df2e58b16793864229c1b6f45c9105</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CertificateNotYetValidException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_not_yet_valid_exception.html</anchorfile>
      <anchor>a3607c39523add37b8312aa0d10ae66ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::CertificateParsingException</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</filename>
    <base>decaf::security::cert::CertificateException</base>
    <member kind="function">
      <type></type>
      <name>CertificateParsingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</anchorfile>
      <anchor>a3798a61fb50325bd79f3539660dd4fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateParsingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</anchorfile>
      <anchor>a7b65f29e551d8d692b9cdec901994cc4</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateParsingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</anchorfile>
      <anchor>a25f52a846bf2b5bd30f0d88bcf7c9a9d</anchor>
      <arglist>(const CertificateParsingException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CertificateParsingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</anchorfile>
      <anchor>a5f91bbe8d62c0c2e412a7b712d4c6f39</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CertificateParsingException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</anchorfile>
      <anchor>acbc56200c61479215a570a9c4456ee4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CertificateParsingException</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_certificate_parsing_exception.html</anchorfile>
      <anchor>a139163242ef1030c6fbcc4dcdf31754c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::security::cert::X509Certificate</name>
    <filename>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</filename>
    <base>decaf::security::cert::Certificate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~X509Certificate</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>ae24fdc031a6b8da586dc057949ffb1f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkValidity</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a8975fc67979c7757708275d083faf6da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkValidity</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>aba4735c4eda258cc75caf4465b655689</anchor>
      <arglist>(const decaf::util::Date &amp;date) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBasicConstraints</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>ad1756d297c4c49797c1d138905a71ce1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIssuerUniqueID</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a81a93cfa6af19795715597c1d6dcc687</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const X500Principal *</type>
      <name>getIssuerX500Principal</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a7be8ef251930765fa0a5e0d11672abdc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getKeyUsage</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a306a29e1b87ab438c3c2eca631c4dba5</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Date</type>
      <name>getNotAfter</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a1b6d4333e0b9e97c9f94940141fa764b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Date</type>
      <name>getNotBefore</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>ac8c6a27d54f3f1c8596362947f763b6e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getSigAlgName</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>ada1d6954e1964fef7a6076d510368567</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getSigAlgOID</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>ae0eeada1896d2b1539c1838ba2898474</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSigAlgParams</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a64062b46246614524f3f3785c4403d34</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSignature</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>ace1880bf8163ccb9d360c26932500525</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSubjectUniqueID</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a4e881ca54fffe76eca39c48fa022b8d6</anchor>
      <arglist>(std::vector&lt; bool &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const X500Principal *</type>
      <name>getSubjectX500Principal</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>af55b7de88946bbbe3a4632b8deeb2d2f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTBSCertificate</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>a8af495ec2851cf32b5c1e04bbb62dcea</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;output) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getVersion</name>
      <anchorfile>classdecaf_1_1security_1_1cert_1_1_x509_certificate.html</anchorfile>
      <anchor>af21f39287e37e466a31f41dfe99e0f00</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util</name>
    <filename>namespacedecaf_1_1util.html</filename>
    <namespace>decaf::util::comparators</namespace>
    <namespace>decaf::util::concurrent</namespace>
    <namespace>decaf::util::logging</namespace>
    <namespace>decaf::util::zip</namespace>
    <class kind="class">decaf::util::AbstractCollection</class>
    <class kind="class">decaf::util::AbstractList</class>
    <class kind="class">decaf::util::AbstractMap</class>
    <class kind="class">decaf::util::AbstractQueue</class>
    <class kind="class">decaf::util::AbstractSequentialList</class>
    <class kind="class">decaf::util::AbstractSet</class>
    <class kind="class">decaf::util::ArrayList</class>
    <class kind="class">decaf::util::Arrays</class>
    <class kind="class">decaf::util::Collection</class>
    <class kind="class">decaf::util::Comparator</class>
    <class kind="class">decaf::util::ConcurrentModificationException</class>
    <class kind="class">decaf::util::Date</class>
    <class kind="class">decaf::util::Deque</class>
    <class kind="class">decaf::util::Iterator</class>
    <class kind="class">decaf::util::LinkedList</class>
    <class kind="class">decaf::util::List</class>
    <class kind="class">decaf::util::ListIterator</class>
    <class kind="class">decaf::util::Map</class>
    <class kind="class">decaf::util::NoSuchElementException</class>
    <class kind="class">decaf::util::PriorityQueue</class>
    <class kind="class">decaf::util::Properties</class>
    <class kind="class">decaf::util::Queue</class>
    <class kind="class">decaf::util::Random</class>
    <class kind="class">decaf::util::Set</class>
    <class kind="class">decaf::util::StlList</class>
    <class kind="class">decaf::util::StlMap</class>
    <class kind="class">decaf::util::StlQueue</class>
    <class kind="class">decaf::util::StlSet</class>
    <class kind="class">decaf::util::StringTokenizer</class>
    <class kind="class">decaf::util::Timer</class>
    <class kind="class">decaf::util::TimerTask</class>
    <class kind="class">decaf::util::UUID</class>
  </compound>
  <compound kind="class">
    <name>decaf::util::AbstractCollection</name>
    <filename>classdecaf_1_1util_1_1_abstract_collection.html</filename>
    <templarg>E</templarg>
    <base virtualness="virtual">decaf::util::Collection</base>
    <member kind="function">
      <type></type>
      <name>AbstractCollection</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a023d59cba778b9203425994df13a74fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractCollection</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>ab75f278f2f2d546aa66886a56cdf98ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractCollection&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>abfaad5fd7043694c69777ee8cae6d15e</anchor>
      <arglist>(const AbstractCollection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>af2675df16b822ac2ba7868b927e80f5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>aa07825c6958724499129a10d65e7e870</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>ae9f003bc1db10e347afa595979fc4c05</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a894957e0b25c2e644768d7a4bc7a9fe3</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a71b1212b02bf74cb3b99b8cac85206f6</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>adff8de8d2b0f370696265aab914df735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a61f280e58cac3e20555dd0bb86e8af41</anchor>
      <arglist>(const E &amp;value DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>acadd931b12f360bbd50b760d83ab865e</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a6eca5f5f78ac51a1b614da00c7ad2504</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a81173a3be679e43e2e1b3eb5a49d0a48</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>retainAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>aa13a20cde33444038e6765c00d6174fa</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a167776fb00a8924828424616e3b6f3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a58b06349287bdd9cbf2f84aa7dcff7ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>adbd1278f965b7205dc8e8f89fc82872e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a38970b1447b07759aec046c3a57c53e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a5f5d42c10b67b8268e662d77d6587a04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a982c24b4001d02d97dd42ffac473c0cc</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a9e6aee6d1f92e48e26b825fe7df7756b</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>a7195f1edb2675724a361d71f281220eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>af53d06c51e7aa21f9a30acc4ae31e783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>util::concurrent::Mutex</type>
      <name>mutex</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_collection.html</anchorfile>
      <anchor>aaa677cc1920e56a57a88bd2159b1ed96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::AbstractList</name>
    <filename>classdecaf_1_1util_1_1_abstract_list.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::List</base>
    <base>decaf::util::AbstractCollection</base>
    <class kind="class">decaf::util::AbstractList::ConstSimpleListIterator</class>
    <class kind="class">decaf::util::AbstractList::SimpleListIterator</class>
    <member kind="function">
      <type></type>
      <name>AbstractList</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>ae93c67eb36c1127fb2c9be0c0f2c3908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractList</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>aeb5784838a951c31838ab6e5703691e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>ae37fb99c3bd4768d37876fa8cd5b00bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a4c5711c653e2a800181ed1741c4ad947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a6a45d9e7b7c7b0684fc12f7459d072db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a9fe99fa2243a39da5e02cadae03f4895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a4ebca1ecd221c007eafffa08a41c59ef</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a9158a2fa2060e49f8f96f4c73ce81bec</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a4484d0639c2329b873a9303060bcfe5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>ad0785faf185b1c6ca8c642a200f9dbeb</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>ab8bc8dfe8ffbd2f0b14d91b5f9246f09</anchor>
      <arglist>(int index DECAF_UNUSED, const E &amp;element DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>ad2ee373de54aebf633d39cfe6c843bbc</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeAt</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>ad38829794ad3669460b1bebaadb1280f</anchor>
      <arglist>(int index DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>aedc790631e2d31e14a7da80fbf8a9174</anchor>
      <arglist>(int index DECAF_UNUSED, const E &amp;element DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>aebab2f95a1bfdfbacaae8bac266b691b</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>af62f2ef36af8372283ce337a4f3f73c3</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeRange</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a6b3e789d1f225283d7bdfe208cc06394</anchor>
      <arglist>(int start, int end)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>modCount</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_list.html</anchorfile>
      <anchor>a7e28e12f1f7a4f1466030a45a3c04c14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::AbstractMap</name>
    <filename>classdecaf_1_1util_1_1_abstract_map.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>decaf::util::Map</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractMap</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_map.html</anchorfile>
      <anchor>a868eb960b150e9bd88e5b145fc74d368</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::AbstractQueue</name>
    <filename>classdecaf_1_1util_1_1_abstract_queue.html</filename>
    <templarg></templarg>
    <base>decaf::util::Queue</base>
    <base>decaf::util::AbstractCollection</base>
    <member kind="function">
      <type></type>
      <name>AbstractQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>a9e30775f8996ec221119e559d13ca358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>ad0eceba7b7bc3047cf66bedb58aef514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>a281d28a75ee76f4696644c9c56ca0070</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>a4bb591c5a54ecf52a665ae0583f56c0b</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>abe6390cc567a624d545886b89c89975a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>element</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>a69e1b64fa43b083702f23ac3261ddadf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_queue.html</anchorfile>
      <anchor>aad23c7d39e8189aacada830a171f59be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::AbstractSequentialList</name>
    <filename>classdecaf_1_1util_1_1_abstract_sequential_list.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractList</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSequentialList</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>ac81021f11938ff2845a2f3abb855af6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>a58c9a4978c785e51c944427f1f0792c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>aab7646680015ff765108badda18a1a5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>ac6b63528cceb898fd647469bc94f3997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>a120bcf0d6f55a6c3d195105a8cfaad60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>acc0a43e09006a84091fcbe437f5ba7fc</anchor>
      <arglist>(int index DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>abe3d47acc0b0fb59a41f3b79374b0681</anchor>
      <arglist>(int index DECAF_UNUSED) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>a47d9154cfe61aa249241da2e1c83b8b9</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>afc53495d8480da4fcd855aed0154c93b</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>add00233f3288416af0d422e6ec9597d3</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>a668a820a44b4256dfe5db07bf107cd53</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeAt</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_sequential_list.html</anchorfile>
      <anchor>a027578d332f98debdd3b1d0ccb80003d</anchor>
      <arglist>(int index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::AbstractSet</name>
    <filename>classdecaf_1_1util_1_1_abstract_set.html</filename>
    <templarg>E</templarg>
    <base virtualness="virtual">decaf::util::Set</base>
    <base virtualness="virtual">decaf::util::AbstractCollection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSet</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_set.html</anchorfile>
      <anchor>a3b942e349c02cc7267c74c8d94a0cdad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAll</name>
      <anchorfile>classdecaf_1_1util_1_1_abstract_set.html</anchorfile>
      <anchor>afe154183f20853e5c312436ff88ce63c</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::ArrayList</name>
    <filename>classdecaf_1_1util_1_1_array_list.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractList</base>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a233a6f5a80d332a61606444ab029478b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a528984eeae8ebe5f5d3764a580dd06fb</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a5291daca9572464dfdcb105a0a1dcb80</anchor>
      <arglist>(const ArrayList&lt; E &gt; &amp;arrayList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>ab1a0e148d38bea1bcc7fe5e13d05e54b</anchor>
      <arglist>(int initialCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a927b4486644fb5da398c7c6de1d6ada3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a8550e9cec41c430bf874852bf07b1701</anchor>
      <arglist>(const ArrayList&lt; E &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a1609c97bdf6dedfcc9f0d1d1a2c2ccdb</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureCapacity</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a0d140d32445e8bf1affe735c065f0d09</anchor>
      <arglist>(int minimumCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trimToSize</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>af103aa1d646ff91ff06338b3c94b3b33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a6bd07e15980d3963cd4b1d0b10035337</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a465a05d04ffb119eebf7c5437aa06818</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a065cd933d411ce3c75b38c3d5a7052e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a2407306c16a0a2c83e09444f05df3909</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a09344daa5b8f27a3c05a70e666728d57</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a76ed572b281417b766bf4104a6301e36</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>af23767103916dde62f11180cfa60799b</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>af215227e5d6ac25879ad17d03c58ecc9</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a5baa5c6b5ed39c27eef2e9b380581ff8</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>ae7b2f9e91123a42207f43b5daa68274d</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeAt</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a19ebdcdd66bb07fd810e07ebf62151e6</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a325d968c09f1508925dc646334f5deb8</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>af5f29a98eea26edc4eb7c67d56a5ac07</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>ab0ee110d59c993690d01e08010ef1d40</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a4994cb8a38f32595507a3aaff491a28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1_array_list.html</anchorfile>
      <anchor>a681f06ec69b66aaa5457ecbf7f150e7f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Arrays</name>
    <filename>classdecaf_1_1util_1_1_arrays.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Arrays</name>
      <anchorfile>classdecaf_1_1util_1_1_arrays.html</anchorfile>
      <anchor>a129a010efe92251758b3ff2fb78ef235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fill</name>
      <anchorfile>classdecaf_1_1util_1_1_arrays.html</anchorfile>
      <anchor>a1beeb36f2e1a8527d3978633a560f84b</anchor>
      <arglist>(E *array, int size, const E &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fill</name>
      <anchorfile>classdecaf_1_1util_1_1_arrays.html</anchorfile>
      <anchor>a67bbc6de02665fadd65ec6d8e063f065</anchor>
      <arglist>(E *array, int size, int start, int end, const E &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Collection</name>
    <filename>classdecaf_1_1util_1_1_collection.html</filename>
    <templarg>E</templarg>
    <base virtualness="virtual">decaf::lang::Iterable</base>
    <base virtualness="virtual">decaf::util::concurrent::Synchronizable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Collection</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a59aa142fda41edc8b9c937f7d3003842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>afc7c92a7acb97d171cb9fbbeab7a02fa</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a3b1fb8d6d75a6a8de1096e2af59c93b7</anchor>
      <arglist>(const E &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>ab1c54b20c3818a358cc8243b78d32e0a</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a2043e86d563eeb5ddca03093a57c9d1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a5c5d5c5afc33a49856fdcc68cb2998cd</anchor>
      <arglist>(const E &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsAll</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>ab15403655917022def98615388de363f</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a4b5678a72e37e2d6939eafb3e91c92f0</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>aefdd40e6bc9875cf50e2b7d5c10b94f7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>ad40a3d5aacf68dc3dbc39c7069e16adb</anchor>
      <arglist>(const E &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>removeAll</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a19f125b379fea151cbd97213bc03f203</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>retainAll</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a61b44f2112d99c6010d00fde6b4d1d09</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>aad34433902f20bd422f64b14f51998cf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_collection.html</anchorfile>
      <anchor>a0ccad8d05b8af0304daab3b66765692d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Comparator</name>
    <filename>classdecaf_1_1util_1_1_comparator.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Comparator</name>
      <anchorfile>classdecaf_1_1util_1_1_comparator.html</anchorfile>
      <anchor>a4c2f792e0f0d964a2cd4c57a89fc2cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classdecaf_1_1util_1_1_comparator.html</anchorfile>
      <anchor>aa797edede5f3b77ec824ce9ce96f21e3</anchor>
      <arglist>(const T &amp;left, const T &amp;right) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classdecaf_1_1util_1_1_comparator.html</anchorfile>
      <anchor>a2cf10ad10843c0ac7e762c1c435a1916</anchor>
      <arglist>(const T &amp;o1, const T &amp;o2) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::ConcurrentModificationException</name>
    <filename>classdecaf_1_1util_1_1_concurrent_modification_exception.html</filename>
    <base>decaf::lang::exceptions::RuntimeException</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>afbab8f76b1b673b9974d5f93bd959bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>aee6e54ce7cdcca0352d1bdc519c1af2b</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>af3eb958fdde1d64931b3dad4626072b6</anchor>
      <arglist>(const ConcurrentModificationException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>a36ca62e2dfc48cb43382273e906a7411</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>a63b7385bb45a223439e25417291eec71</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>ae5d51eaed57b8015dab4310d2cd77cc2</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConcurrentModificationException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>a853b40c276d2dcc3660635b08680c42a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentModificationException</name>
      <anchorfile>classdecaf_1_1util_1_1_concurrent_modification_exception.html</anchorfile>
      <anchor>adc3b0c12bf43daf93823c186f09e768e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Date</name>
    <filename>classdecaf_1_1util_1_1_date.html</filename>
    <base>Comparable&lt; Date &gt;</base>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a5b5ba11b312673dcc16c026ac665f4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a28427de3dd7705158c754ea3a5f94c8f</anchor>
      <arglist>(long long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a7dfed36d3b94566bd7c1fdaecc4f593c</anchor>
      <arglist>(const Date &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a7675c1d7f985ab48b69fd2113098d416</anchor>
      <arglist>(const Date &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Date</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>af98c4d44f8d8acdb166d98361079bee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getTime</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a01f7d57c995d8c1a247db994e052a113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a949a5f73fdcb4b83043c2b72e0d97e11</anchor>
      <arglist>(long long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>after</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>ad437464953114f2fd80d4d10ec27f619</anchor>
      <arglist>(const Date &amp;when) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>before</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a25e31d22a87b08b8ee354253d2d640fb</anchor>
      <arglist>(const Date &amp;when) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>aad5d14b787c523fafed2c859311c9bb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a794a8c29ef38b63ef1fd1607147603d6</anchor>
      <arglist>(const Date &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a560cedbd077e2af6250c09a92fc96ed7</anchor>
      <arglist>(const Date &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>a130f29c3e4f7628a97ad180af52fa0b9</anchor>
      <arglist>(const Date &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1util_1_1_date.html</anchorfile>
      <anchor>ac13be1cc178714ad2402f56cb4987881</anchor>
      <arglist>(const Date &amp;value) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Deque</name>
    <filename>classdecaf_1_1util_1_1_deque.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::Queue</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Deque</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>acad8eb19841f6478b49c5a2046f68cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>aab20e2ccf3c0d1c5cebc3cffdfb52cc0</anchor>
      <arglist>(const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a1a8fd0905e9f2a315eefe591afc484dd</anchor>
      <arglist>(const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>offerFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a4c037d9c0086162724a6e64c4ccbbe88</anchor>
      <arglist>(const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>offerLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>ab5026442b49f2d2b756ff34016a862c9</anchor>
      <arglist>(const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>removeFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a2875781e47fa2e7822156d4293a73953</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>removeLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>adb9bc762dafaba3f1f1f57d0240ccf8b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pollFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a38e66d2304266831ce6a6179aa1f2f6f</anchor>
      <arglist>(E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pollLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>ac00a3ab32a9f71cbeac41fbf3964f3dd</anchor>
      <arglist>(E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E &amp;</type>
      <name>getFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a021f9c5650dfd4e44f74f33c2af83ebd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const E &amp;</type>
      <name>getFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a840cdfbafb8cbcb8b5ab71f1c44d8948</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E &amp;</type>
      <name>getLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a2bc157bf40608955f650d8da95f4693d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const E &amp;</type>
      <name>getLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>ae07288f94b2607cad8ff1944e095bf31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>peekFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a9777f9754ebe4445ea5963b0c7348eb6</anchor>
      <arglist>(E &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>peekLast</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a87ad726fcfd771d7c488c9de5b40d50d</anchor>
      <arglist>(E &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>removeFirstOccurrence</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>ac3b1de15799e94910574c5850a43410f</anchor>
      <arglist>(const E &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>removeLastOccurrence</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>aabee300db0e60b7ae3aaa2da7e2c6a2b</anchor>
      <arglist>(const E &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a2a8b29a8081a5b7534aa7a9026f27010</anchor>
      <arglist>(const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>pop</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>aea9fe396fc9f8e4c448ac8893fa64e5f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>descendingIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>ab582a652eac3bc21bf6f1f53385553d0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>descendingIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_deque.html</anchorfile>
      <anchor>a17375fd1c51e7cbfa94a08b70f5ba927</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Iterator</name>
    <filename>classdecaf_1_1util_1_1_iterator.html</filename>
    <templarg>E</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_iterator.html</anchorfile>
      <anchor>ad6048b7746bb19c85dd942bd64e03fde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>next</name>
      <anchorfile>classdecaf_1_1util_1_1_iterator.html</anchorfile>
      <anchor>ae03ba0935e64dbdfd3b384ef89f9fd83</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classdecaf_1_1util_1_1_iterator.html</anchorfile>
      <anchor>a630a2f64ee8285e2905d5e1ab0d6ddc5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_iterator.html</anchorfile>
      <anchor>a3ef3d1121d22fa80df4f9361834f409c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::LinkedList</name>
    <filename>classdecaf_1_1util_1_1_linked_list.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractSequentialList</base>
    <base>decaf::util::Deque</base>
    <class kind="class">decaf::util::LinkedList::ConstLinkedListIterator</class>
    <class kind="class">decaf::util::LinkedList::ConstReverseIterator</class>
    <class kind="class">decaf::util::LinkedList::LinkedListIterator</class>
    <class kind="class">decaf::util::LinkedList::ListNode</class>
    <class kind="class">decaf::util::LinkedList::ReverseIterator</class>
    <member kind="function">
      <type></type>
      <name>LinkedList</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>adb90effea4ae7e3766c4d5ba9977b4aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedList</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a8a6a2550551f5acb2554b9a476f24271</anchor>
      <arglist>(const LinkedList&lt; E &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedList</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>af26f64270b48599ac73481a54b8ae5cd</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinkedList</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ae734805be03705cfa77277fdc18fe2f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkedList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ae1732bd9aa9f31ad0fb44811cc55a150</anchor>
      <arglist>(const LinkedList&lt; E &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LinkedList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a8b218e487c21b8ee676955e6c3310a93</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ac73db4c893a55d985bd437c80b7884e6</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ab4afe2aced7330f27c3f19494bec4004</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a39885ef841dcabac211703c8a59bdbb8</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ae9e821512524b28c93299fcde21942a5</anchor>
      <arglist>(int index, const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a4a74a58035384c176476fa6d86e110ad</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a02185504a9933efd07f996c35c65ee15</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a3c96177b1a2b1df1b35bb4f1331f4930</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>afef6159a30f8d5f5925b3200c5084a61</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>abdc7b02d997f75a4c196c8661820859c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a66ce5415e8282db714226f5befadbc42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a28f3ac2ba58aaa4b62628d67c4a3776f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a8ab6b2bcc1521a9e97f7be6bab54ac1f</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a6d6b658b978f39a10dc2c2d816ebf82e</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a63b6dcd80d7fd2dc940fcdfca38a6658</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a949ed4ef7efac2e3bbbdbb3ea0e40f19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a54f4a3b0e5238b9cba223a3674bbc91c</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a6536badb6907b0f361ffc24ee6a9fb91</anchor>
      <arglist>(E &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>aadd28f2de45ba0789cd086eb5cfa3b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>peek</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>aed721485edc2db03aac813cca8d04464</anchor>
      <arglist>(E &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>element</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a95572f23ee06ec83b6d46b7c4a6d943c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>aa5f01f45b6b62f68e751d6a87b0fc93b</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a92d0cc97928b07da8f57669d93e48870</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E &amp;</type>
      <name>getFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a1e288af9be95667b036938357c19a789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const E &amp;</type>
      <name>getFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>af4cb4e2a907f6ae9938f72df7e905d58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E &amp;</type>
      <name>getLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>aba565fa6161925ad3986f7f97cb60318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const E &amp;</type>
      <name>getLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ad5a8609c0e02bbb74d0a0807b9a01cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offerFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>aada8d4242dfe1940393701b9a1863e4b</anchor>
      <arglist>(const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offerLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a96e6784ab52573e053e66c9de16763c4</anchor>
      <arglist>(const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ac0092b2fe04b0abc434ffb403edfa41a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a159dbaa72ec673ba5b5e666417e39675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pollFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>ad9cd206903dc14d47a586646bbae7ec2</anchor>
      <arglist>(E &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pollLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a7479a84c4cc91396fe8f5440a944e70d</anchor>
      <arglist>(E &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>peekFirst</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a898752801e827f1f1f40c5151e7e46cf</anchor>
      <arglist>(E &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>peekLast</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a26da657c45d6bdc440392f516f461e20</anchor>
      <arglist>(E &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>pop</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a4c0b7534460b7d146f64a8f50b2df292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>push</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a5b5affbfe797781c7aa9ba426fbb7d4c</anchor>
      <arglist>(const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeFirstOccurrence</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a6ef53e4e255e67c612da97fb622759f9</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeLastOccurrence</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a28c45deb45f475fedaa790e8b33e0916</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>af14c85c35db0a1cc0eba45e2224295e3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a03c74352ebf61f23353c07a168f8f288</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>descendingIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a5c8d1cd6c03e8cf1c6cdd3f41b431e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>descendingIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_linked_list.html</anchorfile>
      <anchor>a114bc28455f1fcfce83e16c2db3dd895</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::List</name>
    <filename>classdecaf_1_1util_1_1_list.html</filename>
    <templarg>E</templarg>
    <base virtualness="virtual">decaf::util::Collection</base>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>aa6dd16fb5be754aab34041b1fa28218a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~List</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>abc5f2449370da28d3df11df062821064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>af923b3cd17a7c2d38f375f30edda7b9f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>aaf32e0050c3100aa9f74c6544c403ec8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>ac11ec120b080b00cc6a8046e025f9f4d</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>a03f77c8eccc6b59d85bd53c6df9d2d5a</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>a94063f4634e8b023f2302c7fba9a57a8</anchor>
      <arglist>(const E &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>ae52cdf903ea0c527e2b1dd0940bf413c</anchor>
      <arglist>(const E &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>a7dcca9a1c0eba8f450b3ef6dce220424</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>a04085b64a7b0001ccb37e791a913ec3c</anchor>
      <arglist>(int index, const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>aa94d30576e0baee2263d7c757b4c0202</anchor>
      <arglist>(int index, const E &amp;element)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>ac91967127f7728d7bc280e74db218eab</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>removeAt</name>
      <anchorfile>classdecaf_1_1util_1_1_list.html</anchorfile>
      <anchor>a20eb98b630cad600610a59b0480bdc52</anchor>
      <arglist>(int index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::ListIterator</name>
    <filename>classdecaf_1_1util_1_1_list_iterator.html</filename>
    <templarg></templarg>
    <base>decaf::util::Iterator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ListIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>a2c9b28ab86af4607b39167bafe472e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>a66c1af7bee313514cf8297316ba1bef0</anchor>
      <arglist>(const E &amp;e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>a20d93e035e0c952f71c0e2a7a5cdf67a</anchor>
      <arglist>(const E &amp;e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasPrevious</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>a49da594069834d22fede126acc999ecb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>previous</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>a66abb34917e79060ec9a203a6e210bcb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>nextIndex</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>a3c14adb19b578476df0b950f1bcdb12c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>previousIndex</name>
      <anchorfile>classdecaf_1_1util_1_1_list_iterator.html</anchorfile>
      <anchor>af9f13e48289325042a3d3d64830dd17d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Map</name>
    <filename>classdecaf_1_1util_1_1_map.html</filename>
    <templarg>K</templarg>
    <templarg>V</templarg>
    <templarg>COMPARATOR</templarg>
    <base>decaf::util::concurrent::Synchronizable</base>
    <class kind="class">decaf::util::Map::Entry</class>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a301bd045728cc7e5433656f8b818cc50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Map</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a465f0469f5e7e2bac2fcb9a2121fbbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>aa8978d74297e217c7ed1d4e96f63fd80</anchor>
      <arglist>(const Map &amp;source) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a552dcd14efc507b1cc7e2e6dac825854</anchor>
      <arglist>(const Map &amp;source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a9638c30cf089c1b61b11b38017041021</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a6ce9ff47e1b08bf2c18f3c958c9601a8</anchor>
      <arglist>(const K &amp;key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a2b127456cfeb6504ba9c9bb91289110e</anchor>
      <arglist>(const V &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a630d463c60e0e895e34e8a644e724d7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>ab13c6c72c2f948a0bec56c47f1f0ecb0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual V &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a2357d7baefc532eea472256295c63bd2</anchor>
      <arglist>(const K &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const V &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a154830c207b2a513d6c8694dfd5d9a46</anchor>
      <arglist>(const K &amp;key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>aaefb3fee8aa6fab3afc55af1d99b08e1</anchor>
      <arglist>(const K &amp;key, const V &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putAll</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a43372bf5715fe3d9747ba245e343d4be</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual V</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a1010ad9894ab4364a6e723721310c764</anchor>
      <arglist>(const K &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; K &gt;</type>
      <name>keySet</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>af669f5dc40751f5ec589f2273aeae74b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; V &gt;</type>
      <name>values</name>
      <anchorfile>classdecaf_1_1util_1_1_map.html</anchorfile>
      <anchor>a93196808223d4451680ec33a557dc024</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Map::Entry</name>
    <filename>classdecaf_1_1util_1_1_map_1_1_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>classdecaf_1_1util_1_1_map_1_1_entry.html</anchorfile>
      <anchor>a1cc69c803042ee673b15d7aa6e83ae81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Entry</name>
      <anchorfile>classdecaf_1_1util_1_1_map_1_1_entry.html</anchorfile>
      <anchor>ab2670853ac109dd87adc0aa748ef5063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const K &amp;</type>
      <name>getKey</name>
      <anchorfile>classdecaf_1_1util_1_1_map_1_1_entry.html</anchorfile>
      <anchor>a562e0d9e4ece6efb6d0e2c9ab4d87a08</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const V &amp;</type>
      <name>getValue</name>
      <anchorfile>classdecaf_1_1util_1_1_map_1_1_entry.html</anchorfile>
      <anchor>ac09763da368d90feea498d7945086c8e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classdecaf_1_1util_1_1_map_1_1_entry.html</anchorfile>
      <anchor>a83f67372130c7a8771fad0bf90a8b541</anchor>
      <arglist>(const V &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::NoSuchElementException</name>
    <filename>classdecaf_1_1util_1_1_no_such_element_exception.html</filename>
    <base>decaf::lang::exceptions::RuntimeException</base>
    <member kind="function">
      <type></type>
      <name>NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>a52c98393e73c2d2aa1cb1b43a3d90210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>a19b92e6192b012076f748cc2ec07b1d2</anchor>
      <arglist>(const decaf::lang::exceptions::RuntimeException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>a7b2dc67be5b63bdce3340e5335316377</anchor>
      <arglist>(const NoSuchElementException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>a818fb93014c7ce4aa58ac5b6d0e8e170</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>ace2b791b65b9fc8f10fffc3ec326e738</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>a66022967f6bda25d464cbe1414e7c588</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NoSuchElementException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>afad14272779abbbb6c822790a80ed85e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoSuchElementException</name>
      <anchorfile>classdecaf_1_1util_1_1_no_such_element_exception.html</anchorfile>
      <anchor>ab59937b801fc7f9f3fbca18ce47324ee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::PriorityQueue</name>
    <filename>classdecaf_1_1util_1_1_priority_queue.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractQueue</base>
    <class kind="class">decaf::util::PriorityQueue::ConstPriorityQueueIterator</class>
    <class kind="class">decaf::util::PriorityQueue::PriorityQueueIterator</class>
    <member kind="function">
      <type></type>
      <name>PriorityQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a2c554411599c72c59e501d79228824d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorityQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a57e0e63c7d8eb6d2003571c78eb74559</anchor>
      <arglist>(int initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorityQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a033ea715b91c5bc930791d98141da7fc</anchor>
      <arglist>(int initialCapacity, Comparator&lt; E &gt; *comparator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorityQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a8643661d93a92149a3fce53fa27b6edb</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorityQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>ae69614c7885706e42841da77bfcabb2f</anchor>
      <arglist>(const PriorityQueue&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PriorityQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a632f8004c8c6bab647b28b6e252afee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PriorityQueue&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>ab254eaa72d9b6a6d4d3931a14c4567f9</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>PriorityQueue&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>ad864efd9c3e20ed7840405103c57c1d2</anchor>
      <arglist>(const PriorityQueue&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>aa624d54a3876b5a69a3cc6dc668b957e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a29128bd1fb47306a773d72f0e3b9970f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a7228d619d66c027ae7a863d14b029635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>ab6d567a7cca021a8030b65a656a205d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a470ce84fbfce84af7c114166bc1d631f</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a3d7fee138b330ab39e4910c8557c76df</anchor>
      <arglist>(E &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>peek</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a7f29051e93fed990504f3d5e6eaee02f</anchor>
      <arglist>(E &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a5e82796f4547cc3a8f810b20f3ef723a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a1338924661b2f6979d1a6be8a997ea06</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a27bfbd46060690a356b99b07c637da04</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>decaf::lang::Pointer&lt; Comparator&lt; E &gt; &gt;</type>
      <name>comparator</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>a1144628c995ad8b002acf6c104cb792e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PriorityQueueIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_priority_queue.html</anchorfile>
      <anchor>ac8893a25e3622e57718bd7ddd6d573dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Properties</name>
    <filename>classdecaf_1_1util_1_1_properties.html</filename>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a2e97a26173e8a277adbf46e7ebf8d503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>aa74155e21806cc7335aaff9c4b518224</anchor>
      <arglist>(const Properties &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Properties</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a587f22de13205a3f473baed6232093f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Properties &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a413e779f983ccfd7d8ffc5ca126184d2</anchor>
      <arglist>(const Properties &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>af015bb21d06058c7531d5395b345f765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a8a96e849ed0912b03c84ab7a59c40ad6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getProperty</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a3233bdfa0e0d1fec6ffd066dbaf4f521</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getProperty</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>abae3a7bd0e9c3ccfba379cb147e85fb2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;defaultValue) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>setProperty</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a6dd04e7e3af01e423d8c64dac9306951</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>af2bc6f110916d58a4ae202fbcd13a5e4</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>afe998fa77897f2a78bb72fba4d40c8c8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>propertyNames</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a073bd4890fa805f061d5a8532ff1a910</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a6e89c365ff101c1e89591ce00fc7b8c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>abe2c0b6f8900d3ff065012b8a5a0aaee</anchor>
      <arglist>(const Properties &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Properties *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a7fc6ff5aa07130e15ee2762e48104698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a8276dff5dbea4399b1f0199867843296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a176f618be688976ed683e81e963a060a</anchor>
      <arglist>(const Properties &amp;source) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a44f6955d46ff33427c141273f52da158</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>ac678188264e85f7d007c4dd9585b0cac</anchor>
      <arglist>(decaf::io::InputStream *stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>aeb1ddb95a207ef36076dbaf914dac1dc</anchor>
      <arglist>(decaf::io::Reader *reader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>ae397fc1095baba83f9ab6a06a6c6d700</anchor>
      <arglist>(decaf::io::OutputStream *out, const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a0c3b9e7c16f1dc253523ebd07d309326</anchor>
      <arglist>(decaf::io::Writer *writer, const std::string &amp;comments)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>decaf::lang::Pointer&lt; Properties &gt;</type>
      <name>defaults</name>
      <anchorfile>classdecaf_1_1util_1_1_properties.html</anchorfile>
      <anchor>a87d904cf86f15be2c0c99c61cdfe29ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Queue</name>
    <filename>classdecaf_1_1util_1_1_queue.html</filename>
    <templarg>E</templarg>
    <base virtualness="virtual">decaf::util::Collection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Queue</name>
      <anchorfile>classdecaf_1_1util_1_1_queue.html</anchorfile>
      <anchor>a9dcfdfa1b7d44e41b13d88f8e8a4b783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1_queue.html</anchorfile>
      <anchor>af66759e10a969e7aa99f217efefe33af</anchor>
      <arglist>(const E &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1_queue.html</anchorfile>
      <anchor>a3f3aa86736798877441dfdbfb398dc5c</anchor>
      <arglist>(E &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_queue.html</anchorfile>
      <anchor>a62ec1ed9fbe96eedd9ec1cfb307fc243</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>peek</name>
      <anchorfile>classdecaf_1_1util_1_1_queue.html</anchorfile>
      <anchor>a35c29d0f7a27e0bce583492dd90e5084</anchor>
      <arglist>(E &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>element</name>
      <anchorfile>classdecaf_1_1util_1_1_queue.html</anchorfile>
      <anchor>a83437fb1735408d109ef65d19262df0b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Random</name>
    <filename>classdecaf_1_1util_1_1_random.html</filename>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>abb06e1922d832b95f5e4b40183533925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>adc084ca1e3e40b62f182d23b31c07727</anchor>
      <arglist>(unsigned long long seed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Random</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>adb967cf16f447e3d6c913d1bee042221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextBoolean</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a949ae549fa28c8dfc80e5ef7c8e4e37b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nextDouble</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a2547ddccb2f94e1f6137039aff3829a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextFloat</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>ae3116e11684fcb65ee6962836bd8683b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nextGaussian</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a3407cc32bc3ffafe816193328e888307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a2e4b107df356441fd0d923af1752ea53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nextInt</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a205edf7f2dcb966fe8c3c164939f31e4</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>nextLong</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a905dc8d58ee5897714a0196a0e0e7d48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextBytes</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>aa7c6c993512c363dfa7469e4dcb61107</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nextBytes</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>ad0338f47626ad64dbd553d4465ea4c44</anchor>
      <arglist>(unsigned char *buf, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeed</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a4c5215983f9fa6d57e3177d18222ef9d</anchor>
      <arglist>(unsigned long long seed)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>next</name>
      <anchorfile>classdecaf_1_1util_1_1_random.html</anchorfile>
      <anchor>a6bf646c5ed9b2c0591598eee3bd75015</anchor>
      <arglist>(int bits)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Set</name>
    <filename>classdecaf_1_1util_1_1_set.html</filename>
    <templarg>E</templarg>
    <base virtualness="virtual">decaf::util::Collection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Set</name>
      <anchorfile>classdecaf_1_1util_1_1_set.html</anchorfile>
      <anchor>aeb4f44d74b5ddbfaa12fdcc6fc9f4e5c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::StlList</name>
    <filename>classdecaf_1_1util_1_1_stl_list.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractList</base>
    <class kind="class">decaf::util::StlList::ConstStlListIterator</class>
    <class kind="class">decaf::util::StlList::StlListIterator</class>
    <member kind="function">
      <type></type>
      <name>StlList</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a7ca9b4f109d366c9e1a452dca204d7c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StlList</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>aa5cfba817553ebbff5b641f9104727da</anchor>
      <arglist>(const StlList &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StlList</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>ad3d13b981ffb565926a941b2597e2a1a</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a0e8bb25afc6a0efddbf59ece21f2aa65</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a8a8d4ded131933e2f70df1f1153af171</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>abb2cc27c00278fcc95f6205c5651947e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a61d04ea424665713e0ceba8e2fc048bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a8d99e1b1e0bf7aa6d852d525c67023a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a36ea0e10b0e1b6ed999311b50307fa0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a5bc52fe77463df1314157370f6a4246e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>ad1d63a08439d74b2caaa46858443eb89</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>ab1079ee8b7d7d82411f620e56a55bd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a8728586118c4cd50bc0889384edf921d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a80392479dcd75cc4491b4d600a6e6ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a165a1c826cabc354a5c402c773173f02</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>aefb928e28a6c8155572fc5ab1f93c6cc</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a50bce39df8e13de9701e6d2c42831e8a</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a1a86e3409c796b8f4e1564179e625a60</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>aaad2ccc3c581bd676930d226cf4706a9</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>acd16a2cdb96c9bd04297321a15554478</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a25c6fe5ce363dc3da36f26fd134914cd</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeAt</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a700d1025563c1c03534917eea33a1e38</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a87bc2749d4b56b427c2b33b037453088</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a9adf35305243e43d997d62c2087d70fc</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_list.html</anchorfile>
      <anchor>a76afe5d4bb4d47297faffe3a67f207e2</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::StlMap</name>
    <filename>classdecaf_1_1util_1_1_stl_map.html</filename>
    <templarg>K</templarg>
    <templarg>V</templarg>
    <templarg>COMPARATOR</templarg>
    <base>decaf::util::Map</base>
    <member kind="function">
      <type></type>
      <name>StlMap</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a401856e8e91e85fcca95e8d6107bb685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StlMap</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a08bc53d61e2fc9c0d4e9b26ed13c6759</anchor>
      <arglist>(const StlMap &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StlMap</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a72720d45cbbacc6cc8edef88cd026b30</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StlMap</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a7cd46ece4c90c08f7b1495cac9fc6384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a74797476d02b3657507530b335064464</anchor>
      <arglist>(const StlMap &amp;source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a0da24a9af084514d5cc454568a460b51</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a8608f8acdab426f7daa7d24d295dda38</anchor>
      <arglist>(const StlMap &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a0061210a084bcf49df38e74d89db01be</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>adf67d73c876b382e220cd3bcb0542a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a363f3d667442b6273d5e3b4686fa62ef</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a9ac2d1c54e4ca9b3c90d77807805f532</anchor>
      <arglist>(const V &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a82958569a14f4d4cdf3cb285a144a821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a67a796ab836a68ab3b72155110920c1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual V &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a9d96fc0bc2832e1b671442a10950c3d3</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const V &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a7dbe1d1390169c0107ac72de49023cb6</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a28d35e306ecde55820c3d43c5459975c</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putAll</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a85d70dc2d798190c8915aca3583c2b33</anchor>
      <arglist>(const StlMap&lt; K, V, COMPARATOR &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putAll</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>ac5d78a97da28679e4be584598da0ba7a</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual V</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a4cd37554670ebc167d9b0317e5cc8e70</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; K &gt;</type>
      <name>keySet</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a5d5b4960a9073bd97f3ae3ee47af2e90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; V &gt;</type>
      <name>values</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a418f2da9af17829bbc80d445a3814111</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a09ad551150779e19be31397798327815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a2c4a4cf44898d7bad58efbf0a7540d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>ac1805f329822042c886bdc370363c7dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>af68e83ea9c0e681b7c0b6bf6520d0618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>ad3e7e579fc17e6359f07f62dce5aa563</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>ab1ea54221b607c9672785a0c2ad51635</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>aab308c2e801eb7db9f16ff8848b7c77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_map.html</anchorfile>
      <anchor>a6bd7d94d49842f75b18344930b75d3c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::StlQueue</name>
    <filename>classdecaf_1_1util_1_1_stl_queue.html</filename>
    <templarg>T</templarg>
    <base>decaf::util::concurrent::Synchronizable</base>
    <class kind="class">decaf::util::StlQueue::QueueIterator</class>
    <member kind="function">
      <type></type>
      <name>StlQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a74bfeb0e8b7871199e5f794002c0a171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StlQueue</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a3bbd9e304ce5dac9c2d39b3aeb039d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator&lt; T &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>aac149b04dd11ada9317b0310eaf57c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>ad9a7e2653bd623022f7681a4cfb7ee20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>front</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>ad49fa34b1f09b55f37c72696d4d4c095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>front</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a725f51322c27ee064adef26bd91ba2d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a5e872245c5a1b27ddc6989f243dc33c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a90f7a2437214b9b274f6a12cd1caf628</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>adc54594ccb06273aa3a06d7bde18c968</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueueFront</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a1e3a3b4a23d643c6e2a6df0042397844</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>abf87dbcc5808ce4ae412f18accab86b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>aecffeeae59e4b11c3d5469011d3841f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>ac5144e818d8a0e643f120e823e45d10d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; T &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a96ef6656d2314e0bdf06ba3c29779458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a60230704b5ebb24d0888134ffe879f6e</anchor>
      <arglist>(StlQueue&lt; T &gt; &amp;target) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a2cdea1cdd8c7944295c0f06079e8089c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>aacfbedfd89b1736474e7128cc40c6ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a59cdf5e83458e4a888bb5c0c3c57b24c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a59c25e1831c3dbaff3a7399a02ef9462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>ab184526c3a34a708129368910ce48893</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a0a609e9d8567902e25b88f88f5df6ef2</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>ade6c5d0ac8023550797bbe26297824fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>aa11de7a3bbc8ab952ba46372825f1e64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getSafeValue</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_queue.html</anchorfile>
      <anchor>a8572ce13b284aabd8d1400b1147f296e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::StlSet</name>
    <filename>classdecaf_1_1util_1_1_stl_set.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractSet</base>
    <class kind="class">decaf::util::StlSet::ConstSetIterator</class>
    <class kind="class">decaf::util::StlSet::SetIterator</class>
    <member kind="function">
      <type></type>
      <name>StlSet</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a5e9f7324fd1d590d4d0c9c65d2627137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StlSet</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a1c966756865dbac043f352b2d13997ac</anchor>
      <arglist>(const StlSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StlSet</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a27b8112c172afad094e773d09501dfa2</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StlSet</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a42dd024637cddc02f6c516ff5df35160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>aa87d4ea61779f97c6691503f5fbfa60e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>aeac8e1034c21a61fd7ebecf705d8476a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>ab4df864edb02b2a6d83727b291943792</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a27752f1d7597319ae18d32b715b12471</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a1defd6f60553dd7ba6a4fab18c6bdabd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>ab203c6cf0da4c03378ba35fe8d512f3d</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>aa391fd63ff29e978efca3b96a85e508e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>ae35ee29bb4a6b7ca33acacd7878e2992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a4aef71940be9f9ae70f1c06be81557e3</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1_stl_set.html</anchorfile>
      <anchor>a66bcff749e8f3d2f0121eb179985f5ce</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::StringTokenizer</name>
    <filename>classdecaf_1_1util_1_1_string_tokenizer.html</filename>
    <member kind="function">
      <type></type>
      <name>StringTokenizer</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>a681a316e23e92e0591f173affff013ba</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;delim=&quot; \t\n\r\f&quot;, bool returnDelims=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StringTokenizer</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>a7cc98acd4f4745817d87dc3bbbf41115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>countTokens</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>a17335d02ac351325cef08be881676c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasMoreTokens</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>aa47063a4478519801517d128bd384926</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nextToken</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>af0c9d7a5c4ad7c8f1cbabcbca998ee9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nextToken</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>aabfaa40241214711c3f198ebc1773fd9</anchor>
      <arglist>(const std::string &amp;delim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>a87e48c194efad93ea7edf45f03226fc5</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;array)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1_string_tokenizer.html</anchorfile>
      <anchor>adcd9c2b9320c76e18059d362c56de761</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const std::string &amp;delim=&quot;&quot;, bool returnDelims=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::Timer</name>
    <filename>classdecaf_1_1util_1_1_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>adfdcd515633506afb85e3a2326f56e21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a1ff08ff3a7e2a8b073b0d09062d0fe66</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>af8b10bb7ec43f206b618613e4feef2af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a82eaeeda13510e28efca403d83cc76b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>purge</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>ad9549b691ae8ec37725c7fb8527a605b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>ae499a7d7c4535a435705a70d3e84fb87</anchor>
      <arglist>(TimerTask *task, long long delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a4bf93749f7263299f5a6a50d6dc776ed</anchor>
      <arglist>(const decaf::lang::Pointer&lt; TimerTask &gt; &amp;task, long long delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>ae49c318da46b79489b6b1077e9cd65ef</anchor>
      <arglist>(TimerTask *task, const Date &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a520e881f7f1ee477a96c5adbd3d693aa</anchor>
      <arglist>(const decaf::lang::Pointer&lt; TimerTask &gt; &amp;task, const Date &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a17de69c0967a1e74267df88d0f933be8</anchor>
      <arglist>(TimerTask *task, long long delay, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>ac23b3126f6c2748908fdd345863a0245</anchor>
      <arglist>(const decaf::lang::Pointer&lt; TimerTask &gt; &amp;task, long long delay, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>aa209e03ae126ed470f7dfd2c8c229483</anchor>
      <arglist>(TimerTask *task, const Date &amp;firstTime, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a8e9671133f963fc78ec3e3e71fca5b0b</anchor>
      <arglist>(const decaf::lang::Pointer&lt; TimerTask &gt; &amp;task, const Date &amp;firstTime, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleAtFixedRate</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a9b550bb9b9325ad5dfba1c28dc244c0b</anchor>
      <arglist>(TimerTask *task, long long delay, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleAtFixedRate</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>abc96f41a8f20b3644c72c6b718fc974e</anchor>
      <arglist>(const decaf::lang::Pointer&lt; TimerTask &gt; &amp;task, long long delay, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleAtFixedRate</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a6be43d494a8b2fb1bb3ed060279ae7ca</anchor>
      <arglist>(TimerTask *task, const Date &amp;firstTime, long long period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleAtFixedRate</name>
      <anchorfile>classdecaf_1_1util_1_1_timer.html</anchorfile>
      <anchor>a641917be88bf97ef138e5e1b125ffc01</anchor>
      <arglist>(const decaf::lang::Pointer&lt; TimerTask &gt; &amp;task, const Date &amp;firstTime, long long period)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::TimerTask</name>
    <filename>classdecaf_1_1util_1_1_timer_task.html</filename>
    <base>decaf::lang::Runnable</base>
    <member kind="function">
      <type></type>
      <name>TimerTask</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>adecd478ecc649fa2005d07694fbe05fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimerTask</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a517a477314222755349013ab747f81dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cancel</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a6db76f6b30d1f8b34fbee083c5e49d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>scheduledExecutionTime</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>af1402fe59668982f859d00186dcabedb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a21844cdef6a7772209b0118d5ee55162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setScheduledTime</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a4de3918d8c976fa182f341e52aac885f</anchor>
      <arglist>(long long time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long long</type>
      <name>getWhen</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a2ad15349657ebf00e9ce476a30f34efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Timer</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a50de43af5bed41f30c071d8cce0e81bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TimerImpl</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a277537a51e139d346c9e5e99b04c8483</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>decaf::internal::util::TimerTaskHeap</name>
      <anchorfile>classdecaf_1_1util_1_1_timer_task.html</anchorfile>
      <anchor>a8766b6a75907e1cc4dac49e372ab0576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::UUID</name>
    <filename>classdecaf_1_1util_1_1_u_u_i_d.html</filename>
    <base>Comparable&lt; UUID &gt;</base>
    <member kind="function">
      <type></type>
      <name>UUID</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a21c921412c9e54d40531d405f736ae80</anchor>
      <arglist>(long long mostSigBits, long long leastSigBits)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UUID</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>ad2c78daf71f9cbc1c14857f093eefa0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>af7d019224409c1083affa714b1a004c5</anchor>
      <arglist>(const UUID &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>abedaf5baa6678cd660246b52fa1948c5</anchor>
      <arglist>(const UUID &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>aa9c852f711f90658c4eb904dfcfec462</anchor>
      <arglist>(const UUID &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a2374f1b09049d786f9f72bfb66f97131</anchor>
      <arglist>(const UUID &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a8e565250b80e7724e911676e0479129e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getLeastSignificantBits</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a2834f6a6fe2276d9a10031c6dbd63e53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getMostSignificantBits</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a7a44926c0fa7ef345d4c24e5e344ae17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>node</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>afe6b42e3ad9b3f77d9025e6ee342e670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>timestamp</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>aeeecb31ea60575acc619de593f016604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>clockSequence</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>aea0fcc9fd157444e922593796dcbde6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>variant</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>aa008fb2ea04e1120b6294deb77fbb192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>version</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>ac5ee32e8e0bd3edd9477e972dac415ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UUID</type>
      <name>randomUUID</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a350820e722d82f353c3db4130d6979f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UUID</type>
      <name>nameUUIDFromBytes</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>acebaffc33cf7e50b9a4f1891d4713330</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UUID</type>
      <name>nameUUIDFromBytes</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>aace8b2017c6d329f146f7e88a0d8299b</anchor>
      <arglist>(const char *name, std::size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UUID</type>
      <name>fromString</name>
      <anchorfile>classdecaf_1_1util_1_1_u_u_i_d.html</anchorfile>
      <anchor>a8d8a62c05242c4a30d62fcb7ddf97304</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util::comparators</name>
    <filename>namespacedecaf_1_1util_1_1comparators.html</filename>
    <class kind="class">decaf::util::comparators::Less</class>
  </compound>
  <compound kind="class">
    <name>decaf::util::comparators::Less</name>
    <filename>classdecaf_1_1util_1_1comparators_1_1_less.html</filename>
    <templarg></templarg>
    <base>Comparator&lt; E &gt;</base>
    <member kind="function">
      <type></type>
      <name>Less</name>
      <anchorfile>classdecaf_1_1util_1_1comparators_1_1_less.html</anchorfile>
      <anchor>a2bf42a40e4e745bbbda09fb0e1e8417d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Less</name>
      <anchorfile>classdecaf_1_1util_1_1comparators_1_1_less.html</anchorfile>
      <anchor>a9f2dc2f5c293ba8a572a1fc3028e1d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classdecaf_1_1util_1_1comparators_1_1_less.html</anchorfile>
      <anchor>aefe17cfad333b59cdca5c348c111de8b</anchor>
      <arglist>(const E &amp;left, const E &amp;right) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classdecaf_1_1util_1_1comparators_1_1_less.html</anchorfile>
      <anchor>ac5f1e6359f80233382d96c5c838c3f62</anchor>
      <arglist>(const E &amp;o1, const E &amp;o2) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util::concurrent</name>
    <filename>namespacedecaf_1_1util_1_1concurrent.html</filename>
    <namespace>decaf::util::concurrent::atomic</namespace>
    <namespace>decaf::util::concurrent::locks</namespace>
    <class kind="class">decaf::util::concurrent::ConditionHandle</class>
    <class kind="class">decaf::util::concurrent::MutexHandle</class>
    <class kind="class">decaf::util::concurrent::AbstractExecutorService</class>
    <class kind="class">decaf::util::concurrent::BlockingQueue</class>
    <class kind="class">decaf::util::concurrent::BrokenBarrierException</class>
    <class kind="class">decaf::util::concurrent::Callable</class>
    <class kind="class">decaf::util::concurrent::CancellationException</class>
    <class kind="class">decaf::util::concurrent::ConcurrentMap</class>
    <class kind="class">decaf::util::concurrent::ConcurrentStlMap</class>
    <class kind="class">decaf::util::concurrent::CopyOnWriteArrayList</class>
    <class kind="class">decaf::util::concurrent::CopyOnWriteArraySet</class>
    <class kind="class">decaf::util::concurrent::CountDownLatch</class>
    <class kind="class">decaf::util::concurrent::Delayed</class>
    <class kind="class">decaf::util::concurrent::ExecutionException</class>
    <class kind="class">decaf::util::concurrent::Executor</class>
    <class kind="class">decaf::util::concurrent::Executors</class>
    <class kind="class">decaf::util::concurrent::ExecutorService</class>
    <class kind="class">decaf::util::concurrent::Future</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue</class>
    <class kind="class">decaf::util::concurrent::Lock</class>
    <class kind="class">decaf::util::concurrent::Mutex</class>
    <class kind="class">decaf::util::concurrent::RejectedExecutionException</class>
    <class kind="class">decaf::util::concurrent::RejectedExecutionHandler</class>
    <class kind="class">decaf::util::concurrent::Semaphore</class>
    <class kind="class">decaf::util::concurrent::Synchronizable</class>
    <class kind="class">decaf::util::concurrent::SynchronousQueue</class>
    <class kind="class">decaf::util::concurrent::ThreadFactory</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor</class>
    <class kind="class">decaf::util::concurrent::TimeoutException</class>
    <class kind="class">decaf::util::concurrent::TimeUnit</class>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ConditionHandle</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</filename>
    <member kind="function">
      <type></type>
      <name>ConditionHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a9f55166fb269fb22d9df759e9ac6055e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConditionHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a85155762e040078c100a2ee9775fa3b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConditionHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a9f55166fb269fb22d9df759e9ac6055e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConditionHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a85155762e040078c100a2ee9775fa3b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>pthread_cond_t</type>
      <name>condition</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a0a2193aadcc01248b85a776a7f007846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MutexHandle *</type>
      <name>mutex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>ab42d58d322aed76b2da2469340a87610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HANDLE</type>
      <name>semaphore</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a252407b8a1b10249143268ec3db6ed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CRITICAL_SECTION</type>
      <name>criticalSection</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>ac0c7a324a5ff710f6a274457f4ae586c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volatile unsigned int</type>
      <name>numWaiting</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a0b26b12279eccad52c78dbbc8e7d4201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volatile unsigned int</type>
      <name>numWake</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a8f3eae694c0142cc5b690c404cf6b62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volatile unsigned int</type>
      <name>generation</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_condition_handle.html</anchorfile>
      <anchor>a7e8cacb53c872f37f3b35c3e66320889</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::MutexHandle</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</filename>
    <member kind="function">
      <type></type>
      <name>MutexHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>adf5bb43b6ad0a38da528ac1e34e7171c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutexHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>a5d80bbafa3a040fcc7fabf345dcddb3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MutexHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>adf5bb43b6ad0a38da528ac1e34e7171c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutexHandle</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>a5d80bbafa3a040fcc7fabf345dcddb3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>pthread_mutex_t</type>
      <name>mutex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>a80f43c34c2ecf44e1e396da8bdfe23ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volatile long long</type>
      <name>lock_owner</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>aa3df3de42ea572a6b14e5263071266de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volatile long long</type>
      <name>lock_count</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>a728e28ce787d35a1a508a0be6c09a450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CRITICAL_SECTION</type>
      <name>mutex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex_handle.html</anchorfile>
      <anchor>afc2e4007caf105198268f7ebbd02c64f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::AbstractExecutorService</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_abstract_executor_service.html</filename>
    <base>decaf::util::concurrent::ExecutorService</base>
    <member kind="function">
      <type></type>
      <name>AbstractExecutorService</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_abstract_executor_service.html</anchorfile>
      <anchor>af57868ac645b021690a38370c3d31ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractExecutorService</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_abstract_executor_service.html</anchorfile>
      <anchor>aa5988a1cc27d1d7d5ffcedfcae4746ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::BlockingQueue</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::AbstractQueue</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlockingQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>a22445fea978c73373e372c415d55ce91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>a109657d5c0181f631872e8533d5dcc09</anchor>
      <arglist>(const E &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>a13c30e5dc2e330e7e0ecba7bac0d4d1c</anchor>
      <arglist>(const E &amp;e, long long timeout, const TimeUnit &amp;unit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual E</type>
      <name>take</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>ae01d0599ddb1a0da802bbfef26c1b3dc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>ada32b9d8fc257f4dde82c427aa445e81</anchor>
      <arglist>(E &amp;result, long long timeout, const TimeUnit &amp;unit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>remainingCapacity</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>af2f7fc6e2e973e9b7e7558c0add39d42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>drainTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>ae296a4cdb0aa17b1255d5bfbd1915549</anchor>
      <arglist>(Collection&lt; E &gt; &amp;c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>drainTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_blocking_queue.html</anchorfile>
      <anchor>a02de5b804a7128865d178459c7e8a3ca</anchor>
      <arglist>(Collection&lt; E &gt; &amp;c, int maxElements)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::BrokenBarrierException</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>aa489e75517cb5dcf32af327a4b1b9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>aa8beff656bf7d835b00ca1df4edffd29</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>a5a48da4e237d228e1fb9893a95b320e7</anchor>
      <arglist>(const BrokenBarrierException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>a38c7b54e58256223130a31808d33f1bb</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>a895b283ad8416a1968a4a91ba2d3e1e0</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>a3d5f95150e4fc9651903c58f62e9f45d</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BrokenBarrierException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>a24b2151565ed4ff15dcd72435c41a09f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrokenBarrierException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_broken_barrier_exception.html</anchorfile>
      <anchor>a6168a6f256accefc548b036f9ae73c62</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Callable</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_callable.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Callable</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_callable.html</anchorfile>
      <anchor>a3c0f22cb688fc0aa58663cc09622af2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual V</type>
      <name>call</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_callable.html</anchorfile>
      <anchor>ad5ee8eeb0a71ae780f695e9e93dc5c3e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::CancellationException</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a6126e3dfe12bb8b9ea968dc533e9a529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a34a87b53005cf10365ae5e45dcbfc659</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a630852a0920e05a08c60dcbd6bdbc2f8</anchor>
      <arglist>(const CancellationException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a3e61575e72499f808d7ee13502e5572f</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a1b0f3e445e28d631b373cdadab92360d</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a368009ea6ce87074e6b132fd98a35c52</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CancellationException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>aada47afee047b6feb3b71e9d4d09092d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CancellationException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_cancellation_exception.html</anchorfile>
      <anchor>a07e9e7334d262556b0c4c88c8fee71c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ConcurrentMap</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_concurrent_map.html</filename>
    <templarg>K</templarg>
    <templarg>V</templarg>
    <templarg>COMPARATOR</templarg>
    <base>decaf::util::Map</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentMap</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_map.html</anchorfile>
      <anchor>a5e72b409a4b24d77b84a51d68c99e294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>putIfAbsent</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_map.html</anchorfile>
      <anchor>a7d8b647ea8cabf2d5f6b09486e11b7a2</anchor>
      <arglist>(const K &amp;key, const V &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_map.html</anchorfile>
      <anchor>a01704563e111e75ac38951be3fbda1ec</anchor>
      <arglist>(const K &amp;key, const V &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>replace</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_map.html</anchorfile>
      <anchor>af8402647a781e848d66e54eb2731b4eb</anchor>
      <arglist>(const K &amp;key, const V &amp;oldValue, const V &amp;newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual V</type>
      <name>replace</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_map.html</anchorfile>
      <anchor>a0b2953adee47d6e0e62f80469ee40b14</anchor>
      <arglist>(const K &amp;key, const V &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ConcurrentStlMap</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</filename>
    <templarg>K</templarg>
    <templarg>V</templarg>
    <templarg>COMPARATOR</templarg>
    <base>decaf::util::concurrent::ConcurrentMap</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentStlMap</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a72a5e5887602bee34f98d9460da0a99a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentStlMap</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a692888b0c23e4f62bd26d9441679b8e7</anchor>
      <arglist>(const ConcurrentStlMap &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentStlMap</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a886ee34536d14b16dfcfef0372f110d9</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentStlMap</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a33def96cff5bb713651ef8fe190e9285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a08647e7e22257c2e824da6602cf7f83b</anchor>
      <arglist>(const ConcurrentStlMap &amp;source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a5f676e9b1c98e4c9a55b415b5dbdeba6</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a011b70fb29cff717e5525055caff3f0b</anchor>
      <arglist>(const ConcurrentStlMap &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>ae7d94ce6ee5b8a69479717b356356f06</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>ad8cf435c1a4a17d7eea1d2c0e1c2fc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a3a94f60906c5594e2eae332fb20d70a6</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>adbf6c41862ce534d81ad4fbb60b7ecb5</anchor>
      <arglist>(const V &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>ab659208b3a0e1f4ee7eb61c4f148f9ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>ac3e08e99b9d90fd8fae19303fea88d17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual V &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a00941885ddfb6542fbbbf9c37beed8a3</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const V &amp;</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a4b2daa4cb88161554813375c649cb77f</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a8085fe80d2829fd9178faa6769f5bd92</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a1ab879eb111d4e7369bd6678b1c8eae0</anchor>
      <arglist>(const ConcurrentStlMap&lt; K, V, COMPARATOR &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a649d617db6066f9593e8bf7ec44f2272</anchor>
      <arglist>(const Map&lt; K, V, COMPARATOR &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual V</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a6216dfbba983fddbfbda69a1c0a003b3</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; K &gt;</type>
      <name>keySet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a57a952a80cf93a72d72239480f4532a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; V &gt;</type>
      <name>values</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a69ac85267584009eb72723dcad41dd4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putIfAbsent</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a99a6ce31021eed06c13bb9f0edeec5e4</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a6c4379e88d2ceae132132e3d78a3168e</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replace</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>af7d0c52d9f0f339e0b349a12834632d8</anchor>
      <arglist>(const K &amp;key, const V &amp;oldValue, const V &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>replace</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>acc7a568da6c405602e695a5e724b5043</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a073167095bfa87791221ea5a05b456a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>aef127a8c60fc98306a1bca88bd8e4e99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>aaca964c3a28ced48573f2ffda4097daa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a7639da4f97d5523a8def1896f3a2cb28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>aa9e27cc17818ff46db11abc168553b00</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>ae156240d36abe89b0297fe683ce76ffd</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>a2698aead7a66924c2506f1b977c5d06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_concurrent_stl_map.html</anchorfile>
      <anchor>aaf31f790c9ac4c0b87fda6f5adea6f45</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::CopyOnWriteArrayList</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::List</base>
    <class kind="class">decaf::util::concurrent::CopyOnWriteArrayList::ArrayListIterator</class>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a996887273387f18849afdc8699ff5e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a4a68e2e0f8d07a539860d664b384c32a</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>ac8914c5efccfb3fa2596fa13720c97fc</anchor>
      <arglist>(const CopyOnWriteArrayList&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>afb8c490c2a3efcb7dae18f961139c802</anchor>
      <arglist>(const E *array, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CopyOnWriteArrayList</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>af2af8873e7860502b91c9a6f135144d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CopyOnWriteArrayList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a174136c43ddf0df59a7712d3e2a0198a</anchor>
      <arglist>(const CopyOnWriteArrayList&lt; E &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>CopyOnWriteArrayList&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>af09264d0728faffc593f63f438f4b511</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>ad7f23a66e492777f92e0b8f7be6ab0b5</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a1348b8a92975ef48222727245f6f4474</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>abb7d73a4cd2d1eb5736d1b263ce10a0f</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a7e7ad15476b1088cc4fb9d675686ebb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a9d1a9ed9c5c7ee9130d742c63f91c7bd</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a8fb3c07e7375fad25d7b9379c009f87d</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>aab459b5018cb9f2f0efd90f1415c405b</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a52634c38931211d1935e409c23923805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a679f08a5ca71cdfc31752c31afd728a8</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>afaa8a997b2001dd3eac1393ab0ed24ca</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>retainAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a9e7261248ccbbf2271773a027435037e</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>ae2846f1693ccf81c5c935b389858209c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a00ef7324a7dd2436bbcf2efca83db88d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a2014e3565818f0ba96696c81f78b3cda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>acbe1af5153877a32f8417abdc4974b90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a737d8a95f14b1ced78223dd572cdba29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>ae547c429d5c4623747dfa19294767116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>ad150e4ca24ee4e89778d4261e9d31c54</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ListIterator&lt; E &gt; *</type>
      <name>listIterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>abc4804b5a7b11f0ace30337787e2ba15</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a8adaf616d9b83c3bc9f748c20fa2692a</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>ab1bc60cf328e1b5e12b1f5cacea02eee</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a335e703f5eaa0d9c5de377a0b275f9c2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a1155ffa7088e44b057e4525ecbc475ce</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a9399a517142aaf482576e06db7a5e819</anchor>
      <arglist>(int index, const E &amp;element)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a620c28f8a7ee09881a0772f9abb24e71</anchor>
      <arglist>(int index, const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>removeAt</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a09dc6cc12d27c0099ba772cb1d805d62</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a3e9aadb858a9ac5734cb92fe5f262b5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIfAbsent</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a7ec6efcb0c6fcfa7f7ea144a3e928a97</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAllAbsent</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a030211025a0daf6450a8cdd29621f44b</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastIndexOf</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>aefce640c9f0a99bc17851c5ead5f59fd</anchor>
      <arglist>(const E &amp;value, int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a28cea55f9fbddf929157a1186cd551f7</anchor>
      <arglist>(const E &amp;value, int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a6057a5c7d3843eefd2731e4f5a618283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>aef1ce4a7101e660b9f4016e3fe28958b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a3f16177058f4033cf60af91c1d88faa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a1f26546287ed7fdb8445270ef93706c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a6eeb031cbf9b77e148c8df406a3fbbb5</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>aad6479087b6a17de9954b55a7d6f6f54</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a8a96fc4331aa1908c1400c5ade12cb9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a935ef769776ea3e5ef0784e15c7b9982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CopyOnWriteArraySet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list.html</anchorfile>
      <anchor>a22e03cff6eefd0ba4ecad622291bdf7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::CopyOnWriteArrayList::ArrayListIterator</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</filename>
    <base>decaf::util::ListIterator</base>
    <member kind="function">
      <type></type>
      <name>ArrayListIterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a8ab743968eaf8448ac03d85012198301</anchor>
      <arglist>(const ArrayPointer&lt; E &gt; &amp;array, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ArrayListIterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>ae205ca470c654ba56beb427b3ce36cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>next</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a5560744fe6ef589b054c67de83372aa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a30e7f3a59f82da814c9c1ab5e928be24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>aa7529564c934e80079a309a6e9c250f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>ab8f7e1148085edb2516a83327cca6d06</anchor>
      <arglist>(const E &amp;e DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>abc5219df101adc4ccec598b6f27db16f</anchor>
      <arglist>(const E &amp;e DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPrevious</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a8a29a0d9e77aedd88de05a13a4097a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>previous</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a5730cc4ad66aa30b8b6a4e8926ed66c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>nextIndex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a2d3515de3c7571a2518979255795141c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>previousIndex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_list_1_1_array_list_iterator.html</anchorfile>
      <anchor>a3005821734feaf26c68d7295fb1f466b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::CopyOnWriteArraySet</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</filename>
    <templarg></templarg>
    <base>decaf::util::AbstractSet</base>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArraySet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a41190a84ed18ff7ea6b4bde7a0241898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArraySet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>aa053b9f92e0fc71ad56f5a66c7ebfa30</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CopyOnWriteArraySet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a5ed55f1e353ec8d9cb19b7f5b83b6bc8</anchor>
      <arglist>(const E *array, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CopyOnWriteArraySet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a215735072a9a11cc64c3f1cbed229210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>abec887380bd2cd5d05c9ff9d50d6de23</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>ae1972947879543860f82c87feecd389b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a62b5bf261f7ba2f098e0ea697905d5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a07a3ade259949bc5ea2c1cda57d045aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a326d74eabc05a8d4e669412a4f67020e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>aa8ba2945a8493c665867c3febdb63e51</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a0beb959964fed733d33aef543b651c06</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>af461747cf9a54733ad04677ecc53bc00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a9908b641e34181430b5148cbe430772b</anchor>
      <arglist>(const E &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>ab91a7ae37f7d761ffec439f058acef33</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a3de44658bf6056a67a09810729ac71b8</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>ab78c852afe910b5102acd7e96967ebac</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>retainAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a93b82f90ad2e09cd2eecdf693cf1883a</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>ac25ce2da691bb41f8bdebfef8767c5eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_copy_on_write_array_set.html</anchorfile>
      <anchor>a64643423c8dc5b9ebeceeddedc3a27b2</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::CountDownLatch</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</filename>
    <member kind="function">
      <type></type>
      <name>CountDownLatch</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>adc5c23b8b07a6073bf3908b54dd9df0a</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CountDownLatch</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>a594fd7742cb9329b1dce0a9d8656f866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>await</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>a568418d090dc22667d8f880c2b876c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>await</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>afb77e4507ac487124df61d3cdff30fd3</anchor>
      <arglist>(long long timeOut)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>await</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>a49b225fb90c0f2a737f5dbe615c73d7e</anchor>
      <arglist>(long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>countDown</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>a9ca81b51f1351ebf3986bb0e6f41a3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCount</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_count_down_latch.html</anchorfile>
      <anchor>aa71a025d6e24900f2085f06b404cb2fe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Delayed</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_delayed.html</filename>
    <base>Comparable&lt; Delayed &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Delayed</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_delayed.html</anchorfile>
      <anchor>a67ea083c2d11fadafed8732607537d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getDelay</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_delayed.html</anchorfile>
      <anchor>a8165d49520db27c51086874ef42bc840</anchor>
      <arglist>(const TimeUnit &amp;unit)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ExecutionException</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>a184893f5b3263da86c6e5a88cc3f8b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>a5a926d83efcc1172800a289755ad52fe</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>ae2322189e51c6ccc68f494ed2e975cba</anchor>
      <arglist>(const ExecutionException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>afa73aba2ad184228d084be792552aa0c</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>af24061982ecf8b1a2e5a600ef7a01a69</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>a6bbc6477418a97d18611339aa38dfd59</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExecutionException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>a4d852ba8e6696a7b836fee3e8b3ad9e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_execution_exception.html</anchorfile>
      <anchor>a64ef52451a032e7ca5322b125c40c1e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Executor</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_executor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Executor</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor.html</anchorfile>
      <anchor>aa80de8a33210bdcf0d1acda31b09d601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor.html</anchorfile>
      <anchor>a4181efe5d671b23ae023003e52b7d14f</anchor>
      <arglist>(decaf::lang::Runnable *command)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Executors</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_executors.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Executors</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executors.html</anchorfile>
      <anchor>a99ccf3f184afffae599588e671c539ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadFactory *</type>
      <name>getDefaultThreadFactory</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executors.html</anchorfile>
      <anchor>a53f0ff86b5a09dee7655bc7f0347535d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExecutorService *</type>
      <name>newFixedThreadPool</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executors.html</anchorfile>
      <anchor>a3f4e15db379c92cedae54ccf25d1fb84</anchor>
      <arglist>(int nThreads)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExecutorService *</type>
      <name>newFixedThreadPool</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executors.html</anchorfile>
      <anchor>ab5d29560f208b21fd463d17fe14c8d05</anchor>
      <arglist>(int nThreads, ThreadFactory *threadFactory)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>decaf::lang::Thread</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executors.html</anchorfile>
      <anchor>ad9610027d87015707051b81b1fc0d725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ExecutorService</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</filename>
    <base>decaf::util::concurrent::Executor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExecutorService</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</anchorfile>
      <anchor>ae0ed8d21adf81f6f2280bdc2fc99cc62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>awaitTermination</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</anchorfile>
      <anchor>a560d42cd8e635c3c3004b70156f07e70</anchor>
      <arglist>(long long timeout, const TimeUnit &amp;unit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</anchorfile>
      <anchor>a94ab9f2eab8861dbb7116b87f9307887</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArrayList&lt; decaf::lang::Runnable * &gt;</type>
      <name>shutdownNow</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</anchorfile>
      <anchor>afbc22a74177c7e2d252432b0ce8ad567</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isShutdown</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</anchorfile>
      <anchor>af5b4162ae2935c967a60c2426d28b62c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTerminated</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_executor_service.html</anchorfile>
      <anchor>af7e1a8f1ef27a23bdf120c6e8cb80640</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Future</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_future.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Future</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_future.html</anchorfile>
      <anchor>ab09a23b5b979df419c6dc667f3c8ff4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>cancel</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_future.html</anchorfile>
      <anchor>a40cde03d58c1e15b0873d7b1a8bef29a</anchor>
      <arglist>(bool mayInterruptIfRunning)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isCancelled</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_future.html</anchorfile>
      <anchor>a88e8583854ec3f8b178ecf02c3b44282</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDone</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_future.html</anchorfile>
      <anchor>a35336fb2e311d079c60c9b3c1a7656dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual V</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_future.html</anchorfile>
      <anchor>a11bef80234ffc78da7a6ed30f63c4bd5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual V</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_future.html</anchorfile>
      <anchor>ae54f74ab4075b49f182811b085ca6466</anchor>
      <arglist>(long long timeout, const TimeUnit &amp;unit)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::LinkedBlockingQueue</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</filename>
    <templarg>E</templarg>
    <base>decaf::util::concurrent::BlockingQueue</base>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::ConstLinkedIterator</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::LinkedIterator</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::QueueNode</class>
    <class kind="class">decaf::util::concurrent::LinkedBlockingQueue::TotalLock</class>
    <member kind="function">
      <type></type>
      <name>LinkedBlockingQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a9828967c8162b135d154e4f682cd2117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedBlockingQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>af2d289fec5de0dcde1457d95f982d9ae</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinkedBlockingQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a94cd2c705a4807b1f85dce9648a106c8</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinkedBlockingQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a3238a082bbf502b41063e41aa80c2443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinkedBlockingQueue&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a43d181ce0eae63261b67cfd4e8c56ae6</anchor>
      <arglist>(const LinkedBlockingQueue&lt; E &gt; &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>LinkedBlockingQueue&lt; E &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>af1dc69714227eb3fbb4605d158c916ea</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a9cf79717dd4ae017ac43b3ef15a53fa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a0774d018b4a047a2a1313288b2f652a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remainingCapacity</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>adc88b63df8328266fe89256ed1916d7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a0a2bfa035134ecf04b747923fb9184c7</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>acc422303761c38f07b340cdc341d7149</anchor>
      <arglist>(const E &amp;value, long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a4df0996f939c963cc2630a6c2b9b2d7b</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>take</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a093b20a55f62e3e8cf4f81b1b9a4e5b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>aa16b86e58825b1cd7ac1092e35f439ac</anchor>
      <arglist>(E &amp;result, long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>add7b6b2a858723678588561b7d594357</anchor>
      <arglist>(E &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>peek</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a6553c7d97144fb9f5205e5c666aa05e1</anchor>
      <arglist>(E &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a53e108239a958fd521471a2ecd2592d4</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a0ba5173be192b3af20b42c826b152d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>accc88eef146544abd79dff948a74be3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>drainTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>af77f62ab4a4a83c391c5d87aef904e6c</anchor>
      <arglist>(Collection&lt; E &gt; &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>drainTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a24ddcddd07320e59f5726567f857cacc</anchor>
      <arglist>(Collection&lt; E &gt; &amp;sink, int maxElements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>aff9f0373f9fa68e60922756378f92280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_linked_blocking_queue.html</anchorfile>
      <anchor>a0351e0d76db8e8ee945a416ea8a9811d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Lock</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_lock.html</anchorfile>
      <anchor>ad6dc0174163f413c0463e3d7832960bf</anchor>
      <arglist>(Synchronizable *object, const bool intiallyLocked=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_lock.html</anchorfile>
      <anchor>a5fa59aa73734412e037afecde030aeb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_lock.html</anchorfile>
      <anchor>a5df27edb808012ecff1a5ea65f4beb63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_lock.html</anchorfile>
      <anchor>a104af80dc2571e2332c4c5b0f9d91574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_lock.html</anchorfile>
      <anchor>ad06c5e6a89953fc8b9868ffb7ce5ec20</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Mutex</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</filename>
    <base>decaf::util::concurrent::Synchronizable</base>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>acbc3d03d201ce40764ff28a7a13cf7e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a264d42efd0c6fa1e7b3221bd0f51d13d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mutex</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a69a1139fdbcfd16561d0f0fe7556e7c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>ae9f28b272566099f3db5b416d1a4312d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>aec320403573cf818a5d44b2ebb3cbfc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a4e78aab407b995ebae8b6726c8e64a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a8559b3d5780c8cd94e20e4139a1a5478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a8f48a6e492a7cbfd1db7355725f29f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>aaaefb431e14629e3ccee7fa6136e9176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a37d7d4b88e538ca30940400c7a3659f7</anchor>
      <arglist>(long long millisecs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a328a4738a2c36301078ebb0fabc2c37d</anchor>
      <arglist>(long long millisecs, int nanos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>abcf102f6b622c0e22dc8e30f3bf0d965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_mutex.html</anchorfile>
      <anchor>a5a0d0f047f4783bb3cc6ab9364452ac7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::RejectedExecutionException</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>a964eeff9bb358241e855d602943a49ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>a8223ddbce71c4f55b142a6b6fcac6cde</anchor>
      <arglist>(const Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>a0dfad3e598c97ec0c09c140a06236c92</anchor>
      <arglist>(const RejectedExecutionException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>a9ad0c7eb9a55bf61a44a82e5afd9ebe4</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>aba85c4bfdfb3dc441e559df928a4a1d9</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>a844e55f5aeb3b02a29b64f0379fef8e6</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RejectedExecutionException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>a22b84c42832d89db2db0996a1474d904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RejectedExecutionException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_exception.html</anchorfile>
      <anchor>ad8aa2e38403df96c4ef458e7fe7fda03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::RejectedExecutionHandler</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_handler.html</filename>
    <member kind="function">
      <type></type>
      <name>RejectedExecutionHandler</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_handler.html</anchorfile>
      <anchor>a30774185ed8fa1bf0814f46b2ff76ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RejectedExecutionHandler</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_handler.html</anchorfile>
      <anchor>acdc1a1892a9600f93a8c52991b9c238f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rejectedExecution</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_rejected_execution_handler.html</anchorfile>
      <anchor>a8a115a7ddb4c5e1b4cc85fe2d858a821</anchor>
      <arglist>(decaf::lang::Runnable *r, ThreadPoolExecutor *executer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Semaphore</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>Semaphore</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a9bcbe8c4204f798e84c81ca8ba99c758</anchor>
      <arglist>(int permits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Semaphore</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>ad7e15edb0c0ee07a3999a0455cc309b4</anchor>
      <arglist>(int permits, bool fair)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Semaphore</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a4150cc2bee379b8d064f84e88857e200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>aeda444bd314f76a877cd821a66ca74da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquireUninterruptibly</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a456ca63c30c53b4f40e74c6efdde911b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryAcquire</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a6a49c4d9b3e25aa3569a6b4aedd1eba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryAcquire</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>ae3223ea2466ee859a2c645ac16d1729c</anchor>
      <arglist>(long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>aa1fe2716f9b6f3752432f9aff3cdd01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a7355e20c1b8261b356416eb62b5853b9</anchor>
      <arglist>(int permits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquireUninterruptibly</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a74c41bca3ad68574b426257c188ee595</anchor>
      <arglist>(int permits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryAcquire</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>aba26d9337f9f4e150589178f105e0662</anchor>
      <arglist>(int permits)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryAcquire</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a39f7613790d83e53cb85e01866a5654e</anchor>
      <arglist>(int permits, long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>aa950eb3d34c04f18118c0bc70f12cc9d</anchor>
      <arglist>(int permits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availablePermits</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a104c7ac8d89d6df5076a1e29c35b3de1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>drainPermits</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>aac21e7b1f96aac4bca00c57c695b4bab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFair</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>a2e173648c9c8753084cb0bdc4fc32965</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_semaphore.html</anchorfile>
      <anchor>af2b210bdbb9d5dde5abc7f40c8ae8ed9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::Synchronizable</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Synchronizable</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>aafa28358281a6ed16caee7d1304f585b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>aeff8d806ec08a8ebef540fc059947c48</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>a6aa79e4c2590ec4387d7bb2b7d265c47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>aabb6c431936a7d4c9810a5f1a99bde21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>a2f7a5619b8800c295626983b9c7808a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>a84939d5f17b846ba0aeb5824ec6fff41</anchor>
      <arglist>(long long millisecs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>a954b500f0e3cba3a366da91e210893ea</anchor>
      <arglist>(long long millisecs, int nanos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>ad62b154e5f2709b5471b00da52d0ad0b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notifyAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronizable.html</anchorfile>
      <anchor>aa3af140ed7eded4f7ff59833c0bc619a</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::SynchronousQueue</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</filename>
    <templarg></templarg>
    <base>decaf::util::concurrent::BlockingQueue</base>
    <class kind="class">decaf::util::concurrent::SynchronousQueue::EmptyIterator</class>
    <member kind="function">
      <type></type>
      <name>SynchronousQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>acdf7a245c12ac998f3e9c1b526cf142d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SynchronousQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a2ff6cac4e54a6a1b3f6cc125f6c1c35a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>ada6346e053c6f59a9b32780c64ee5cbf</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a9df7b8c7344207dd5949638e833d21f5</anchor>
      <arglist>(const E &amp;e, long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>offer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a12f5c06d9522fefe9bc170ced84261ee</anchor>
      <arglist>(const E &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual E</type>
      <name>take</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>afac7f4916621cc7bb6507aef613ccf42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>aff18d0dcff547995fcbe76804f4070bf</anchor>
      <arglist>(E &amp;result, long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>poll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>af4e99353e1ae3dc9e12cba846027deef</anchor>
      <arglist>(E &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a126c876c8f8a3a18b5f49fbbe6a6ae8b</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>ae675b81636a7b477aade73b935cca0e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual decaf::util::Iterator&lt; E &gt; *</type>
      <name>iterator</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a43f1f0e9dc0ecddee0f0cd3eddd554ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a33c9ed046c54b1bc09a42d712955c725</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a356cfc7022ead025059c9518c7f4fd4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>remainingCapacity</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>ad422f0868c7484c9530e3133f749f81c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a05fa5351bd3c3fb4fc565ced04031609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a18d442096ae68b0e291ebcf5f8708ce9</anchor>
      <arglist>(const E &amp;value DECAF_UNUSED) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>ab81d48c782c7a6cf0bfbd9fb1252d40e</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a3833c8f5076cc4c4cf6d7b95d3d41b1e</anchor>
      <arglist>(const E &amp;value DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a3b8e775954def04b73975b5d98d12f72</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>retainAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a586a3211b2e096c8b12ff3b0a0fb9b38</anchor>
      <arglist>(const Collection&lt; E &gt; &amp;collection DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>peek</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a60a18973b985089aca8b5fb8449fe540</anchor>
      <arglist>(E &amp;result DECAF_UNUSED) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; E &gt;</type>
      <name>toArray</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>af6727c753178464bbe82856a1b564222</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>drainTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a5b0647a30d31fc130cc0daa2c2679cf9</anchor>
      <arglist>(Collection&lt; E &gt; &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>drainTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_synchronous_queue.html</anchorfile>
      <anchor>a16122744149fa45ec628e6a2a24111b4</anchor>
      <arglist>(Collection&lt; E &gt; &amp;c, int maxElements)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ThreadFactory</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_thread_factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadFactory</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_factory.html</anchorfile>
      <anchor>aae6c6e7f7fc1a79b80a18efa384c006e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual decaf::lang::Thread *</type>
      <name>newThread</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_factory.html</anchorfile>
      <anchor>a130ac173631abb28935f92e37a8834e7</anchor>
      <arglist>(decaf::lang::Runnable *r)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ThreadPoolExecutor</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</filename>
    <base>decaf::util::concurrent::AbstractExecutorService</base>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::AbortPolicy</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy</class>
    <member kind="function">
      <type></type>
      <name>ThreadPoolExecutor</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a27d29ac9f4a2423943e747e0ae17529d</anchor>
      <arglist>(int corePoolSize, int maxPoolSize, long long keepAliveTime, const TimeUnit &amp;unit, BlockingQueue&lt; decaf::lang::Runnable * &gt; *workQueue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPoolExecutor</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>aa1875b43033b0b8c85fafce4a793d2d3</anchor>
      <arglist>(int corePoolSize, int maxPoolSize, long long keepAliveTime, const TimeUnit &amp;unit, BlockingQueue&lt; decaf::lang::Runnable * &gt; *workQueue, RejectedExecutionHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPoolExecutor</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>af9e922a41f8db06bb1d46db7d9ba2a96</anchor>
      <arglist>(int corePoolSize, int maxPoolSize, long long keepAliveTime, const TimeUnit &amp;unit, BlockingQueue&lt; decaf::lang::Runnable * &gt; *workQueue, ThreadFactory *threadFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPoolExecutor</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a704197c0f5f356ae62c5743a8493dc72</anchor>
      <arglist>(int corePoolSize, int maxPoolSize, long long keepAliveTime, const TimeUnit &amp;unit, BlockingQueue&lt; decaf::lang::Runnable * &gt; *workQueue, ThreadFactory *threadFactory, RejectedExecutionHandler *handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadPoolExecutor</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>aee3d7bdfd745f46f1e97f763207862e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a0419ccc4de7327c1a04dc465b79b712a</anchor>
      <arglist>(decaf::lang::Runnable *task)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a3f3ff044d11169784b7eda2563f3945d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ArrayList&lt; decaf::lang::Runnable * &gt;</type>
      <name>shutdownNow</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a8a59cd4a55637c7a73e4aec1d27d3fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>awaitTermination</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a50c45118c0d83d26ed78d1304b9d2e28</anchor>
      <arglist>(long long timeout, const decaf::util::concurrent::TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShutdown</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a82503be5927bc5f4d750f34312169d71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTerminated</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>aa77e6c3c33fe07665fd06e2655b32860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPoolSize</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a276a121cf79a87fc2e2614d09c3e01c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCorePoolSize</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>ace89d57cf1207f52c7846efa42121f9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCorePoolSize</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>ad0c1012ae82638ffacbed136416c2d59</anchor>
      <arglist>(int poolSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaximumPoolSize</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a57de1a01be0a6d46c2f473500f0e8511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumPoolSize</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a21168ec8b8247eb1963ff6b1b6a42f3f</anchor>
      <arglist>(int maxSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getTaskCount</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>afcc401f4268899a8cfc9fdfa0a9c6d16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getActiveCount</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a02c6ca8c1c484ddfe1b651c6d2093da4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getCompletedTaskCount</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a36946c7ec9d1afa4af374897b68fc5e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLargestPoolSize</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a46a010e5463f13402fa8696719c89be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BlockingQueue&lt; decaf::lang::Runnable * &gt; *</type>
      <name>getQueue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>ad93625e6490c1d0732ab4469cdd22764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTerminating</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a2931ceee1a234f500b01e2d6137ae24b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>allowCoreThreadTimeout</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a6ef7a445aac64f9849911d6a881ffc8a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>allowsCoreThreadTimeout</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>aec4fab80fd79c9950e679511323c2b95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getKeepAliveTime</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a8899f51a24e9b417988c72644edd9f86</anchor>
      <arglist>(const TimeUnit &amp;unit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeepAliveTime</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>ab67030f3bc7ef5f6874bb8165af91a26</anchor>
      <arglist>(long long timeout, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThreadFactory</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a93d15ba714dad97ddd8536716dad7cc0</anchor>
      <arglist>(ThreadFactory *factory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ThreadFactory *</type>
      <name>getThreadFactory</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a4704ba7f516e24a1ad650df64aee8ec9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RejectedExecutionHandler *</type>
      <name>getRejectedExecutionHandler</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a4bc2b0dfbe786007b1790c8bfea2db64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRejectedExecutionHandler</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a9d83a262145ac1997fa2c71e500b0429</anchor>
      <arglist>(RejectedExecutionHandler *handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prestartCoreThread</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>ad202da0bba52bd62e031f1a23a96bcbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>prestartAllCoreThreads</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a05671685533cd9b559afb036552364ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a3a06cb62b9c6eb3aced3ee4b0c41f6c4</anchor>
      <arglist>(decaf::lang::Runnable *task)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purge</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a9b6d3a8628fe9c9537f5e66a0007cc6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeExecute</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>af3cf8df51691609536404f95c3d5dcb3</anchor>
      <arglist>(decaf::lang::Thread *thread, decaf::lang::Runnable *task)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterExecute</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>aa3445fbb83efbea887a53c1729664e6e</anchor>
      <arglist>(decaf::lang::Runnable *task, decaf::lang::Throwable *error)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>terminated</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>aebaa45dea8be6281916ced8417e6d9d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ExecutorKernel</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor.html</anchorfile>
      <anchor>a408263385b0fb463bd34bd01e5e7af3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ThreadPoolExecutor::AbortPolicy</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_abort_policy.html</filename>
    <base>decaf::util::concurrent::RejectedExecutionHandler</base>
    <member kind="function">
      <type></type>
      <name>AbortPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_abort_policy.html</anchorfile>
      <anchor>a2d639977f5b9aa1e54e1534fad897d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbortPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_abort_policy.html</anchorfile>
      <anchor>a5335b99efbf20e8063a2adbfef2e8f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rejectedExecution</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_abort_policy.html</anchorfile>
      <anchor>aa9dd8b4b86e2726fa79f60bae2984dee</anchor>
      <arglist>(decaf::lang::Runnable *task, ThreadPoolExecutor *executer DECAF_UNUSED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy.html</filename>
    <base>decaf::util::concurrent::RejectedExecutionHandler</base>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy::DiscardOldestPolicy</class>
    <class kind="class">decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy::DiscardPolicy</class>
    <member kind="function">
      <type></type>
      <name>CallerRunsPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy.html</anchorfile>
      <anchor>a69a047fa13ca211ab345e301b6eb3c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallerRunsPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy.html</anchorfile>
      <anchor>a7ac0626e5ba0d8a06be8fdd40c7c5143</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rejectedExecution</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy.html</anchorfile>
      <anchor>a40f5e1b2d2424c24d5eb79db6332f5d2</anchor>
      <arglist>(decaf::lang::Runnable *task, ThreadPoolExecutor *executer DECAF_UNUSED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy::DiscardOldestPolicy</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_oldest_policy.html</filename>
    <base>decaf::util::concurrent::RejectedExecutionHandler</base>
    <member kind="function">
      <type></type>
      <name>DiscardOldestPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_oldest_policy.html</anchorfile>
      <anchor>a862e143863646bbd1ff6844bac4755fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscardOldestPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_oldest_policy.html</anchorfile>
      <anchor>ae27e30349bba2ffcace25973a0f2ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rejectedExecution</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_oldest_policy.html</anchorfile>
      <anchor>af2ff6dde1b201bbc8d4a5ac58e102afb</anchor>
      <arglist>(decaf::lang::Runnable *task, ThreadPoolExecutor *executer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::ThreadPoolExecutor::CallerRunsPolicy::DiscardPolicy</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_policy.html</filename>
    <base>decaf::util::concurrent::RejectedExecutionHandler</base>
    <member kind="function">
      <type></type>
      <name>DiscardPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_policy.html</anchorfile>
      <anchor>adad0d13f1253a20807b503d5ab5dfc02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscardPolicy</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_policy.html</anchorfile>
      <anchor>a936d5fafac6de277471010861ccf40d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rejectedExecution</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_thread_pool_executor_1_1_caller_runs_policy_1_1_discard_policy.html</anchorfile>
      <anchor>aa623f5db2c5101cc9af8be2f6ce39b89</anchor>
      <arglist>(decaf::lang::Runnable *task, ThreadPoolExecutor *executer DECAF_UNUSED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::TimeoutException</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a42fca386b0d3eba0ceb9445c8f4ae2d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a34c8b4fa8e813acaa1ebad5f590695b7</anchor>
      <arglist>(const decaf::lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a50be1f2a794015a165f6f09c3a0fde07</anchor>
      <arglist>(const TimeoutException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a7ac7c2155708d7a2c4ad7d4db4489ebe</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a28a7d73ede764f285faf57d76649b7e7</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>ae3807b7c240347b31f79775ef9a2f50a</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeoutException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a824bcd1261473ddbd9598e301e95b1eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeoutException</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_timeout_exception.html</anchorfile>
      <anchor>a6c519f8cfecc2d558da7c8a194a57eac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::TimeUnit</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</filename>
    <base>Comparable&lt; TimeUnit &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeUnit</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>ad0c843f0b7f011922f5d18eafe477c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>convert</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a7d5ef9e99b794a95de51781c35f4928c</anchor>
      <arglist>(long long sourceDuration, const TimeUnit &amp;sourceUnit) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toNanos</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>aaadf0657ed5e666e3edf4a6098d2ccbe</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toMicros</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a3058860e408e3b39c355d869a3f4242b</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toMillis</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a89571672976824c5aba054d00dbc3984</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toSeconds</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a4150ff232e94a5be95e9c87b57860893</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toMinutes</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a7798fb09f0cf280b50ebea0c47d9449d</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toHours</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a5e1b2b7f33e0b6ef23274c8348c0c818</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>toDays</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>afe9723e4218b46f66738cb02b2db1196</anchor>
      <arglist>(long long duration) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timedWait</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a65fec469fbd580a4f79d19af2a7e2cdf</anchor>
      <arglist>(Synchronizable *obj, long long timeout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timedJoin</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>abb0ecdcb020fc26a1e4cf3de464d89ad</anchor>
      <arglist>(decaf::lang::Thread *thread, long long timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleep</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a91ddac576dd58a4242d04473595ffafa</anchor>
      <arglist>(long long timeout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a17ba52edbd67369cb472759e95ed0cab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a683d269f726b74e489f0139ab2aa936e</anchor>
      <arglist>(const TimeUnit &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>ae1495143066323f7872864b27fc52ff5</anchor>
      <arglist>(const TimeUnit &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>aa5daf4f64b3478572827249ab732f8fb</anchor>
      <arglist>(const TimeUnit &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a635b3fa597a7955adba88a4e565c7106</anchor>
      <arglist>(const TimeUnit &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TimeUnit &amp;</type>
      <name>valueOf</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>ada74d5c58e4a9cb86b6734ccc5718dee</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>NANOSECONDS</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a4e93412235fa8a4c7ba9e06fd87a2da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>MICROSECONDS</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a01b08dc0ae824f2ae73f2ac048f06ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>MILLISECONDS</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a49b2b250a2f4773ffb3eaf181936cbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>SECONDS</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a7f6f78e0cc5c6006ec959971f6b40f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>MINUTES</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a55345a6fcbb0fbf20a4888504424798e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>HOURS</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a7c625b554b3dcbb37dae9c85938d80d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit</type>
      <name>DAYS</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>aa6a490536bfe5ab862e34ad9092e5388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TimeUnit *const</type>
      <name>values</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a646b19d93b1bfba22c398e46092338e7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeUnit</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1_time_unit.html</anchorfile>
      <anchor>a2a298ac5300ad328d7e9d20a378fbed7</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util::concurrent::atomic</name>
    <filename>namespacedecaf_1_1util_1_1concurrent_1_1atomic.html</filename>
    <class kind="class">decaf::util::concurrent::atomic::AtomicBoolean</class>
    <class kind="class">decaf::util::concurrent::atomic::AtomicInteger</class>
    <class kind="class">decaf::util::concurrent::atomic::AtomicRefCounter</class>
    <class kind="class">decaf::util::concurrent::atomic::AtomicReference</class>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::atomic::AtomicBoolean</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</filename>
    <member kind="function">
      <type></type>
      <name>AtomicBoolean</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>a538d2fb7207b44e563e602e5138204e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicBoolean</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>aefcec7835a1847e0e1ada0a60d23e4f0</anchor>
      <arglist>(bool initialValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AtomicBoolean</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>a637abedd7cf7379ec9f512ff45942e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>acda18f6f1b1e7c4b5424b1e72f5192f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>a6004d4f0e530e925fc3b43fce0ce3738</anchor>
      <arglist>(bool newValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAndSet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>afefc8da8e113f2d1ea66dc78c66cf5d7</anchor>
      <arglist>(bool expect, bool update)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAndSet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>a077a6bedd874b6cfc2e04c724bbad1e4</anchor>
      <arglist>(bool newValue)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_boolean.html</anchorfile>
      <anchor>a59acb7b35233df7bdfe4acf688005070</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::atomic::AtomicInteger</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</filename>
    <base>decaf::lang::Number</base>
    <member kind="function">
      <type></type>
      <name>AtomicInteger</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a3ddb71a8f8acf39ed9a05ed081c62371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicInteger</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a6c4c430c85b7d09bc1df74dfe25c1a73</anchor>
      <arglist>(int initialValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AtomicInteger</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a6de33187e117c822e906da85cd0a6cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a45d6f85993d9fb188611039d1697f210</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>aff1296d3e571dbaf386c52e7022c268d</anchor>
      <arglist>(int newValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAndSet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a28abdc0c8d6b9201be7a5ef04dc17c54</anchor>
      <arglist>(int newValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAndSet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>ae3d67744fc603b0dc07183e62d48e785</anchor>
      <arglist>(int expect, int update)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAndIncrement</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>aaf5c37d20cc98a71b9880f3e76e792dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAndDecrement</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>aa2cd1a5f1727c8811c254462b5440cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAndAdd</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a4de947534e9c457b9c17db3fbbccaaf0</anchor>
      <arglist>(int delta)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>incrementAndGet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a58c89f04003c973fb121034be7ab9602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decrementAndGet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>ab136f0393a88a63ca533b572629b3402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAndGet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a2ecd49a1bd1c230cc5c0f7d16d34e066</anchor>
      <arglist>(int delta)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a4f76c529ce90909e39615fe843e109bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>aea0cafa561a8bca5aff5c996d9430246</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>longValue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a1e1a9d72bc86c8ad23f292fb330f09cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>floatValue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a1b1bc6dd60385352859b85853620ba7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_integer.html</anchorfile>
      <anchor>a01ebc0dd9b7e9fa5e467e9303b40178c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::atomic::AtomicRefCounter</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_ref_counter.html</filename>
    <member kind="function">
      <type></type>
      <name>AtomicRefCounter</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_ref_counter.html</anchorfile>
      <anchor>acd2ac520e8a5d417bf501d0ddd1f39bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicRefCounter</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_ref_counter.html</anchorfile>
      <anchor>adb24865e372a16ecd0ef9f2e66495f15</anchor>
      <arglist>(const AtomicRefCounter &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AtomicRefCounter</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_ref_counter.html</anchorfile>
      <anchor>a0cab544e2d067c6f4d08345713283081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_ref_counter.html</anchorfile>
      <anchor>a4cd1700ec8fcb723b58ae46c7e5ac743</anchor>
      <arglist>(AtomicRefCounter &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>release</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_ref_counter.html</anchorfile>
      <anchor>a3a9ac8a2f35c91589b7db0f6e267c7a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::atomic::AtomicReference</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AtomicReference</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>adcc55b78f459a677d423c1c237286e3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicReference</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>a1bdbc6a2d36422226f0ff773da7e2b46</anchor>
      <arglist>(T *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AtomicReference</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>a5d8fea8842f9532f805684bb768d4e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>abefb59e85af2d34ff089f638a01e6540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>a92f548a05004d88e0cf3d858cfd12b9a</anchor>
      <arglist>(T *newValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareAndSet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>a2719d7f8135bae6270b79b19c26acbd9</anchor>
      <arglist>(T *expect, T *update)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getAndSet</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>a2d2ae3837eacd9980f012d0a2e1ad2d5</anchor>
      <arglist>(T *newValue)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1atomic_1_1_atomic_reference.html</anchorfile>
      <anchor>a35aaa0a4f47dd1acc448003f65b43742</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util::concurrent::locks</name>
    <filename>namespacedecaf_1_1util_1_1concurrent_1_1locks.html</filename>
    <class kind="class">decaf::util::concurrent::locks::AbstractOwnableSynchronizer</class>
    <class kind="class">decaf::util::concurrent::locks::Condition</class>
    <class kind="class">decaf::util::concurrent::locks::Lock</class>
    <class kind="class">decaf::util::concurrent::locks::LockSupport</class>
    <class kind="class">decaf::util::concurrent::locks::ReadWriteLock</class>
    <class kind="class">decaf::util::concurrent::locks::ReentrantLock</class>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::locks::AbstractOwnableSynchronizer</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_abstract_ownable_synchronizer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractOwnableSynchronizer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_abstract_ownable_synchronizer.html</anchorfile>
      <anchor>a59137dd58c9ee0b73cd4b435de02129d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractOwnableSynchronizer</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_abstract_ownable_synchronizer.html</anchorfile>
      <anchor>a852723df8106bad7119009e5fb4eab65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>decaf::lang::Thread *</type>
      <name>getExclusiveOwnerThread</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_abstract_ownable_synchronizer.html</anchorfile>
      <anchor>aca1d24ab9dd0a9274fcce9342ddb55e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setExclusiveOwnerThread</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_abstract_ownable_synchronizer.html</anchorfile>
      <anchor>af377b1c680393c7412fc31c5995a862b</anchor>
      <arglist>(decaf::lang::Thread *thread)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::locks::Condition</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Condition</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>ac80b064b8e6c44f7a87e8ac772291e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>await</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>ad8b4c84ec293f46a36654f546ba1f303</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>awaitUninterruptibly</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>a9ae79654ddf046c62555c0948f716e1b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>awaitNanos</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>ab1e09524c40d46d295005defcfacbf12</anchor>
      <arglist>(long long nanosTimeout)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>await</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>aa54852a0f664ac0a56fd74fb12623cd4</anchor>
      <arglist>(long long time, const TimeUnit &amp;unit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>awaitUntil</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>a9c4edc6c4794e6a08e77cef9d2cdc95a</anchor>
      <arglist>(const Date &amp;deadline)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>signal</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>a0ad56e2ae71add0b80a93bba13f925f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>signalAll</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_condition.html</anchorfile>
      <anchor>a98759d8f043f31294a5fd6953fa0e016</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::locks::Lock</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>ae55f7f80665d813af1795bc1031e5a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>aaf5e33af82d33690f732c05b090ac47d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lockInterruptibly</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>a82bc56cbfa50892f16c9352f08afd195</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>a4c8f6e93d8d128e1cfbbbdf87f089944</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>a0c596a02d8d2a3c822e7f711f5cb5b44</anchor>
      <arglist>(long long time, const TimeUnit &amp;unit)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>a7342edc9e65c3983e2fb35ccb36c0ae6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Condition *</type>
      <name>newCondition</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock.html</anchorfile>
      <anchor>a9979e3f16ec824a3d0967dd99d0d9147</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::locks::LockSupport</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock_support.html</filename>
    <member kind="function">
      <type></type>
      <name>~LockSupport</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock_support.html</anchorfile>
      <anchor>a66916690b3d78f535e3df37de7bdf170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unpark</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock_support.html</anchorfile>
      <anchor>a07ed4625328e89c93e5461c73c679421</anchor>
      <arglist>(decaf::lang::Thread *thread)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>park</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock_support.html</anchorfile>
      <anchor>a3127e78e7c6737d7354f55dbf25615a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>parkNanos</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock_support.html</anchorfile>
      <anchor>a210d6a1b14fbb1e7b24e1e5bf1075b97</anchor>
      <arglist>(long long nanos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>parkUntil</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_lock_support.html</anchorfile>
      <anchor>af7601c16027d78038969eeac84598bf8</anchor>
      <arglist>(long long deadline)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::locks::ReadWriteLock</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_read_write_lock.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReadWriteLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_read_write_lock.html</anchorfile>
      <anchor>a6eb75a0c0209f9794d9e7e3b96104ef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Lock &amp;</type>
      <name>readLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_read_write_lock.html</anchorfile>
      <anchor>a3e3a755dbaf6a41058f5c0fd7bacde9c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Lock &amp;</type>
      <name>writeLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_read_write_lock.html</anchorfile>
      <anchor>ab5aa0d9630e6318e41f632ab9a116e0b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::concurrent::locks::ReentrantLock</name>
    <filename>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</filename>
    <base>decaf::util::concurrent::locks::Lock</base>
    <member kind="function">
      <type></type>
      <name>ReentrantLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>ae0f1aea4c68a56308709bfec934df57f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReentrantLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>aa524940468cffdc8e50b6e70fd1b683e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>a9640c356ebebc14bd1fe1193ff8b64ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lockInterruptibly</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>a0348efeb81fdb765e63e60279203e754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>aef338d1af41d0cbc804b2a3b7bb7f27c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tryLock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>abf06d345f4193ec70c68bf46ccb9404e</anchor>
      <arglist>(long long time, const TimeUnit &amp;unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unlock</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>a50be127b441966bc64f6c3e0e7b7bb6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Condition *</type>
      <name>newCondition</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>a79b8f730096486de122c03ee0889f028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHoldCount</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>afc1a8376569c7c34d227979a719adb12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHeldByCurrentThread</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>acfc6b81ff0f79a25ad1b609708322aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>ad6a2ded13cdd2194534f8086164d1dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFair</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>acd37139e039f080181cd0fa995bc83a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1concurrent_1_1locks_1_1_reentrant_lock.html</anchorfile>
      <anchor>acab14ea402ec60434e188f8780f55aad</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util::logging</name>
    <filename>namespacedecaf_1_1util_1_1logging.html</filename>
    <class kind="class">decaf::util::logging::ConsoleHandler</class>
    <class kind="class">decaf::util::logging::ErrorManager</class>
    <class kind="class">decaf::util::logging::Filter</class>
    <class kind="class">decaf::util::logging::Formatter</class>
    <class kind="class">decaf::util::logging::Handler</class>
    <class kind="class">decaf::util::logging::Level</class>
    <class kind="class">decaf::util::logging::Logger</class>
    <class kind="class">decaf::util::logging::LoggerHierarchy</class>
    <class kind="class">decaf::util::logging::LogManager</class>
    <class kind="class">decaf::util::logging::LogRecord</class>
    <class kind="class">decaf::util::logging::LogWriter</class>
    <class kind="class">decaf::util::logging::MarkBlockLogger</class>
    <class kind="class">decaf::util::logging::PropertiesChangeListener</class>
    <class kind="class">decaf::util::logging::SimpleFormatter</class>
    <class kind="class">decaf::util::logging::SimpleLogger</class>
    <class kind="class">decaf::util::logging::StreamHandler</class>
    <class kind="class">decaf::util::logging::XMLFormatter</class>
    <member kind="enumeration">
      <name>Levels</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Off</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32bab852b1c0e02e37f60a132890945b98fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Null</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32bae93bdd0c06a8e664828c1d82dd153e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Markblock</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba8cbcfbf90fae95f6854965a53c23c627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Debug</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32bae60daebce02dd323ae902e4c2179fa6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Info</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba9671fa0bd596831ef39ec3a469f7cd9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Warn</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba39012f2f2e370d710198d033477f3be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Error</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32baf8f577e2169195dc67fc8dcb8d843f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fatal</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba714aac649430daa883e2b506c6173327</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Throwing</name>
      <anchorfile>namespacedecaf_1_1util_1_1logging.html</anchorfile>
      <anchor>a19471e5182c19ba767afe30e69f9b32ba24723257764781790fcc10c7359a6241</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::ConsoleHandler</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_console_handler.html</filename>
    <base>decaf::util::logging::StreamHandler</base>
    <member kind="function">
      <type></type>
      <name>ConsoleHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_console_handler.html</anchorfile>
      <anchor>a1fbb54609933e474850bb628d7e6cbff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConsoleHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_console_handler.html</anchorfile>
      <anchor>a064f87dc4d8ff1dbfa26a31eb30d63e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_console_handler.html</anchorfile>
      <anchor>a3716843b8ca7be585b4cd9d2b54db311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>publish</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_console_handler.html</anchorfile>
      <anchor>aa0e18161ea3b19b3b93f156cfcf0ec06</anchor>
      <arglist>(const LogRecord &amp;record)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::ErrorManager</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_error_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>ErrorManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a5b03ef47f29e2552a69a5c62850a8ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ErrorManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a52bd3f147338aec65ff9baa6ae225525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a87bd3f024eb1e04177130bf35b6456ec</anchor>
      <arglist>(const std::string &amp;message, decaf::lang::Exception *ex, int code)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>GENERIC_FAILURE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a27c3e3a142f92fae62bd5e26ecfce4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>WRITE_FAILURE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a81a3e12feccfbd88a44554a0c54fb0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>FLUSH_FAILURE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>ac9dd97c294d025a21493cc9ef020d992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>CLOSE_FAILURE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a6cf753706e8139507dd0e298a89435c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>OPEN_FAILURE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a7869acb5a12188d6b8b01769bc6dff29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>FORMAT_FAILURE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_error_manager.html</anchorfile>
      <anchor>a7b27d6ec61a00949f767be6920137bb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::Filter</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_filter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Filter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_filter.html</anchorfile>
      <anchor>aa9e4ffee880f27ce0aad8a10fdd8194b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLoggable</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_filter.html</anchorfile>
      <anchor>a556980cb40cd3a436ffb4833a17e455f</anchor>
      <arglist>(const LogRecord &amp;record) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::Formatter</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_formatter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Formatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_formatter.html</anchorfile>
      <anchor>a44f7a3afcfb8acbc380a01008922b0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_formatter.html</anchorfile>
      <anchor>ac1f7bb6b3be9ebe9fecc65d6a8e55ba6</anchor>
      <arglist>(const LogRecord &amp;record) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>formatMessage</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_formatter.html</anchorfile>
      <anchor>a0a2119141acd7857336223a05f1b5de3</anchor>
      <arglist>(const LogRecord &amp;record) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getHead</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_formatter.html</anchorfile>
      <anchor>ace8671cf14abdd0cfe5a85fa53009af9</anchor>
      <arglist>(const Handler *handler DECAF_UNUSED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTail</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_formatter.html</anchorfile>
      <anchor>a41717bece473a29169c71f28c02d5053</anchor>
      <arglist>(const Handler *handler DECAF_UNUSED)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::Handler</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_handler.html</filename>
    <base>decaf::io::Closeable</base>
    <member kind="function">
      <type></type>
      <name>Handler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>adee590370d597704e64aa4661e84d2fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Handler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>aecfee05e5c6e9333df7e45991f329257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a65857674d3f1fad96e0961de1f12659a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>publish</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>af89c2a7e73d9270f13984d16030e2ef1</anchor>
      <arglist>(const LogRecord &amp;record)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoggable</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a22595c31c595a2c652e73e4677827151</anchor>
      <arglist>(const LogRecord &amp;record) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFilter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>af70c2e76807b40825fca81ede71b56b6</anchor>
      <arglist>(Filter *filter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Filter *</type>
      <name>getFilter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>aa8bde41b9f83e0dde960e75ce83f6fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLevel</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a43bf0d06e5581011a0346cbe22a8a816</anchor>
      <arglist>(const Level &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Level</type>
      <name>getLevel</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a7363e76faf42f9f2c70d358a703427f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFormatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a61dd94f8574437010bf42f89de92fefb</anchor>
      <arglist>(Formatter *formatter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Formatter *</type>
      <name>getFormatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a48dac7dd52ddc2382207bbd2e456bf01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setErrorManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a9f5d5944a3b35470cead3b5eec83d1fd</anchor>
      <arglist>(ErrorManager *errorManager)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ErrorManager *</type>
      <name>getErrorManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>af6f9cf81d18a996086b3077a7e300e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reportError</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_handler.html</anchorfile>
      <anchor>a57e656e7f5e4866f3689ce5c1b7fb118</anchor>
      <arglist>(const std::string &amp;message, decaf::lang::Exception *ex, int code)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::Level</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_level.html</filename>
    <base>Comparable&lt; Level &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Level</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>ac01378247813a0946cd51959cbe5e8b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intValue</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>aac92f9f205fa9dd2e59a211dacb7ee5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>acae01d27afaf052e486d539d733e22cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a40c0a0a4b8c6bfa2ab02667826f159ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compareTo</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a188a307615d9d0ea01cb22aedac1ee75</anchor>
      <arglist>(const Level &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>abff35bc9f1fe5bf25615de1cf1971511</anchor>
      <arglist>(const Level &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a09648c7db1efed9d52a6247621e91f97</anchor>
      <arglist>(const Level &amp;value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator&lt;</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a50e841a22804c97422b6f1d2e79877ba</anchor>
      <arglist>(const Level &amp;value) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Level</type>
      <name>parse</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>ac766c6c7849c854d3c29e5a921787922</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>INHERIT</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a3b6a00230539adf559cefc1a18fcfbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>OFF</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>abf9325c1d411180acea8b99cd4fec7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>SEVERE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a9f08aa8d7bf43208bf2f23a645aa443b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>WARNING</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>abe97a493d4b6bca2c04514942b1fdcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>INFO</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a770fceb7b8e9015f032a5a559ab122cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>DEBUG</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a0f0b28b764e0afa013096213a99ca39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>CONFIG</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a8e5c3b6244a0ca6901423989cdd93cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>FINE</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>ae6a27fc1f63d1f73b582aae39b7e7bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>FINER</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>ace31a5dcb72bdd5b33af29e92a8e6215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>FINEST</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>af2f4e885a17cca7e028f7311e7b6483a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Level</type>
      <name>ALL</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>a63b627b0ec08412f4061ebc5f4e63d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Level</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_level.html</anchorfile>
      <anchor>ae465cba5851c83546713640fda8ff05f</anchor>
      <arglist>(const std::string &amp;name, int value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::Logger</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_logger.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Logger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>acf6f189a07608ad0a8cdac9b7407e507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>aa1096e2bb3f9c3dffc9bb7349975ad31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Logger *</type>
      <name>getParent</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a727ba7c6387dd88c2cfcd32d2651433b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a0e2abc30ae5edb8adf450fadaf3b1de4</anchor>
      <arglist>(Logger *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>aa17c95f0bed67ee3c5fb91a80118ca91</anchor>
      <arglist>(Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a8990d324d15636db53d8b5e1b536379e</anchor>
      <arglist>(Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; Handler * &gt; &amp;</type>
      <name>getHandlers</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>aacea929deb4cad43c674198be7fce443</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>ad9a7881b7d3eecb300180b7367442fa0</anchor>
      <arglist>(Filter *filter)</arglist>
    </member>
    <member kind="function">
      <type>const Filter *</type>
      <name>getFilter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a1f18baa5f1ca8c6038608792feb5112d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>getLevel</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a78cd49a478ca69b87aadf6e7b532a4fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevel</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>aff2cf72a1478285d62b6a531250b0c8a</anchor>
      <arglist>(const Level &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseParentHandlers</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a44829382dd23f969fe7f293dd366fc60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseParentHandlers</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a2ea2397cb06f34e595f2d4f5a38e9194</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>entering</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>afa3666da4de791ac31c3e8f55b722c44</anchor>
      <arglist>(const std::string &amp;blockName, const std::string &amp;file, const int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exiting</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>ae3479293d17e19e4e8a9a32af8b5e63a</anchor>
      <arglist>(const std::string &amp;blockName, const std::string &amp;file, const int line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>severe</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>af3d27581db22b2d4b5ab8fb5e81d7c63</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>warning</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>afe68cd3f2f2248c8c55687bab5f68a6e</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>info</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>ab68b2bd51736658b1f9d840cb1e1d2a3</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>debug</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a34c5557f8f945607764dfdfff375b86e</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>config</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>aadc35265448560b9a2bccc246d10426c</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fine</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a2295d9c62b755cb8af98dc774bbd7348</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finer</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a614b02b2114046c1703f8ea4b74d11ea</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finest</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>ac0c09e1e668007e9f8392fbdc2f5160e</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>throwing</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a1724acc47277a27785cac94562d99e3e</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string functionName, const decaf::lang::Throwable &amp;thrown)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoggable</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a61df6b1da5b0eb5888cb3bf092a6eee1</anchor>
      <arglist>(const Level &amp;level) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a0d3713c99a3460de03d48553a74962cd</anchor>
      <arglist>(LogRecord &amp;record)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a5b152f8f4d659f4d787512b080330920</anchor>
      <arglist>(const Level &amp;level, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>afbfef8faba8278e6e7628a88f3a6d998</anchor>
      <arglist>(const Level &amp;levels, const std::string &amp;file, const int line, const std::string &amp;message,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>aa620ec2b0885914ddfa3b9b6c407ff09</anchor>
      <arglist>(const Level &amp;level, const std::string &amp;file, const int line, const std::string &amp;message, lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger *</type>
      <name>getAnonymousLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a5d9a1e12065a62ad378a01a0ccc97e6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger *</type>
      <name>getLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a81f0c489851d0c5cc94cbe9b9630be4f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Logger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger.html</anchorfile>
      <anchor>a280fbd16bd155f95dbb432e500bf159b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::LoggerHierarchy</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_logger_hierarchy.html</filename>
    <member kind="function">
      <type></type>
      <name>LoggerHierarchy</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger_hierarchy.html</anchorfile>
      <anchor>ae86b44c1e9dfec613b93c21fed65ab6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoggerHierarchy</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_logger_hierarchy.html</anchorfile>
      <anchor>a7a6391114c8efde068529c462044bf1f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::LogManager</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_log_manager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a3554047049d9fc0aa2da493fce9ce30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>aefebc22ffc1e3c7830749bcc112e5519</anchor>
      <arglist>(Logger *logger)</arglist>
    </member>
    <member kind="function">
      <type>Logger *</type>
      <name>getLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a8e57ad5df243779e1f8c5248be13630f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLoggerNames</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>aa3881d5a05d7cdd1d9c9e2854292b9a9</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProperties</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a78cc596f1b63f8ba1aebdc7a5a02f13a</anchor>
      <arglist>(const util::Properties &amp;properties)</arglist>
    </member>
    <member kind="function">
      <type>const util::Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a71a7968dbf857b0276a30e2b623e366d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getProperty</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a9970d250a26b4e6663214bf865d245c7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPropertyChangeListener</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a5ce5b921bb60067fe2e58cfe1fbb9055</anchor>
      <arglist>(PropertyChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePropertyChangeListener</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a39a24aa203a2167a39b9b8a6409ff10f</anchor>
      <arglist>(PropertyChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readConfiguration</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>ae12da20f5ee99702b46c6c5536f41633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readConfiguration</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>aaee390e12562248ef7ddd59f5a7d012e</anchor>
      <arglist>(decaf::io::InputStream *stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a8c7dc7f81c015cc0bdb2434b2be2e98b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogManager &amp;</type>
      <name>getLogManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a868af78c12110486ea861ba10e73cb8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a1e840a1d5e3ee821a0e8da124fdec882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LogManager</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a0d186861b7bcbb33a54eee2696b5eb20</anchor>
      <arglist>(const LogManager &amp;manager)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>ae3817efc2e3d387b790c57c4813d394c</anchor>
      <arglist>(const LogManager &amp;manager)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>decaf::lang::Runtime</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_manager.html</anchorfile>
      <anchor>a529ba491ffb55443becd36a939008222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::LogRecord</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_log_record.html</filename>
    <member kind="function">
      <type></type>
      <name>LogRecord</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a762d31b22242ffa60755b0f05262a6a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogRecord</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>ad6f7be1adfac11ba7fad111a2dd8923e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>getLevel</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a8f1be6cdfa5485e73a86ac7abf71fd65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevel</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>ac34cfa2b65cd77afe73195ea8ed5da8b</anchor>
      <arglist>(Level value)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getLoggerName</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>aaa9c066f1cd69128dd54f78e46ea1fda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoggerName</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a2b1727e610ef518e2d9722166134095c</anchor>
      <arglist>(const std::string &amp;loggerName)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSourceFile</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a797f531467d8654a47c019649fe941ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceFile</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a2ff499a351145f17224e1535d3bbbb37</anchor>
      <arglist>(const std::string &amp;sourceFile)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSourceLine</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>aa5a8ebd06ccee276689a6df74752468b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceLine</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>abc17894a525af0630eab4c7c61f9938d</anchor>
      <arglist>(unsigned int sourceLine)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a645bfc9641cdc7e58963d7932513f733</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessage</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>ab5582db729e6c847ef2f6495eb2c0b12</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSourceFunction</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>aad16243ad502b076ebec2da7ede83cb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceFunction</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a73beddb0308dfd5edbac538ab042f60a</anchor>
      <arglist>(const std::string &amp;functionName)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getTimestamp</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a6654169d505da7b1bd87f356efac4733</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a807d8586ae5f78cce66390a857593bc7</anchor>
      <arglist>(long long timeStamp)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getTreadId</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>aeaaf8b5da16187c06c2b263be99eb21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTreadId</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a352c5c51652606e6af264cc40106325a</anchor>
      <arglist>(long long threadId)</arglist>
    </member>
    <member kind="function">
      <type>decaf::lang::Throwable *</type>
      <name>getThrown</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a7fa1ed2af58137e241a8228f96acea9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThrown</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_record.html</anchorfile>
      <anchor>a55a0e613e4b86738f17700d0eee7a1e9</anchor>
      <arglist>(decaf::lang::Throwable *thrown)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::LogWriter</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_log_writer.html</filename>
    <member kind="function">
      <type></type>
      <name>LogWriter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>a65d7b41fe610f3c0c22ddc8c68670cf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogWriter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>a7e703ce6b3f96eb6240dc956327de6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>a9ea85ff800eed01062c16e4887bf8df5</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string &amp;prefix, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>ae1b90fc37c253b7b7423ad199ef3006f</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogWriter &amp;</type>
      <name>getInstance</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>a1e45c0d2a98d99e3c600625f2fe5b4fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>returnInstance</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>a085785f65e4898f177b24737f8c79009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_log_writer.html</anchorfile>
      <anchor>afccad6a421ff2074b4cc3b0568d5a2d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::MarkBlockLogger</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_mark_block_logger.html</filename>
    <member kind="function">
      <type></type>
      <name>MarkBlockLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_mark_block_logger.html</anchorfile>
      <anchor>a3493b26a147c4026852a87133b10a89f</anchor>
      <arglist>(Logger *logger, const std::string &amp;blockName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MarkBlockLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_mark_block_logger.html</anchorfile>
      <anchor>a021ab8c0bb13acb2e0f20b61874fa53a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::PropertiesChangeListener</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_properties_change_listener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertiesChangeListener</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_properties_change_listener.html</anchorfile>
      <anchor>addb2092044734e1ff68682c58be2838c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onPropertiesReset</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_properties_change_listener.html</anchorfile>
      <anchor>a7394599cbfc87182c4f960b4bd915008</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onPropertyChanged</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_properties_change_listener.html</anchorfile>
      <anchor>aa169c1d6c040cb74fa0b677990cfb2d8</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;oldValue, const std::string &amp;newValue)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::SimpleFormatter</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_simple_formatter.html</filename>
    <base>decaf::util::logging::Formatter</base>
    <member kind="function">
      <type></type>
      <name>SimpleFormatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_formatter.html</anchorfile>
      <anchor>aa718c187d90de3cbc5c073a9ce30e57c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleFormatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_formatter.html</anchorfile>
      <anchor>a91243699faae717468f75fb6276ca8dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_formatter.html</anchorfile>
      <anchor>aa005b56b4a853ff9d6306d9179fcb18e</anchor>
      <arglist>(const LogRecord &amp;record) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::SimpleLogger</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>abf50c5526d884593d79b1d7d5318069c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleLogger</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>a6912aecaa8dcdc4b8e1d1e397ad97688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>a34eec0854449745ebd202a4de3a2ed15</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>debug</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>a047d4b5449733a107752a6b185ea646f</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>info</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>a2e7fa93339f65df7bfde926d097f0cd8</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>warn</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>ad215376444c75a299357ba361e7cdf8b</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>aa7c5838e06b62bf692f813b4465843e7</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fatal</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>a95ecb34d0244f86c9f2bff0dc39cd843</anchor>
      <arglist>(const std::string &amp;file, const int line, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_simple_logger.html</anchorfile>
      <anchor>a3dda77673f832bdcdd6ec746a5b26bc0</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::StreamHandler</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</filename>
    <base>decaf::util::logging::Handler</base>
    <member kind="function">
      <type></type>
      <name>StreamHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a69536d887e76ed7a025d3f1697547178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StreamHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a30cb000e73c3f33ab61ccc741f52e16b</anchor>
      <arglist>(decaf::io::OutputStream *stream, Formatter *formatter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StreamHandler</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>aa4c285677f2774704ff7b0dc0dad72d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>ad827c1b87a4bc29c23a9c38ff4854bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a80cd4dcc81f640c05aad44b16eb6888c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>publish</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a246a768f2707c5e389abeba7de18315d</anchor>
      <arglist>(const LogRecord &amp;record)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoggable</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a37e93ff12cb879a82e9ba697fe39d878</anchor>
      <arglist>(const LogRecord &amp;record) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setOuputStream</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a420b1edebb433a8999ed5e8e14be2fbb</anchor>
      <arglist>(decaf::io::OutputStream *stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_stream_handler.html</anchorfile>
      <anchor>a95fe7d9c2a585ab71066059353a5f374</anchor>
      <arglist>(bool closeStream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::logging::XMLFormatter</name>
    <filename>classdecaf_1_1util_1_1logging_1_1_x_m_l_formatter.html</filename>
    <base>decaf::util::logging::Formatter</base>
    <member kind="function">
      <type></type>
      <name>XMLFormatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_x_m_l_formatter.html</anchorfile>
      <anchor>a363fe327f926f57caaa6d448abf2487c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XMLFormatter</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_x_m_l_formatter.html</anchorfile>
      <anchor>a3f080c2516891cec1b1883c81bee0745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_x_m_l_formatter.html</anchorfile>
      <anchor>aa0f02e5cfad5f644ecdf046c7937f6a9</anchor>
      <arglist>(const LogRecord &amp;record) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getHead</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_x_m_l_formatter.html</anchorfile>
      <anchor>acce1010f054c7c2f45bfa396210b29ac</anchor>
      <arglist>(const Handler *handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTail</name>
      <anchorfile>classdecaf_1_1util_1_1logging_1_1_x_m_l_formatter.html</anchorfile>
      <anchor>adcbd8243fe719b785ff3fc3a3f621d08</anchor>
      <arglist>(const Handler *handler)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>decaf::util::zip</name>
    <filename>namespacedecaf_1_1util_1_1zip.html</filename>
    <class kind="class">decaf::util::zip::Adler32</class>
    <class kind="class">decaf::util::zip::CheckedInputStream</class>
    <class kind="class">decaf::util::zip::CheckedOutputStream</class>
    <class kind="class">decaf::util::zip::Checksum</class>
    <class kind="class">decaf::util::zip::CRC32</class>
    <class kind="class">decaf::util::zip::DataFormatException</class>
    <class kind="class">decaf::util::zip::Deflater</class>
    <class kind="class">decaf::util::zip::DeflaterOutputStream</class>
    <class kind="class">decaf::util::zip::Inflater</class>
    <class kind="class">decaf::util::zip::InflaterInputStream</class>
    <class kind="class">decaf::util::zip::ZipException</class>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::Adler32</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_adler32.html</filename>
    <base>decaf::util::zip::Checksum</base>
    <member kind="function">
      <type></type>
      <name>Adler32</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>ade0468178e309e9d112bfc9596998c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Adler32</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>abaab8ed00f3ff8a516d8a5cbdb8b509f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>a926f728e45f11748ae7fa5b0017b2755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>a6c3a59d9f0c8e30cc01e3be5eb54e513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>a3ee745c84d621a14cdf2ce53994661bf</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>a4e0af1d48b114e03e1b31cc8d4b3c02d</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>a1624626d00d3e7bf8c7208f3e129ab24</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_adler32.html</anchorfile>
      <anchor>a8e8c6ec3b317fce88acb0991b88c65ff</anchor>
      <arglist>(int byte)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::CheckedInputStream</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</filename>
    <base>decaf::io::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>CheckedInputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</anchorfile>
      <anchor>ac5b276fd4835679e8a45d5804e666332</anchor>
      <arglist>(InputStream *inputStream, Checksum *sum, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedInputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</anchorfile>
      <anchor>a4695c9511bdf09ae35f29725473ea482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Checksum *</type>
      <name>getChecksum</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</anchorfile>
      <anchor>a6be7ed1679b279d5b0dc2004ae73b1ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</anchorfile>
      <anchor>ac381cf3ce7737a9946c5efc4f3165bb3</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</anchorfile>
      <anchor>a1248acc86ebef61745f467469e440d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_input_stream.html</anchorfile>
      <anchor>ac9f6b159d903ee9360fb7f435d667427</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::CheckedOutputStream</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_checked_output_stream.html</filename>
    <base>decaf::io::FilterOutputStream</base>
    <member kind="function">
      <type></type>
      <name>CheckedOutputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_output_stream.html</anchorfile>
      <anchor>ad84baa92c1a8cfc01c1c1954732b6b2e</anchor>
      <arglist>(decaf::io::OutputStream *outputStream, Checksum *sum, bool own=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckedOutputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_output_stream.html</anchorfile>
      <anchor>aba2081b3178d66a27be909f2cd5f3d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Checksum *</type>
      <name>getChecksum</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_output_stream.html</anchorfile>
      <anchor>af0425d29cb5eb3b18995677cfa96d938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_output_stream.html</anchorfile>
      <anchor>a6bdee573dc91c45d63a4102591e41149</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checked_output_stream.html</anchorfile>
      <anchor>a34c0a9ea94325fef0f19bf3b99addc05</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::Checksum</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_checksum.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Checksum</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>ae86ddd685ccbb062b586f91321f9bd4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>a3b363cf2bd1389653f3d286a8bf37a12</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>a286ad51694f45b8cf7e5636422d1fd0f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>a088ed54814378ab4aac0cc6f0b83f692</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>ae5651972f32b93f103d44a8207547d25</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>a3761d224e3eb908872c469b3be433f97</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_checksum.html</anchorfile>
      <anchor>a4317736ae9e3d0e742ddecac74cce2a9</anchor>
      <arglist>(int byte)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::CRC32</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</filename>
    <base>decaf::util::zip::Checksum</base>
    <member kind="function">
      <type></type>
      <name>CRC32</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a1dd7648247b8628693ca8b1d98e7d90e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CRC32</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a70770289449089f52025e4138638463a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>getValue</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a7da843975c562ccd124b162e175cae63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>ac2c358592fcf300cba7d03938de86deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a54109dc33decb4874dadfb8ec54bf8ad</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a08e55b585622dbbd8bd04c3c7f535a96</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a2657025d66d38b811296cc14b2907639</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_c_r_c32.html</anchorfile>
      <anchor>a02a58a2d7ea9bd2d52b4eb2d46e4a7f9</anchor>
      <arglist>(int byte)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::DataFormatException</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</filename>
    <base>decaf::lang::Exception</base>
    <member kind="function">
      <type></type>
      <name>DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>ab0920dde39849a0aa2f764a24449fbda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a0a4c21bfe76cf4ffd354caaaeb7dfc56</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a62c25c5462d6bb7377ffeab506fc02f4</anchor>
      <arglist>(const DataFormatException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a73de2225b93ff18dc5fd77259c559c7b</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a4428fa8ff9d112c10c4090dd361dfdd4</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a5e504c4558b5bc69889d4230810b74dc</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DataFormatException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a8139b11f378dfe5d7385e1f0fff56d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataFormatException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_data_format_exception.html</anchorfile>
      <anchor>a5a97ba7461c31d6f7b1b4f1ec1a346d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::Deflater</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_deflater.html</filename>
    <member kind="function">
      <type></type>
      <name>Deflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a81ff05087ec55eb42a64a9c02c71d037</anchor>
      <arglist>(int level, bool nowrap=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Deflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>ac0e27070bf6329b37ba310601cd2f189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Deflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a3ded69e78ea481686493f8a932b0cea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>afc382ac1b2ec971e125b271db6c96bff</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a01bd17b4976d3b3819019b7fea2cb88f</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>ab28f5e182a1637924bbc5eabb418bca8</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a1d1a7e81f34a78410ec1eb7b9a319837</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a5d7d0fe55a02d912c9befb3c5a39b0db</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>afb26686d04250c4d113f4821457e451d</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrategy</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a46f9a31a2ddebbefe0a36192b24ed17a</anchor>
      <arglist>(int strategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevel</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>ab2b5640523b46d5de9142a131f6ea453</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a0dc342e9ade44810bd6d932cb55dfb90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>ad67b4f7b5ed509a85d38acc23343d90e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>afd438a0cc30cc35523e70d261543a90e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>aac3aef8a4a6e2f58c2059390c6f16e66</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a0fab01069290b8c2963a460aa4c58f88</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>deflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a235cdd1804bf3370b358bcf13346298b</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getAdler</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a103f65a8309670e47c8d41f592596b57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getBytesRead</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a3e4be46511cbbac84cbcd68a3501fbe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getBytesWritten</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a2fdfc79cae593565a72e48533dce65a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a2f317bfd5b42d889a9686deedf6068c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a5d96274dca408b654ecde0b8f2ff7ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BEST_SPEED</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a45bca712d5679aa7961ee9aa7a494d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BEST_COMPRESSION</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a4818cb2b076de7a7694006841a38f9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEFAULT_COMPRESSION</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>aebe7736ca9bf73c63185eb362855c13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEFLATED</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>affd4e2a6a7f7fbc70a3be05ef5cea9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NO_COMPRESSION</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a080f6222cf01ccd1dc4c8f9955a1bcf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>FILTERED</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>aa5445980e72f3b60a8b1f123b8f7ec0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>HUFFMAN_ONLY</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a03eec580775f8cc61b78b326ba95794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEFAULT_STRATEGY</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater.html</anchorfile>
      <anchor>a23c009eab2f3f47decb334b7f43e6a7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::DeflaterOutputStream</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</filename>
    <base>decaf::io::FilterOutputStream</base>
    <member kind="function">
      <type></type>
      <name>DeflaterOutputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a07f9cd52e36e0e82227a22d8879c169b</anchor>
      <arglist>(decaf::io::OutputStream *outputStream, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeflaterOutputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a24fc930f4d4394be54eecd55d87936d7</anchor>
      <arglist>(decaf::io::OutputStream *outputStream, Deflater *deflater, bool own=false, bool ownDeflater=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeflaterOutputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>afb2c2bb5ca3a9b7804e358ce9de6b7d6</anchor>
      <arglist>(decaf::io::OutputStream *outputStream, Deflater *deflater, int bufferSize, bool own=false, bool ownDeflater=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeflaterOutputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a89c477faedca14edf8b394ac71d21a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>acd9c205d0508c7a287a3bb0e75442483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a3156d6c2276cbf9a41e881ed9ed89209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteByte</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a9b41448cb395490660fb503df1f6021e</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doWriteArrayBounded</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>ae516b99657a89b872d0725e89da78301</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a9a7b9bab2b6262c18ef6442b84d5af4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Deflater *</type>
      <name>deflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a0a2409fd633314ae5d164fdb9e72699a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>buf</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>ab6b03a05b9fe1fc77cbb268f6394b38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ownDeflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a3f9ca339368e67ec7d1f5a3c8dd9cdfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>ab6eed65587059bf8b51e12479f0a1f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::size_t</type>
      <name>DEFAULT_BUFFER_SIZE</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_deflater_output_stream.html</anchorfile>
      <anchor>a2808267ac8f7faaee095b457c6a3705c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::Inflater</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_inflater.html</filename>
    <member kind="function">
      <type></type>
      <name>Inflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a833ae9e97a9ca862633a4fcf37d9e013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a45eec8aaddbd9dcd7097486b9c31fcbb</anchor>
      <arglist>(bool nowrap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Inflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a48352d8620cea28a8bd42bc2f077cda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a4dbea69a2639272fb9944cc192b89a23</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>ac40e5a894622a25ba5c7595fd553cc63</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a035129ee9cc7f29e1cd330ad393c95d2</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemaining</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>ae618092112dfec418f0b29c62feae8b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a1ae3e50e69bdc19dae78db001f2b09ef</anchor>
      <arglist>(const unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>ab8184b786320407dbd04ec7dd0680b8b</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a32525c85b3dd28d764e230d8f956996b</anchor>
      <arglist>(const std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsInput</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>ae9533dcfdd5898c2fc5bbc523fa4a9fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsDictionary</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>af6aef0adff0971bab47b019d26f59de6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>ac3953d91341caf46a12d1b25bd9f6145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a4dc4a67e5ab81488ad793988b715aef1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>aeef6817ce2bac31e07f3647db345f832</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>ab14cc4def336ed0f41052edd54f7529b</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer, int offset, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inflate</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a78ac94fe3978943effcae39ac0deabab</anchor>
      <arglist>(std::vector&lt; unsigned char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getAdler</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a96410f92ecbe1fed50095b302ccb45ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getBytesRead</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>aa43fcc6f59157a8e3a5ac9a87344ccfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getBytesWritten</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a66977a13239e7edc1016a4eaa3722dd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a2212d864b079105bdbd5ca3a6dcb5f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater.html</anchorfile>
      <anchor>a80f90d6f03e19eaccebfff580517cb0b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::InflaterInputStream</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</filename>
    <base>decaf::io::FilterInputStream</base>
    <member kind="function">
      <type></type>
      <name>InflaterInputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a31958efa93d801d16e9a2c301f14738a</anchor>
      <arglist>(decaf::io::InputStream *inputStream, bool own=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflaterInputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a5089251e707bab8d3da81e5222d5d3ae</anchor>
      <arglist>(decaf::io::InputStream *inputStream, Inflater *inflater, bool own=false, bool ownInflater=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflaterInputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a42085e8052d038b8feb97f8a15bee243</anchor>
      <arglist>(decaf::io::InputStream *inputStream, Inflater *inflater, int bufferSize, bool own=false, bool ownInflater=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InflaterInputStream</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>ad987ed43645b067badcf4fda45e1fd3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>available</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a98ebc398888a57c05bd1c52f415d7a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a5ccc3334d7fec6890b2507f2783ca069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>skip</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>add21d387d1b17bcfd9cbd642e2f56095</anchor>
      <arglist>(long long num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>aa3d00a554c5fff4805be07c8d50cf3d6</anchor>
      <arglist>(int readLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a79c9bffe9dbf065e96d774820d1a348e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>markSupported</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a5eca95e1b22556ac68ed7fb2f7f3f811</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fill</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>ad47babe1e604a41a1bcfeeccbaf2221e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadByte</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a61fed11c09600bca777cecf51efafc2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doReadArrayBounded</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a4527c3bb4d5532aa7c9b413131bb1cf9</anchor>
      <arglist>(unsigned char *buffer, int size, int offset, int length)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Inflater *</type>
      <name>inflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a758fc2488c353da538e42b74d84f7753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned char &gt;</type>
      <name>buff</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a377a550ed675073f9464ae1bf384e7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>length</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>af024abaf13a948b41f889f1a71240bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ownInflater</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a4956212216e6bf5e7b2af83f3b5b636d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>atEOF</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>ad2e203716e242df023f2201137278063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>DEFAULT_BUFFER_SIZE</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_inflater_input_stream.html</anchorfile>
      <anchor>a887a5f232678dd8311151d0cb4aa73b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>decaf::util::zip::ZipException</name>
    <filename>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</filename>
    <base>decaf::io::IOException</base>
    <member kind="function">
      <type></type>
      <name>ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>a600215d3cca530a5bedf63ed487081dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>a8be880aa7ad924b9619f50a806e9ad4f</anchor>
      <arglist>(const lang::Exception &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>a183621f06c5ceee92a59be9ca276dcb5</anchor>
      <arglist>(const ZipException &amp;ex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>a051cbf495bee5a945dc82460923b6652</anchor>
      <arglist>(const char *file, const int lineNumber, const std::exception *cause, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>ab1731a1b5f595046ba83a5a0885f1bc5</anchor>
      <arglist>(const std::exception *cause)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>ad26277810f5a70fa0548384ee52c65cb</anchor>
      <arglist>(const char *file, const int lineNumber, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ZipException *</type>
      <name>clone</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>a1db327d6480564aad11a6e4cdfbf33ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZipException</name>
      <anchorfile>classdecaf_1_1util_1_1zip_1_1_zip_exception.html</anchorfile>
      <anchor>aabdd4303950fce6af699517ac97f10cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::less&lt; decaf::lang::ArrayPointer&lt; T &gt; &gt;</class>
    <class kind="struct">std::less&lt; decaf::lang::Pointer&lt; T &gt; &gt;</class>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; decaf::lang::ArrayPointer&lt; T &gt; &gt;</name>
    <filename>structstd_1_1less_3_01decaf_1_1lang_1_1_array_pointer_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01decaf_1_1lang_1_1_array_pointer_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>aa6ecaf4cc192d7ee6a143d595c78d381</anchor>
      <arglist>(const decaf::lang::ArrayPointer&lt; T &gt; &amp;left, const decaf::lang::ArrayPointer&lt; T &gt; &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; decaf::lang::Pointer&lt; T &gt; &gt;</name>
    <filename>structstd_1_1less_3_01decaf_1_1lang_1_1_pointer_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01decaf_1_1lang_1_1_pointer_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a36138b8ea9a05bdf0610d4f4eca397fd</anchor>
      <arglist>(const decaf::lang::Pointer&lt; T &gt; &amp;left, const decaf::lang::Pointer&lt; T &gt; &amp;right) const </arglist>
    </member>
  </compound>
</tagfile>
